# Autogenerated from a Treetop grammar. Edits may be lost.


module CoalTreetop
  include Treetop::Runtime

  def root
    @root ||= :body
  end

  module Body0
    def statement_list
      elements[1]
    end

  end

  module Body1
    def translate(t)
      statement_list.translate(t)
    end
  end

  def _nt_body
    start_index = index
    if node_cache[:body].has_key?(index)
      cached = node_cache[:body][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_ws
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r3 = _nt_statement_list
      s0 << r3
      if r3
        r5 = _nt_ws
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Body0)
      r0.extend(Body1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:body][start_index] = r0

    r0
  end

  module StatementList0
    def statement
      elements[0]
    end

    def statement_separator
      elements[1]
    end

    def statement_list
      elements[2]
    end
  end

  module StatementList1
    def translate(t)
      statement.translate(t)
      statement_list.translate(t)
    end
  end

  def _nt_statement_list
    start_index = index
    if node_cache[:statement_list].has_key?(index)
      cached = node_cache[:statement_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_statement
    s1 << r2
    if r2
      r3 = _nt_statement_separator
      s1 << r3
      if r3
        r4 = _nt_statement_list
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(StatementList0)
      r1.extend(StatementList1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r5 = _nt_statement
      if r5
        r0 = r5
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:statement_list][start_index] = r0

    r0
  end

  module StatementSeparator0
  end

  module StatementSeparator1
  end

  def _nt_statement_separator
    start_index = index
    if node_cache[:statement_separator].has_key?(index)
      cached = node_cache[:statement_separator][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r3 = _nt_ws
    if r3
      r2 = r3
    else
      r2 = instantiate_node(SyntaxNode,input, index...index)
    end
    s1 << r2
    if r2
      if has_terminal?(';', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(';')
        r4 = nil
      end
      s1 << r4
      if r4
        r6 = _nt_ws
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r5
        if r5
          r8 = _nt_statement_separator
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r7
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(StatementSeparator0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i9, s9 = index, []
      r11 = _nt_gap
      if r11
        r10 = r11
      else
        r10 = instantiate_node(SyntaxNode,input, index...index)
      end
      s9 << r10
      if r10
        if has_terminal?('\G[\\r\\n]', true, index)
          r12 = true
          @index += 1
        else
          r12 = nil
        end
        s9 << r12
        if r12
          r14 = _nt_ws
          if r14
            r13 = r14
          else
            r13 = instantiate_node(SyntaxNode,input, index...index)
          end
          s9 << r13
        end
      end
      if s9.last
        r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
        r9.extend(StatementSeparator1)
      else
        @index = i9
        r9 = nil
      end
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:statement_separator][start_index] = r0

    r0
  end

  def _nt_statement
    start_index = index
    if node_cache[:statement].has_key?(index)
      cached = node_cache[:statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_declaration_and_assignment
    if r1
      r0 = r1
    else
      r2 = _nt_declaration
      if r2
        r0 = r2
      else
        r3 = _nt_while_loop
        if r3
          r0 = r3
        else
          r4 = _nt_until_loop
          if r4
            r0 = r4
          else
            r5 = _nt_if_statement
            if r5
              r0 = r5
            else
              r6 = _nt_unless_statement
              if r6
                r0 = r6
              else
                r7 = _nt_block
                if r7
                  r0 = r7
                else
                  r8 = _nt_break
                  if r8
                    r0 = r8
                  else
                    r9 = _nt_expression
                    if r9
                      r0 = r9
                    else
                      @index = i0
                      r0 = nil
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:statement][start_index] = r0

    r0
  end

  module DeclarationAndAssignment0
    def declaration
      elements[0]
    end

    def expression
      elements[4]
    end
  end

  module DeclarationAndAssignment1
    def translate(t)
      t.assign(declaration.translate(t), expression.translate(t))
    end
  end

  def _nt_declaration_and_assignment
    start_index = index
    if node_cache[:declaration_and_assignment].has_key?(index)
      cached = node_cache[:declaration_and_assignment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_declaration
    s0 << r1
    if r1
      r3 = _nt_gap
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        if has_terminal?('=', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('=')
          r4 = nil
        end
        s0 << r4
        if r4
          r6 = _nt_gap
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
          if r5
            r7 = _nt_expression
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(DeclarationAndAssignment0)
      r0.extend(DeclarationAndAssignment1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:declaration_and_assignment][start_index] = r0

    r0
  end

  module Declaration0
    def type
      elements[0]
    end

    def gap
      elements[1]
    end

    def variable
      elements[2]
    end
  end

  module Declaration1
    def translate(t)
      var = variable.text_value
      t.declare(type.translate(t), var)
      #var
    end
  end

  def _nt_declaration
    start_index = index
    if node_cache[:declaration].has_key?(index)
      cached = node_cache[:declaration][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_type
    s0 << r1
    if r1
      r2 = _nt_gap
      s0 << r2
      if r2
        r3 = _nt_variable
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Declaration0)
      r0.extend(Declaration1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:declaration][start_index] = r0

    r0
  end

  module Block0
    def statement_list
      elements[2]
    end

  end

  module Block1
    def translate(t)
      statement_list.translate(t)
    end
  end

  module Block2
  end

  module Block3
    def translate(t)
      ""
    end
  end

  def _nt_block
    start_index = index
    if node_cache[:block].has_key?(index)
      cached = node_cache[:block][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('{', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('{')
      r2 = nil
    end
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_statement_list
        s1 << r5
        if r5
          r7 = _nt_ws
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            if has_terminal?('}', false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('}')
              r8 = nil
            end
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Block0)
      r1.extend(Block1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i9, s9 = index, []
      if has_terminal?('{', false, index)
        r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('{')
        r10 = nil
      end
      s9 << r10
      if r10
        r12 = _nt_ws
        if r12
          r11 = r12
        else
          r11 = instantiate_node(SyntaxNode,input, index...index)
        end
        s9 << r11
        if r11
          if has_terminal?('}', false, index)
            r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('}')
            r13 = nil
          end
          s9 << r13
        end
      end
      if s9.last
        r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
        r9.extend(Block2)
        r9.extend(Block3)
      else
        @index = i9
        r9 = nil
      end
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:block][start_index] = r0

    r0
  end

  module Break0
    def translate(t)
      t.break
    end
  end

  def _nt_break
    start_index = index
    if node_cache[:break].has_key?(index)
      cached = node_cache[:break][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('break', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 5))
      r0.extend(Break0)
      @index += 5
    else
      terminal_parse_failure('break')
      r0 = nil
    end

    node_cache[:break][start_index] = r0

    r0
  end

  module WhileLoop0
    def expression
      elements[4]
    end

    def statement
      elements[8]
    end
  end

  module WhileLoop1
    def translate(t)
      t.while(expression) do
        statement.translate(t)
      end
    end
  end

  def _nt_while_loop
    start_index = index
    if node_cache[:while_loop].has_key?(index)
      cached = node_cache[:while_loop][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('while', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('while')
      r1 = nil
    end
    s0 << r1
    if r1
      r3 = _nt_gap
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        if has_terminal?('(', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r4 = nil
        end
        s0 << r4
        if r4
          r6 = _nt_gap
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
          if r5
            r7 = _nt_expression
            s0 << r7
            if r7
              r9 = _nt_gap
              if r9
                r8 = r9
              else
                r8 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r8
              if r8
                if has_terminal?(')', false, index)
                  r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(')')
                  r10 = nil
                end
                s0 << r10
                if r10
                  r12 = _nt_ws
                  if r12
                    r11 = r12
                  else
                    r11 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r11
                  if r11
                    r13 = _nt_statement
                    s0 << r13
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(WhileLoop0)
      r0.extend(WhileLoop1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:while_loop][start_index] = r0

    r0
  end

  module UntilLoop0
    def expression
      elements[4]
    end

    def statement
      elements[8]
    end
  end

  module UntilLoop1
    def translate(t)
      t.until(expression) do
        statement.translate(t)
      end
    end
  end

  def _nt_until_loop
    start_index = index
    if node_cache[:until_loop].has_key?(index)
      cached = node_cache[:until_loop][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('until', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('until')
      r1 = nil
    end
    s0 << r1
    if r1
      r3 = _nt_gap
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        if has_terminal?('(', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r4 = nil
        end
        s0 << r4
        if r4
          r6 = _nt_gap
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
          if r5
            r7 = _nt_expression
            s0 << r7
            if r7
              r9 = _nt_gap
              if r9
                r8 = r9
              else
                r8 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r8
              if r8
                if has_terminal?(')', false, index)
                  r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(')')
                  r10 = nil
                end
                s0 << r10
                if r10
                  r12 = _nt_ws
                  if r12
                    r11 = r12
                  else
                    r11 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r11
                  if r11
                    r13 = _nt_statement
                    s0 << r13
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(UntilLoop0)
      r0.extend(UntilLoop1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:until_loop][start_index] = r0

    r0
  end

  module IfStatement0
    def expression
      elements[4]
    end

    def statement
      elements[8]
    end

    def else_statement
      elements[10]
    end
  end

  module IfStatement1
    def translate(t)
      t.if(expression, else_statement) do
        statement.translate(t)
      end
    end
  end

  module IfStatement2
    def expression
      elements[4]
    end

    def statement
      elements[8]
    end
  end

  module IfStatement3
    def translate(t)
      t.if(expression) do
        statement.translate(t)
      end
    end
  end

  def _nt_if_statement
    start_index = index
    if node_cache[:if_statement].has_key?(index)
      cached = node_cache[:if_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('if', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('if')
      r2 = nil
    end
    s1 << r2
    if r2
      r4 = _nt_gap
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        if has_terminal?('(', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r5 = nil
        end
        s1 << r5
        if r5
          r7 = _nt_gap
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_expression
            s1 << r8
            if r8
              r10 = _nt_gap
              if r10
                r9 = r10
              else
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s1 << r9
              if r9
                if has_terminal?(')', false, index)
                  r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(')')
                  r11 = nil
                end
                s1 << r11
                if r11
                  r13 = _nt_ws
                  if r13
                    r12 = r13
                  else
                    r12 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s1 << r12
                  if r12
                    r14 = _nt_statement
                    s1 << r14
                    if r14
                      r16 = _nt_ws
                      if r16
                        r15 = r16
                      else
                        r15 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s1 << r15
                      if r15
                        r17 = _nt_else_statement
                        s1 << r17
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(IfStatement0)
      r1.extend(IfStatement1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i18, s18 = index, []
      if has_terminal?('if', false, index)
        r19 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('if')
        r19 = nil
      end
      s18 << r19
      if r19
        r21 = _nt_gap
        if r21
          r20 = r21
        else
          r20 = instantiate_node(SyntaxNode,input, index...index)
        end
        s18 << r20
        if r20
          if has_terminal?('(', false, index)
            r22 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('(')
            r22 = nil
          end
          s18 << r22
          if r22
            r24 = _nt_gap
            if r24
              r23 = r24
            else
              r23 = instantiate_node(SyntaxNode,input, index...index)
            end
            s18 << r23
            if r23
              r25 = _nt_expression
              s18 << r25
              if r25
                r27 = _nt_gap
                if r27
                  r26 = r27
                else
                  r26 = instantiate_node(SyntaxNode,input, index...index)
                end
                s18 << r26
                if r26
                  if has_terminal?(')', false, index)
                    r28 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(')')
                    r28 = nil
                  end
                  s18 << r28
                  if r28
                    r30 = _nt_ws
                    if r30
                      r29 = r30
                    else
                      r29 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s18 << r29
                    if r29
                      r31 = _nt_statement
                      s18 << r31
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s18.last
        r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
        r18.extend(IfStatement2)
        r18.extend(IfStatement3)
      else
        @index = i18
        r18 = nil
      end
      if r18
        r0 = r18
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:if_statement][start_index] = r0

    r0
  end

  module ElseStatement0
    def statement
      elements[2]
    end
  end

  module ElseStatement1
    def translate(t)
      statement.translate(t)
    end
  end

  def _nt_else_statement
    start_index = index
    if node_cache[:else_statement].has_key?(index)
      cached = node_cache[:else_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('else', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('else')
      r1 = nil
    end
    s0 << r1
    if r1
      r3 = _nt_ws
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r4 = _nt_statement
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ElseStatement0)
      r0.extend(ElseStatement1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:else_statement][start_index] = r0

    r0
  end

  module UnlessStatement0
    def expression
      elements[4]
    end

    def statement
      elements[8]
    end

    def else_statement
      elements[10]
    end
  end

  module UnlessStatement1
    def translate(t)
      t.unless(expression, else_statement) do
        statement.translate(t)
      end
    end
  end

  module UnlessStatement2
    def expression
      elements[4]
    end

    def statement
      elements[8]
    end
  end

  module UnlessStatement3
    def translate(t)
      t.unless(expression) do
        statement.translate(t)
      end
    end
  end

  def _nt_unless_statement
    start_index = index
    if node_cache[:unless_statement].has_key?(index)
      cached = node_cache[:unless_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('unless', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('unless')
      r2 = nil
    end
    s1 << r2
    if r2
      r4 = _nt_gap
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        if has_terminal?('(', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r5 = nil
        end
        s1 << r5
        if r5
          r7 = _nt_gap
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_expression
            s1 << r8
            if r8
              r10 = _nt_gap
              if r10
                r9 = r10
              else
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s1 << r9
              if r9
                if has_terminal?(')', false, index)
                  r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(')')
                  r11 = nil
                end
                s1 << r11
                if r11
                  r13 = _nt_ws
                  if r13
                    r12 = r13
                  else
                    r12 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s1 << r12
                  if r12
                    r14 = _nt_statement
                    s1 << r14
                    if r14
                      r16 = _nt_ws
                      if r16
                        r15 = r16
                      else
                        r15 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s1 << r15
                      if r15
                        r17 = _nt_else_statement
                        s1 << r17
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(UnlessStatement0)
      r1.extend(UnlessStatement1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i18, s18 = index, []
      if has_terminal?('unless', false, index)
        r19 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure('unless')
        r19 = nil
      end
      s18 << r19
      if r19
        r21 = _nt_gap
        if r21
          r20 = r21
        else
          r20 = instantiate_node(SyntaxNode,input, index...index)
        end
        s18 << r20
        if r20
          if has_terminal?('(', false, index)
            r22 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('(')
            r22 = nil
          end
          s18 << r22
          if r22
            r24 = _nt_gap
            if r24
              r23 = r24
            else
              r23 = instantiate_node(SyntaxNode,input, index...index)
            end
            s18 << r23
            if r23
              r25 = _nt_expression
              s18 << r25
              if r25
                r27 = _nt_gap
                if r27
                  r26 = r27
                else
                  r26 = instantiate_node(SyntaxNode,input, index...index)
                end
                s18 << r26
                if r26
                  if has_terminal?(')', false, index)
                    r28 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(')')
                    r28 = nil
                  end
                  s18 << r28
                  if r28
                    r30 = _nt_ws
                    if r30
                      r29 = r30
                    else
                      r29 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s18 << r29
                    if r29
                      r31 = _nt_statement
                      s18 << r31
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s18.last
        r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
        r18.extend(UnlessStatement2)
        r18.extend(UnlessStatement3)
      else
        @index = i18
        r18 = nil
      end
      if r18
        r0 = r18
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:unless_statement][start_index] = r0

    r0
  end

  module FunctionCall0
    def function_name
      elements[0]
    end

    def argument_list
      elements[3]
    end

  end

  module FunctionCall1
    def translate(t)
      args = argument_list.translate(t)
      t.send function_name.translate(t), *args
    end
  end

  def _nt_function_call
    start_index = index
    if node_cache[:function_call].has_key?(index)
      cached = node_cache[:function_call][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_function_name
    s0 << r1
    if r1
      if has_terminal?('(', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('(')
        r2 = nil
      end
      s0 << r2
      if r2
        r4 = _nt_gap
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
        if r3
          r5 = _nt_argument_list
          s0 << r5
          if r5
            r7 = _nt_gap
            if r7
              r6 = r7
            else
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r6
            if r6
              if has_terminal?(')', false, index)
                r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(')')
                r8 = nil
              end
              s0 << r8
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FunctionCall0)
      r0.extend(FunctionCall1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:function_call][start_index] = r0

    r0
  end

  module ArgumentList0
    def argument
      elements[0]
    end

    def argument_list
      elements[4]
    end
  end

  module ArgumentList1
    def translate(t)
      [argument.translate(t)] + argument_list.translate(t)
    end
  end

  module ArgumentList2
    def translate(t)
      [super]
    end
  end

  module ArgumentList3
    def translate(t)
      []
    end
  end

  def _nt_argument_list
    start_index = index
    if node_cache[:argument_list].has_key?(index)
      cached = node_cache[:argument_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_argument
    s1 << r2
    if r2
      r4 = _nt_gap
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        if has_terminal?(',', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r5 = nil
        end
        s1 << r5
        if r5
          r7 = _nt_gap
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_argument_list
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(ArgumentList0)
      r1.extend(ArgumentList1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r9 = _nt_argument
      r9.extend(ArgumentList2)
      if r9
        r0 = r9
      else
        if has_terminal?('', false, index)
          r10 = instantiate_node(SyntaxNode,input, index...(index + 0))
          r10.extend(ArgumentList3)
          @index += 0
        else
          terminal_parse_failure('')
          r10 = nil
        end
        if r10
          r0 = r10
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:argument_list][start_index] = r0

    r0
  end

  def _nt_argument
    start_index = index
    if node_cache[:argument].has_key?(index)
      cached = node_cache[:argument][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_expression

    node_cache[:argument][start_index] = r0

    r0
  end

  def _nt_expression
    start_index = index
    if node_cache[:expression].has_key?(index)
      cached = node_cache[:expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_assignment

    node_cache[:expression][start_index] = r0

    r0
  end

  def _nt_assignment_op
    start_index = index
    if node_cache[:assignment_op].has_key?(index)
      cached = node_cache[:assignment_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('=', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('=')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('+=', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('+=')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?('-=', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('-=')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?('*=', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('*=')
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?('/=', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('/=')
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?('%=', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure('%=')
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?('&=', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
                  @index += 2
                else
                  terminal_parse_failure('&=')
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  if has_terminal?('^=', false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
                    @index += 2
                  else
                    terminal_parse_failure('^=')
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                  else
                    if has_terminal?('|=', false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 2))
                      @index += 2
                    else
                      terminal_parse_failure('|=')
                      r9 = nil
                    end
                    if r9
                      r0 = r9
                    else
                      if has_terminal?('<<=', false, index)
                        r10 = instantiate_node(SyntaxNode,input, index...(index + 3))
                        @index += 3
                      else
                        terminal_parse_failure('<<=')
                        r10 = nil
                      end
                      if r10
                        r0 = r10
                      else
                        if has_terminal?('>>=', false, index)
                          r11 = instantiate_node(SyntaxNode,input, index...(index + 3))
                          @index += 3
                        else
                          terminal_parse_failure('>>=')
                          r11 = nil
                        end
                        if r11
                          r0 = r11
                        else
                          @index = i0
                          r0 = nil
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:assignment_op][start_index] = r0

    r0
  end

  module Assignment0
    def variable
      elements[0]
    end

    def assignment_op
      elements[2]
    end

    def assignment
      elements[4]
    end
  end

  module Assignment1
    def translate(t)
      var = variable.translate(t)
      val = case assignment_op.text_value
      when '='
        assignment.translate(t)
      when '+='
        t.add(var, assignment.translate(t))
      when '-='
        t.subtract(var, assignment.translate(t))
      when '*='
        t.multiply(var, assignment.translate(t))
      when '/='
        t.divide(var, assignment.translate(t))
      when '%='
        t.modulus(var, assignment.translate(t))
      when '&='
        t.bitwise_and(var, assignment.translate(t))
      when '^='
        t.bitwise_xor(var, assignment.translate(t))
      when '|='
        t.bitwise_or(var, assignment.translate(t))
      when '<<='
        t.bitshift_left(var, assignment.translate(t))
      when '>>='
        t.bitshift_right(var, assignment.translate(t))
      end
      t.assign(var, val)
    end
  end

  def _nt_assignment
    start_index = index
    if node_cache[:assignment].has_key?(index)
      cached = node_cache[:assignment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_variable
    s1 << r2
    if r2
      r4 = _nt_gap
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_assignment_op
        s1 << r5
        if r5
          r7 = _nt_gap
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_assignment
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Assignment0)
      r1.extend(Assignment1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r9 = _nt_equality
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:assignment][start_index] = r0

    r0
  end

  def _nt_equality_op
    start_index = index
    if node_cache[:equality_op].has_key?(index)
      cached = node_cache[:equality_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('==', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('==')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('!=', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('!=')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:equality_op][start_index] = r0

    r0
  end

  module Equality0
    def bitwise_and
      elements[0]
    end

    def equality_op
      elements[2]
    end

    def equality
      elements[4]
    end
  end

  module Equality1
    def translate(t, x=nil)
      x ||= bitwise_and.translate(t)
      
      method = case equality_op.text_value
      when '=='
        :equal
      when '!='
        :not_equal
      end
      
      if equality.respond_to? :equality_op
        x = t.send method, x, equality.bitwise_and.translate(t)
        equality.translate t, x
      else
        t.send method, x, equality.translate(t)
      end
    end
  end

  def _nt_equality
    start_index = index
    if node_cache[:equality].has_key?(index)
      cached = node_cache[:equality][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_bitwise_and
    s1 << r2
    if r2
      r4 = _nt_gap
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_equality_op
        s1 << r5
        if r5
          r7 = _nt_gap
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_equality
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Equality0)
      r1.extend(Equality1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r9 = _nt_bitwise_and
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:equality][start_index] = r0

    r0
  end

  def _nt_bitwise_and_op
    start_index = index
    if node_cache[:bitwise_and_op].has_key?(index)
      cached = node_cache[:bitwise_and_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('&', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('&')
      r0 = nil
    end

    node_cache[:bitwise_and_op][start_index] = r0

    r0
  end

  module BitwiseAnd0
    def bitwise_xor
      elements[0]
    end

    def bitwise_and_op
      elements[2]
    end

    def bitwise_and
      elements[4]
    end
  end

  module BitwiseAnd1
    def translate(t, x=nil)
      x ||= bitwise_xor.translate(t)
      
      if bitwise_and.respond_to? :bitwise_and_op
        x = t.bitwise_and(x, bitwise_and.bitwise_xor.translate(t))
        bitwise_and.translate t, x
      else
        t.bitwise_and(x, bitwise_and.translate(t))
      end
    end
  end

  def _nt_bitwise_and
    start_index = index
    if node_cache[:bitwise_and].has_key?(index)
      cached = node_cache[:bitwise_and][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_bitwise_xor
    s1 << r2
    if r2
      r4 = _nt_gap
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_bitwise_and_op
        s1 << r5
        if r5
          r7 = _nt_gap
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_bitwise_and
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(BitwiseAnd0)
      r1.extend(BitwiseAnd1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r9 = _nt_bitwise_xor
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:bitwise_and][start_index] = r0

    r0
  end

  def _nt_bitwise_xor_op
    start_index = index
    if node_cache[:bitwise_xor_op].has_key?(index)
      cached = node_cache[:bitwise_xor_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('^', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('^')
      r0 = nil
    end

    node_cache[:bitwise_xor_op][start_index] = r0

    r0
  end

  module BitwiseXor0
    def bitwise_or
      elements[0]
    end

    def bitwise_xor_op
      elements[2]
    end

    def bitwise_xor
      elements[4]
    end
  end

  module BitwiseXor1
    def translate(t, x=nil)
      x ||= bitwise_or.translate(t)
      
      if bitwise_xor.respond_to? :bitwise_xor_op
        x = t.bitwise_xor(x, bitwise_xor.bitwise_or.translate(t))
        bitwise_xor.translate t, x
      else
        t.bitwise_xor(x, bitwise_xor.translate(t))
      end
    end
  end

  def _nt_bitwise_xor
    start_index = index
    if node_cache[:bitwise_xor].has_key?(index)
      cached = node_cache[:bitwise_xor][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_bitwise_or
    s1 << r2
    if r2
      r4 = _nt_gap
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_bitwise_xor_op
        s1 << r5
        if r5
          r7 = _nt_gap
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_bitwise_xor
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(BitwiseXor0)
      r1.extend(BitwiseXor1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r9 = _nt_bitwise_or
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:bitwise_xor][start_index] = r0

    r0
  end

  def _nt_bitwise_or_op
    start_index = index
    if node_cache[:bitwise_or_op].has_key?(index)
      cached = node_cache[:bitwise_or_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('|', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('|')
      r0 = nil
    end

    node_cache[:bitwise_or_op][start_index] = r0

    r0
  end

  module BitwiseOr0
    def comparison
      elements[0]
    end

    def bitwise_or_op
      elements[2]
    end

    def bitwise_or
      elements[4]
    end
  end

  module BitwiseOr1
    def translate(t, x=nil)
      x ||= comparison.translate(t)
      
      if bitwise_or.respond_to? :bitwise_or_op
        x = t.bitwise_or(x, bitwise_or.comparison.translate(t))
        bitwise_or.translate t, x
      else
        t.bitwise_or(x, bitwise_or.translate(t))
      end
    end
  end

  def _nt_bitwise_or
    start_index = index
    if node_cache[:bitwise_or].has_key?(index)
      cached = node_cache[:bitwise_or][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_comparison
    s1 << r2
    if r2
      r4 = _nt_gap
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_bitwise_or_op
        s1 << r5
        if r5
          r7 = _nt_gap
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_bitwise_or
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(BitwiseOr0)
      r1.extend(BitwiseOr1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r9 = _nt_comparison
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:bitwise_or][start_index] = r0

    r0
  end

  def _nt_comparison_op
    start_index = index
    if node_cache[:comparison_op].has_key?(index)
      cached = node_cache[:comparison_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('>=', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('>=')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('>', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('>')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?('<=', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('<=')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?('<', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('<')
            r4 = nil
          end
          if r4
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:comparison_op][start_index] = r0

    r0
  end

  module Comparison0
    def bitshift
      elements[0]
    end

    def comparison_op
      elements[2]
    end

    def comparison
      elements[4]
    end
  end

  module Comparison1
    def translate(t, x=nil)
      x ||= bitshift.translate(t)
      
      method = case comparison_op.text_value
      when '>'
        :greater
      when '>='
        :greater_or_equal
      when '<'
        :less
      when '<='
        :less_or_equal
      end
      
      if comparison.respond_to? :comparison_op
        x = t.send method, x, comparison.bitshift.translate(t)
        comparison.translate t, x
      else
        t.send method, x, comparison.translate(t)
      end
    end
  end

  def _nt_comparison
    start_index = index
    if node_cache[:comparison].has_key?(index)
      cached = node_cache[:comparison][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_bitshift
    s1 << r2
    if r2
      r4 = _nt_gap
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_comparison_op
        s1 << r5
        if r5
          r7 = _nt_gap
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_comparison
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Comparison0)
      r1.extend(Comparison1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r9 = _nt_bitshift
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:comparison][start_index] = r0

    r0
  end

  def _nt_bitshift_op
    start_index = index
    if node_cache[:bitshift_op].has_key?(index)
      cached = node_cache[:bitshift_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('<<', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('<<')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('>>', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('>>')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:bitshift_op][start_index] = r0

    r0
  end

  module Bitshift0
    def sum
      elements[0]
    end

    def bitshift_op
      elements[2]
    end

    def bitshift
      elements[4]
    end
  end

  module Bitshift1
    def translate(t, x = nil)
      x ||= sum.translate(t)
      
      method = case bitshift_op.text_value
      when '<<'
        :bitshift_left
      when '>>'
        :bitshift_right
      end
      
      if bitshift.respond_to? :bitshift_op
        x = t.send method, x, bitshift.sum.translate(t)
        bitshift.translate t, x
      else
        t.send method, x, bitshift.translate(t)
      end
    end
  end

  def _nt_bitshift
    start_index = index
    if node_cache[:bitshift].has_key?(index)
      cached = node_cache[:bitshift][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_sum
    s1 << r2
    if r2
      r4 = _nt_gap
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_bitshift_op
        s1 << r5
        if r5
          r7 = _nt_gap
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_bitshift
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Bitshift0)
      r1.extend(Bitshift1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r9 = _nt_sum
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:bitshift][start_index] = r0

    r0
  end

  def _nt_sum_op
    start_index = index
    if node_cache[:sum_op].has_key?(index)
      cached = node_cache[:sum_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('+', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('+')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('-', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('-')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:sum_op][start_index] = r0

    r0
  end

  module Sum0
    def product
      elements[0]
    end

    def sum_op
      elements[2]
    end

    def sum
      elements[4]
    end
  end

  module Sum1
    def translate(t, x = nil)
      x ||= product.translate(t)
      
      method = case sum_op.text_value
      when '+'
        :add
      when '-'
        :subtract
      end
      
      if sum.respond_to? :sum_op
        x = t.send method, x, sum.product.translate(t)
        sum.translate t, x
      else
        t.send method, x, sum.translate(t)
      end
    end
  end

  def _nt_sum
    start_index = index
    if node_cache[:sum].has_key?(index)
      cached = node_cache[:sum][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_product
    s1 << r2
    if r2
      r4 = _nt_gap
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_sum_op
        s1 << r5
        if r5
          r7 = _nt_gap
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_sum
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Sum0)
      r1.extend(Sum1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r9 = _nt_product
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:sum][start_index] = r0

    r0
  end

  def _nt_product_op
    start_index = index
    if node_cache[:product_op].has_key?(index)
      cached = node_cache[:product_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('*', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('*')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('/', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('/')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?('%', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('%')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:product_op][start_index] = r0

    r0
  end

  module Product0
    def unary
      elements[0]
    end

    def product_op
      elements[2]
    end

    def product
      elements[4]
    end
  end

  module Product1
    def translate(t, x = nil)
      x ||= unary.translate(t)
      
      method = case product_op.text_value
      when '*'
        :multiply
      when '/'
        :divide
      when '%'
        :modulus
      end
      
      if product.respond_to? :product_op
        x = t.send method, x, product.unary.translate(t)
        product.translate t, x
      else
        t.send method, x, product.translate(t)
      end
    end
  end

  def _nt_product
    start_index = index
    if node_cache[:product].has_key?(index)
      cached = node_cache[:product][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_unary
    s1 << r2
    if r2
      r4 = _nt_gap
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_product_op
        s1 << r5
        if r5
          r7 = _nt_gap
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_product
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Product0)
      r1.extend(Product1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r9 = _nt_unary
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:product][start_index] = r0

    r0
  end

  def _nt_unary_op
    start_index = index
    if node_cache[:unary_op].has_key?(index)
      cached = node_cache[:unary_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('~', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('~')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('-', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('-')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?('@', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('@')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:unary_op][start_index] = r0

    r0
  end

  module Unary0
    def unary_op
      elements[0]
    end

    def unary
      elements[2]
    end
  end

  module Unary1
    def translate(t)
      method = case unary_op.text_value
      when '~'
        :bitwise_not
      when '-'
        :negate
      when '@'
        :address_of
      end
      
      t.send method, unary.translate(t)
    end
  end

  def _nt_unary
    start_index = index
    if node_cache[:unary].has_key?(index)
      cached = node_cache[:unary][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_unary_op
    s1 << r2
    if r2
      r4 = _nt_gap
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_unary
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Unary0)
      r1.extend(Unary1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r6 = _nt_primary
      if r6
        r0 = r6
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:unary][start_index] = r0

    r0
  end

  module Primary0
    def expression
      elements[2]
    end

  end

  module Primary1
    def translate(t)
      expression.translate(t)
    end
  end

  module Primary2
    def unary
      elements[1]
    end

    def type
      elements[3]
    end
  end

  module Primary3
    def translate(t)
      t.dereference(unary.translate(t), type.translate(t))
    end
  end

  module Primary4
    def unary
      elements[1]
    end
  end

  module Primary5
    def translate(t)
      t.dereference(unary.translate(t))
    end
  end

  def _nt_primary
    start_index = index
    if node_cache[:primary].has_key?(index)
      cached = node_cache[:primary][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_function_call
    if r1
      r0 = r1
    else
      i2, s2 = index, []
      if has_terminal?('(', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('(')
        r3 = nil
      end
      s2 << r3
      if r3
        r5 = _nt_gap
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s2 << r4
        if r4
          r6 = _nt_expression
          s2 << r6
          if r6
            r8 = _nt_gap
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s2 << r7
            if r7
              if has_terminal?(')', false, index)
                r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(')')
                r9 = nil
              end
              s2 << r9
            end
          end
        end
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(Primary0)
        r2.extend(Primary1)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r0 = r2
      else
        r10 = _nt_constant
        if r10
          r0 = r10
        else
          r11 = _nt_variable
          if r11
            r0 = r11
          else
            i12, s12 = index, []
            if has_terminal?('*', false, index)
              r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('*')
              r13 = nil
            end
            s12 << r13
            if r13
              r14 = _nt_unary
              s12 << r14
              if r14
                if has_terminal?(':', false, index)
                  r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(':')
                  r15 = nil
                end
                s12 << r15
                if r15
                  r16 = _nt_type
                  s12 << r16
                end
              end
            end
            if s12.last
              r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
              r12.extend(Primary2)
              r12.extend(Primary3)
            else
              @index = i12
              r12 = nil
            end
            if r12
              r0 = r12
            else
              i17, s17 = index, []
              if has_terminal?('*', false, index)
                r18 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('*')
                r18 = nil
              end
              s17 << r18
              if r18
                r19 = _nt_unary
                s17 << r19
              end
              if s17.last
                r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
                r17.extend(Primary4)
                r17.extend(Primary5)
              else
                @index = i17
                r17 = nil
              end
              if r17
                r0 = r17
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end
    end

    node_cache[:primary][start_index] = r0

    r0
  end

  module FunctionName0
  end

  module FunctionName1
    def translate(t)
      text_value
    end
  end

  def _nt_function_name
    start_index = index
    if node_cache[:function_name].has_key?(index)
      cached = node_cache[:function_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-zA-Z_]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[0-9a-zA-Z_]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FunctionName0)
      r0.extend(FunctionName1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:function_name][start_index] = r0

    r0
  end

  module Variable0
  end

  module Variable1
    def translate(t)
      t.variable(text_value)
    end
  end

  def _nt_variable
    start_index = index
    if node_cache[:variable].has_key?(index)
      cached = node_cache[:variable][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-zA-Z_]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[0-9a-zA-Z_]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Variable0)
      r0.extend(Variable1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:variable][start_index] = r0

    r0
  end

  def _nt_constant
    start_index = index
    if node_cache[:constant].has_key?(index)
      cached = node_cache[:constant][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_null_constant
    if r1
      r0 = r1
    else
      r2 = _nt_boolean_constant
      if r2
        r0 = r2
      else
        r3 = _nt_integer_constant
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:constant][start_index] = r0

    r0
  end

  module NullConstant0
    def translate(t)
      t.null
    end
  end

  def _nt_null_constant
    start_index = index
    if node_cache[:null_constant].has_key?(index)
      cached = node_cache[:null_constant][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('null', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 4))
      r0.extend(NullConstant0)
      @index += 4
    else
      terminal_parse_failure('null')
      r0 = nil
    end

    node_cache[:null_constant][start_index] = r0

    r0
  end

  module BooleanConstant0
    def translate(t)
      t.true
    end
  end

  module BooleanConstant1
    def translate(t)
      t.false
    end
  end

  def _nt_boolean_constant
    start_index = index
    if node_cache[:boolean_constant].has_key?(index)
      cached = node_cache[:boolean_constant][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('true', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      r1.extend(BooleanConstant0)
      @index += 4
    else
      terminal_parse_failure('true')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('false', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
        r2.extend(BooleanConstant1)
        @index += 5
      else
        terminal_parse_failure('false')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:boolean_constant][start_index] = r0

    r0
  end

  module IntegerConstant0
    def translate(t)
      t.integer_constant(0)
    end
  end

  module IntegerConstant1
  end

  module IntegerConstant2
    def translate(t)
      t.integer_constant(text_value.to_i)
    end
  end

  def _nt_integer_constant
    start_index = index
    if node_cache[:integer_constant].has_key?(index)
      cached = node_cache[:integer_constant][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('0', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      r1.extend(IntegerConstant0)
      @index += 1
    else
      terminal_parse_failure('0')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i2, s2 = index, []
      if has_terminal?('\G[1-9]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      s2 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s2 << r4
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(IntegerConstant1)
        r2.extend(IntegerConstant2)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:integer_constant][start_index] = r0

    r0
  end

  module Type0
    def type_name
      elements[1]
    end
  end

  module Type1
    def translate(t)
      pointer_depth = text_value[0...-type_name.text_value.size].size
      array = []
      pointer_depth.times { array << 'pointer' }
      array << type_name.text_value
      t.type *array
    end
  end

  def _nt_type
    start_index = index
    if node_cache[:type].has_key?(index)
      cached = node_cache[:type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      if has_terminal?('@', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('@')
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      r3 = _nt_type_name
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Type0)
      r0.extend(Type1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:type][start_index] = r0

    r0
  end

  def _nt_type_name
    start_index = index
    if node_cache[:type_name].has_key?(index)
      cached = node_cache[:type_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('uint64', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('uint64')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('int64', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure('int64')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?('uint32', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 6))
          @index += 6
        else
          terminal_parse_failure('uint32')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?('int32', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 5))
            @index += 5
          else
            terminal_parse_failure('int32')
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?('uint16', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 6))
              @index += 6
            else
              terminal_parse_failure('uint16')
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?('int16', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 5))
                @index += 5
              else
                terminal_parse_failure('int16')
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?('uint8', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 5))
                  @index += 5
                else
                  terminal_parse_failure('uint8')
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  if has_terminal?('int8', false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 4))
                    @index += 4
                  else
                    terminal_parse_failure('int8')
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                  else
                    @index = i0
                    r0 = nil
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:type_name][start_index] = r0

    r0
  end

  def _nt_gap
    start_index = index
    if node_cache[:gap].has_key?(index)
      cached = node_cache[:gap][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[ \\t]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:gap][start_index] = r0

    r0
  end

  def _nt_ws
    start_index = index
    if node_cache[:ws].has_key?(index)
      cached = node_cache[:ws][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[\\s]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:ws][start_index] = r0

    r0
  end

end

class CoalTreetopParser < Treetop::Runtime::CompiledParser
  include CoalTreetop
end



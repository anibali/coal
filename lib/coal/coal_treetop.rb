# Autogenerated from a Treetop grammar. Edits may be lost.


module CoalTreetop
  include Treetop::Runtime

  def root
    @root ||= :root
  end

  module Root0
    def statements
      elements[1]
    end

  end

  module Root1
    def tree
      statements.tree
    end
  end

  def _nt_root
    start_index = index
    if node_cache[:root].has_key?(index)
      cached = node_cache[:root][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_ws
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r3 = _nt_statements
      s0 << r3
      if r3
        r5 = _nt_ws
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Root0)
      r0.extend(Root1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:root][start_index] = r0

    r0
  end

  module Statements0
    def comment
      elements[1]
    end
  end

  module Statements1
    def statement
      elements[0]
    end

    def statements
      elements[2]
    end
  end

  module Statements2
    def tree
      [statement.tree].compact.concat(statements.tree)
    end
  end

  module Statements3
    def ws
      elements[0]
    end

    def comment
      elements[1]
    end
  end

  module Statements4
    def statement
      elements[0]
    end

  end

  module Statements5
    def tree
      [statement.tree].compact
    end
  end

  def _nt_statements
    start_index = index
    if node_cache[:statements].has_key?(index)
      cached = node_cache[:statements][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_statement
    s1 << r2
    if r2
      i3 = index
      s4, i4 = [], index
      loop do
        i5, s5 = index, []
        r7 = _nt_ws
        if r7
          r6 = r7
        else
          r6 = instantiate_node(SyntaxNode,input, index...index)
        end
        s5 << r6
        if r6
          r8 = _nt_comment
          s5 << r8
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(Statements0)
        else
          @index = i5
          r5 = nil
        end
        if r5
          s4 << r5
        else
          break
        end
      end
      if s4.empty?
        @index = i4
        r4 = nil
      else
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      end
      if r4
        r3 = r4
      else
        r9 = _nt_statement_separator
        if r9
          r3 = r9
        else
          @index = i3
          r3 = nil
        end
      end
      s1 << r3
      if r3
        r10 = _nt_statements
        s1 << r10
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Statements1)
      r1.extend(Statements2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i11, s11 = index, []
      r12 = _nt_statement
      s11 << r12
      if r12
        s13, i13 = [], index
        loop do
          i14, s14 = index, []
          r15 = _nt_ws
          s14 << r15
          if r15
            r16 = _nt_comment
            s14 << r16
          end
          if s14.last
            r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
            r14.extend(Statements3)
          else
            @index = i14
            r14 = nil
          end
          if r14
            s13 << r14
          else
            break
          end
        end
        r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
        s11 << r13
      end
      if s11.last
        r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
        r11.extend(Statements4)
        r11.extend(Statements5)
      else
        @index = i11
        r11 = nil
      end
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:statements][start_index] = r0

    r0
  end

  module StatementSeparator0
  end

  module StatementSeparator1
  end

  def _nt_statement_separator
    start_index = index
    if node_cache[:statement_separator].has_key?(index)
      cached = node_cache[:statement_separator][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    s2, i2 = [], index
    loop do
      if has_terminal?('\G[ \\t\\r]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        s2 << r3
      else
        break
      end
    end
    r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
    s1 << r2
    if r2
      if has_terminal?("\n", false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("\n")
        r4 = nil
      end
      s1 << r4
      if r4
        r6 = _nt_ws
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(StatementSeparator0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      r9 = _nt_ws
      if r9
        r8 = r9
      else
        r8 = instantiate_node(SyntaxNode,input, index...index)
      end
      s7 << r8
      if r8
        if has_terminal?(";", false, index)
          r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(";")
          r10 = nil
        end
        s7 << r10
        if r10
          r12 = _nt_ws
          if r12
            r11 = r12
          else
            r11 = instantiate_node(SyntaxNode,input, index...index)
          end
          s7 << r11
        end
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(StatementSeparator1)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:statement_separator][start_index] = r0

    r0
  end

  module Statement0
    def tree
      nil
    end
  end

  def _nt_statement
    start_index = index
    if node_cache[:statement].has_key?(index)
      cached = node_cache[:statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_return
    if r1
      r0 = r1
    else
      r2 = _nt_break
      if r2
        r0 = r2
      else
        r3 = _nt_if_unless
        if r3
          r0 = r3
        else
          r4 = _nt_while_until
          if r4
            r0 = r4
          else
            r5 = _nt_declaration
            if r5
              r0 = r5
            else
              r6 = _nt_expression
              if r6
                r0 = r6
              else
                if has_terminal?('', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 0))
                  r7.extend(Statement0)
                  @index += 0
                else
                  terminal_parse_failure('')
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  @index = i0
                  r0 = nil
                end
              end
            end
          end
        end
      end
    end

    node_cache[:statement][start_index] = r0

    r0
  end

  module IfUnless0
    def type
      elements[0]
    end

    def expression
      elements[4]
    end

    def then_block
      elements[8]
    end

    def else_block
      elements[12]
    end
  end

  module IfUnless1
    def tree
      [type.text_value.to_sym, expression.tree, then_block.tree, else_block.tree]
    end
  end

  module IfUnless2
    def type
      elements[0]
    end

    def expression
      elements[4]
    end

    def block
      elements[8]
    end
  end

  module IfUnless3
    def tree
      [type.text_value.to_sym, expression.tree, block.tree]
    end
  end

  def _nt_if_unless
    start_index = index
    if node_cache[:if_unless].has_key?(index)
      cached = node_cache[:if_unless][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    i2 = index
    if has_terminal?('if', false, index)
      r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('if')
      r3 = nil
    end
    if r3
      r2 = r3
    else
      if has_terminal?('unless', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure('unless')
        r4 = nil
      end
      if r4
        r2 = r4
      else
        @index = i2
        r2 = nil
      end
    end
    s1 << r2
    if r2
      r6 = _nt_gap
      if r6
        r5 = r6
      else
        r5 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r5
      if r5
        if has_terminal?('(', false, index)
          r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r7 = nil
        end
        s1 << r7
        if r7
          r9 = _nt_gap
          if r9
            r8 = r9
          else
            r8 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r8
          if r8
            r10 = _nt_expression
            s1 << r10
            if r10
              r12 = _nt_gap
              if r12
                r11 = r12
              else
                r11 = instantiate_node(SyntaxNode,input, index...index)
              end
              s1 << r11
              if r11
                if has_terminal?(')', false, index)
                  r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(')')
                  r13 = nil
                end
                s1 << r13
                if r13
                  r15 = _nt_ws
                  if r15
                    r14 = r15
                  else
                    r14 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s1 << r14
                  if r14
                    r16 = _nt_block
                    s1 << r16
                    if r16
                      r18 = _nt_ws
                      if r18
                        r17 = r18
                      else
                        r17 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s1 << r17
                      if r17
                        if has_terminal?('else', false, index)
                          r19 = instantiate_node(SyntaxNode,input, index...(index + 4))
                          @index += 4
                        else
                          terminal_parse_failure('else')
                          r19 = nil
                        end
                        s1 << r19
                        if r19
                          r21 = _nt_ws
                          if r21
                            r20 = r21
                          else
                            r20 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s1 << r20
                          if r20
                            r22 = _nt_block
                            s1 << r22
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(IfUnless0)
      r1.extend(IfUnless1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i23, s23 = index, []
      i24 = index
      if has_terminal?('if', false, index)
        r25 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('if')
        r25 = nil
      end
      if r25
        r24 = r25
      else
        if has_terminal?('unless', false, index)
          r26 = instantiate_node(SyntaxNode,input, index...(index + 6))
          @index += 6
        else
          terminal_parse_failure('unless')
          r26 = nil
        end
        if r26
          r24 = r26
        else
          @index = i24
          r24 = nil
        end
      end
      s23 << r24
      if r24
        r28 = _nt_gap
        if r28
          r27 = r28
        else
          r27 = instantiate_node(SyntaxNode,input, index...index)
        end
        s23 << r27
        if r27
          if has_terminal?('(', false, index)
            r29 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('(')
            r29 = nil
          end
          s23 << r29
          if r29
            r31 = _nt_gap
            if r31
              r30 = r31
            else
              r30 = instantiate_node(SyntaxNode,input, index...index)
            end
            s23 << r30
            if r30
              r32 = _nt_expression
              s23 << r32
              if r32
                r34 = _nt_gap
                if r34
                  r33 = r34
                else
                  r33 = instantiate_node(SyntaxNode,input, index...index)
                end
                s23 << r33
                if r33
                  if has_terminal?(')', false, index)
                    r35 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(')')
                    r35 = nil
                  end
                  s23 << r35
                  if r35
                    r37 = _nt_ws
                    if r37
                      r36 = r37
                    else
                      r36 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s23 << r36
                    if r36
                      r38 = _nt_block
                      s23 << r38
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s23.last
        r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
        r23.extend(IfUnless2)
        r23.extend(IfUnless3)
      else
        @index = i23
        r23 = nil
      end
      if r23
        r0 = r23
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:if_unless][start_index] = r0

    r0
  end

  module WhileUntil0
    def type
      elements[0]
    end

    def expression
      elements[4]
    end

    def block
      elements[8]
    end
  end

  module WhileUntil1
    def tree
      [type.text_value.to_sym, expression.tree, block.tree]
    end
  end

  def _nt_while_until
    start_index = index
    if node_cache[:while_until].has_key?(index)
      cached = node_cache[:while_until][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('while', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('while')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('until', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure('until')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r5 = _nt_gap
      if r5
        r4 = r5
      else
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r4
      if r4
        if has_terminal?('(', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r6 = nil
        end
        s0 << r6
        if r6
          r8 = _nt_gap
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r7
          if r7
            r9 = _nt_expression
            s0 << r9
            if r9
              r11 = _nt_gap
              if r11
                r10 = r11
              else
                r10 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r10
              if r10
                if has_terminal?(')', false, index)
                  r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(')')
                  r12 = nil
                end
                s0 << r12
                if r12
                  r14 = _nt_ws
                  if r14
                    r13 = r14
                  else
                    r13 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r13
                  if r13
                    r15 = _nt_block
                    s0 << r15
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(WhileUntil0)
      r0.extend(WhileUntil1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:while_until][start_index] = r0

    r0
  end

  module Block0
    def statements
      elements[2]
    end

  end

  module Block1
    def tree
      statements.tree
    end
  end

  module Block2
    def tree
      [super].compact
    end
  end

  def _nt_block
    start_index = index
    if node_cache[:block].has_key?(index)
      cached = node_cache[:block][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('{', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('{')
      r2 = nil
    end
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_statements
        s1 << r5
        if r5
          r7 = _nt_ws
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            if has_terminal?('}', false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('}')
              r8 = nil
            end
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Block0)
      r1.extend(Block1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r9 = _nt_statement
      r9.extend(Block2)
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:block][start_index] = r0

    r0
  end

  def _nt_expression
    start_index = index
    if node_cache[:expression].has_key?(index)
      cached = node_cache[:expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_assignment

    node_cache[:expression][start_index] = r0

    r0
  end

  module Declaration0
    def type
      elements[0]
    end

    def gap
      elements[1]
    end

    def identifier
      elements[2]
    end

    def expression
      elements[6]
    end
  end

  module Declaration1
    def tree
      [:decl, type.tree, identifier.tree, expression.tree]
    end
  end

  module Declaration2
    def type
      elements[0]
    end

    def gap
      elements[1]
    end

    def identifier
      elements[2]
    end
  end

  module Declaration3
    def tree
      [:decl, type.tree, identifier.tree]
    end
  end

  def _nt_declaration
    start_index = index
    if node_cache[:declaration].has_key?(index)
      cached = node_cache[:declaration][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_type
    s1 << r2
    if r2
      r3 = _nt_gap
      s1 << r3
      if r3
        r4 = _nt_identifier
        s1 << r4
        if r4
          r6 = _nt_gap
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r5
          if r5
            if has_terminal?('=', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('=')
              r7 = nil
            end
            s1 << r7
            if r7
              r9 = _nt_gap
              if r9
                r8 = r9
              else
                r8 = instantiate_node(SyntaxNode,input, index...index)
              end
              s1 << r8
              if r8
                r10 = _nt_expression
                s1 << r10
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Declaration0)
      r1.extend(Declaration1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i11, s11 = index, []
      r12 = _nt_type
      s11 << r12
      if r12
        r13 = _nt_gap
        s11 << r13
        if r13
          r14 = _nt_identifier
          s11 << r14
        end
      end
      if s11.last
        r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
        r11.extend(Declaration2)
        r11.extend(Declaration3)
      else
        @index = i11
        r11 = nil
      end
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:declaration][start_index] = r0

    r0
  end

  def _nt_pre_assign_op
    start_index = index
    if node_cache[:pre_assign_op].has_key?(index)
      cached = node_cache[:pre_assign_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('**', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('**')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('+', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('+')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?('-', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('-')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?('*', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('*')
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?('/', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('/')
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?('%', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('%')
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?('&', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('&')
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  if has_terminal?('^', false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('^')
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                  else
                    if has_terminal?('|', false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure('|')
                      r9 = nil
                    end
                    if r9
                      r0 = r9
                    else
                      if has_terminal?('<<', false, index)
                        r10 = instantiate_node(SyntaxNode,input, index...(index + 2))
                        @index += 2
                      else
                        terminal_parse_failure('<<')
                        r10 = nil
                      end
                      if r10
                        r0 = r10
                      else
                        if has_terminal?('>>', false, index)
                          r11 = instantiate_node(SyntaxNode,input, index...(index + 2))
                          @index += 2
                        else
                          terminal_parse_failure('>>')
                          r11 = nil
                        end
                        if r11
                          r0 = r11
                        else
                          @index = i0
                          r0 = nil
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:pre_assign_op][start_index] = r0

    r0
  end

  module Assignment0
    def identifier
      elements[0]
    end

    def assignment
      elements[4]
    end
  end

  module Assignment1
    def tree
      [:sto, identifier.tree, assignment.tree]
    end
  end

  module Assignment2
    def primary
      elements[0]
    end

    def identifier
      elements[4]
    end

    def assignment
      elements[8]
    end
  end

  module Assignment3
    #TODO: enable chains like a.b.c = d
    def tree
      [:set, primary.tree, identifier.tree, assignment.tree]
    end
  end

  module Assignment4
    def identifier
      elements[0]
    end

    def pre_assign_op
      elements[2]
    end

    def assignment
      elements[5]
    end
  end

  module Assignment5
    def tree
      var = identifier.tree
      [:sto, var, [BINARY_SYMS[pre_assign_op.text_value], var, assignment.tree]]
    end
  end

  def _nt_assignment
    start_index = index
    if node_cache[:assignment].has_key?(index)
      cached = node_cache[:assignment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_identifier
    s1 << r2
    if r2
      r4 = _nt_gap
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        if has_terminal?('=', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('=')
          r5 = nil
        end
        s1 << r5
        if r5
          r7 = _nt_gap
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_assignment
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Assignment0)
      r1.extend(Assignment1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i9, s9 = index, []
      r10 = _nt_primary
      s9 << r10
      if r10
        r12 = _nt_gap
        if r12
          r11 = r12
        else
          r11 = instantiate_node(SyntaxNode,input, index...index)
        end
        s9 << r11
        if r11
          if has_terminal?('.', false, index)
            r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('.')
            r13 = nil
          end
          s9 << r13
          if r13
            r15 = _nt_gap
            if r15
              r14 = r15
            else
              r14 = instantiate_node(SyntaxNode,input, index...index)
            end
            s9 << r14
            if r14
              r16 = _nt_identifier
              s9 << r16
              if r16
                r18 = _nt_gap
                if r18
                  r17 = r18
                else
                  r17 = instantiate_node(SyntaxNode,input, index...index)
                end
                s9 << r17
                if r17
                  if has_terminal?('=', false, index)
                    r19 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('=')
                    r19 = nil
                  end
                  s9 << r19
                  if r19
                    r21 = _nt_gap
                    if r21
                      r20 = r21
                    else
                      r20 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s9 << r20
                    if r20
                      r22 = _nt_assignment
                      s9 << r22
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s9.last
        r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
        r9.extend(Assignment2)
        r9.extend(Assignment3)
      else
        @index = i9
        r9 = nil
      end
      if r9
        r0 = r9
      else
        i23, s23 = index, []
        r24 = _nt_identifier
        s23 << r24
        if r24
          r26 = _nt_gap
          if r26
            r25 = r26
          else
            r25 = instantiate_node(SyntaxNode,input, index...index)
          end
          s23 << r25
          if r25
            r27 = _nt_pre_assign_op
            s23 << r27
            if r27
              if has_terminal?('=', false, index)
                r28 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('=')
                r28 = nil
              end
              s23 << r28
              if r28
                r30 = _nt_gap
                if r30
                  r29 = r30
                else
                  r29 = instantiate_node(SyntaxNode,input, index...index)
                end
                s23 << r29
                if r29
                  r31 = _nt_assignment
                  s23 << r31
                end
              end
            end
          end
        end
        if s23.last
          r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
          r23.extend(Assignment4)
          r23.extend(Assignment5)
        else
          @index = i23
          r23 = nil
        end
        if r23
          r0 = r23
        else
          r32 = _nt_xor
          if r32
            r0 = r32
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:assignment][start_index] = r0

    r0
  end

  module Xor0
    def or
      elements[0]
    end

  end

  module Xor1
    def xor
      elements[1]
    end
  end

  def _nt_xor
    start_index = index
    if node_cache[:xor].has_key?(index)
      cached = node_cache[:xor][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    s2, i2 = [], index
    loop do
      i3, s3 = index, []
      r4 = _nt_or
      s3 << r4
      if r4
        r6 = _nt_gap
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r5
        if r5
          if has_terminal?('^^', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('^^')
            r7 = nil
          end
          s3 << r7
          if r7
            r9 = _nt_gap
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r8
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Xor0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        s2 << r3
      else
        break
      end
    end
    if s2.empty?
      @index = i2
      r2 = nil
    else
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
    end
    s1 << r2
    if r2
      r10 = _nt_xor
      s1 << r10
    end
    if s1.last
      r1 = instantiate_node(BinaryOpLTR,input, i1...index, s1)
      r1.extend(Xor1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r11 = _nt_or
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:xor][start_index] = r0

    r0
  end

  module Or0
    def and
      elements[0]
    end

  end

  module Or1
    def or
      elements[1]
    end
  end

  def _nt_or
    start_index = index
    if node_cache[:or].has_key?(index)
      cached = node_cache[:or][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    s2, i2 = [], index
    loop do
      i3, s3 = index, []
      r4 = _nt_and
      s3 << r4
      if r4
        r6 = _nt_gap
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r5
        if r5
          if has_terminal?('||', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('||')
            r7 = nil
          end
          s3 << r7
          if r7
            r9 = _nt_gap
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r8
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Or0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        s2 << r3
      else
        break
      end
    end
    if s2.empty?
      @index = i2
      r2 = nil
    else
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
    end
    s1 << r2
    if r2
      r10 = _nt_or
      s1 << r10
    end
    if s1.last
      r1 = instantiate_node(BinaryOpLTR,input, i1...index, s1)
      r1.extend(Or1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r11 = _nt_and
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:or][start_index] = r0

    r0
  end

  module And0
    def bitwise_or
      elements[0]
    end

  end

  module And1
    def and
      elements[1]
    end
  end

  def _nt_and
    start_index = index
    if node_cache[:and].has_key?(index)
      cached = node_cache[:and][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    s2, i2 = [], index
    loop do
      i3, s3 = index, []
      r4 = _nt_bitwise_or
      s3 << r4
      if r4
        r6 = _nt_gap
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r5
        if r5
          if has_terminal?('&&', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('&&')
            r7 = nil
          end
          s3 << r7
          if r7
            r9 = _nt_gap
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r8
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(And0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        s2 << r3
      else
        break
      end
    end
    if s2.empty?
      @index = i2
      r2 = nil
    else
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
    end
    s1 << r2
    if r2
      r10 = _nt_and
      s1 << r10
    end
    if s1.last
      r1 = instantiate_node(BinaryOpLTR,input, i1...index, s1)
      r1.extend(And1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r11 = _nt_bitwise_or
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:and][start_index] = r0

    r0
  end

  module BitwiseOr0
    def bitwise_xor
      elements[0]
    end

  end

  module BitwiseOr1
    def bitwise_or
      elements[1]
    end
  end

  def _nt_bitwise_or
    start_index = index
    if node_cache[:bitwise_or].has_key?(index)
      cached = node_cache[:bitwise_or][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    s2, i2 = [], index
    loop do
      i3, s3 = index, []
      r4 = _nt_bitwise_xor
      s3 << r4
      if r4
        r6 = _nt_gap
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r5
        if r5
          if has_terminal?('|', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('|')
            r7 = nil
          end
          s3 << r7
          if r7
            r9 = _nt_gap
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r8
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(BitwiseOr0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        s2 << r3
      else
        break
      end
    end
    if s2.empty?
      @index = i2
      r2 = nil
    else
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
    end
    s1 << r2
    if r2
      r10 = _nt_bitwise_or
      s1 << r10
    end
    if s1.last
      r1 = instantiate_node(BinaryOpLTR,input, i1...index, s1)
      r1.extend(BitwiseOr1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r11 = _nt_bitwise_xor
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:bitwise_or][start_index] = r0

    r0
  end

  module BitwiseXor0
    def bitwise_and
      elements[0]
    end

  end

  module BitwiseXor1
    def bitwise_xor
      elements[1]
    end
  end

  def _nt_bitwise_xor
    start_index = index
    if node_cache[:bitwise_xor].has_key?(index)
      cached = node_cache[:bitwise_xor][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    s2, i2 = [], index
    loop do
      i3, s3 = index, []
      r4 = _nt_bitwise_and
      s3 << r4
      if r4
        r6 = _nt_gap
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r5
        if r5
          if has_terminal?('^', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('^')
            r7 = nil
          end
          s3 << r7
          if r7
            r9 = _nt_gap
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r8
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(BitwiseXor0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        s2 << r3
      else
        break
      end
    end
    if s2.empty?
      @index = i2
      r2 = nil
    else
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
    end
    s1 << r2
    if r2
      r10 = _nt_bitwise_xor
      s1 << r10
    end
    if s1.last
      r1 = instantiate_node(BinaryOpLTR,input, i1...index, s1)
      r1.extend(BitwiseXor1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r11 = _nt_bitwise_and
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:bitwise_xor][start_index] = r0

    r0
  end

  module BitwiseAnd0
    def equality
      elements[0]
    end

  end

  module BitwiseAnd1
    def bitwise_and
      elements[1]
    end
  end

  def _nt_bitwise_and
    start_index = index
    if node_cache[:bitwise_and].has_key?(index)
      cached = node_cache[:bitwise_and][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    s2, i2 = [], index
    loop do
      i3, s3 = index, []
      r4 = _nt_equality
      s3 << r4
      if r4
        r6 = _nt_gap
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r5
        if r5
          if has_terminal?('&', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('&')
            r7 = nil
          end
          s3 << r7
          if r7
            r9 = _nt_gap
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r8
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(BitwiseAnd0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        s2 << r3
      else
        break
      end
    end
    if s2.empty?
      @index = i2
      r2 = nil
    else
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
    end
    s1 << r2
    if r2
      r10 = _nt_bitwise_and
      s1 << r10
    end
    if s1.last
      r1 = instantiate_node(BinaryOpLTR,input, i1...index, s1)
      r1.extend(BitwiseAnd1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r11 = _nt_equality
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:bitwise_and][start_index] = r0

    r0
  end

  module Equality0
    def comparison
      elements[0]
    end

    def equality
      elements[4]
    end
  end

  def _nt_equality
    start_index = index
    if node_cache[:equality].has_key?(index)
      cached = node_cache[:equality][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_comparison
    s1 << r2
    if r2
      r4 = _nt_gap
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        i5 = index
        if has_terminal?('==', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('==')
          r6 = nil
        end
        if r6
          r5 = r6
        else
          if has_terminal?('!=', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('!=')
            r7 = nil
          end
          if r7
            r5 = r7
          else
            @index = i5
            r5 = nil
          end
        end
        s1 << r5
        if r5
          r9 = _nt_gap
          if r9
            r8 = r9
          else
            r8 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r8
          if r8
            r10 = _nt_equality
            s1 << r10
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(BinaryOpRTL,input, i1...index, s1)
      r1.extend(Equality0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r11 = _nt_comparison
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:equality][start_index] = r0

    r0
  end

  module Comparison0
    def shift
      elements[0]
    end

    def comparison
      elements[4]
    end
  end

  def _nt_comparison
    start_index = index
    if node_cache[:comparison].has_key?(index)
      cached = node_cache[:comparison][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_shift
    s1 << r2
    if r2
      r4 = _nt_gap
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        i5 = index
        if has_terminal?('<=', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('<=')
          r6 = nil
        end
        if r6
          r5 = r6
        else
          if has_terminal?('<', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('<')
            r7 = nil
          end
          if r7
            r5 = r7
          else
            if has_terminal?('>=', false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('>=')
              r8 = nil
            end
            if r8
              r5 = r8
            else
              if has_terminal?('>', false, index)
                r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('>')
                r9 = nil
              end
              if r9
                r5 = r9
              else
                @index = i5
                r5 = nil
              end
            end
          end
        end
        s1 << r5
        if r5
          r11 = _nt_gap
          if r11
            r10 = r11
          else
            r10 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r10
          if r10
            r12 = _nt_comparison
            s1 << r12
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(BinaryOpRTL,input, i1...index, s1)
      r1.extend(Comparison0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r13 = _nt_shift
      if r13
        r0 = r13
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:comparison][start_index] = r0

    r0
  end

  module Shift0
    def sum
      elements[0]
    end

  end

  module Shift1
    def shift
      elements[1]
    end
  end

  def _nt_shift
    start_index = index
    if node_cache[:shift].has_key?(index)
      cached = node_cache[:shift][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    s2, i2 = [], index
    loop do
      i3, s3 = index, []
      r4 = _nt_sum
      s3 << r4
      if r4
        r6 = _nt_gap
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r5
        if r5
          i7 = index
          if has_terminal?('<<', false, index)
            r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('<<')
            r8 = nil
          end
          if r8
            r7 = r8
          else
            if has_terminal?('>>', false, index)
              r9 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('>>')
              r9 = nil
            end
            if r9
              r7 = r9
            else
              @index = i7
              r7 = nil
            end
          end
          s3 << r7
          if r7
            r11 = _nt_gap
            if r11
              r10 = r11
            else
              r10 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r10
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Shift0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        s2 << r3
      else
        break
      end
    end
    if s2.empty?
      @index = i2
      r2 = nil
    else
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
    end
    s1 << r2
    if r2
      r12 = _nt_shift
      s1 << r12
    end
    if s1.last
      r1 = instantiate_node(BinaryOpLTR,input, i1...index, s1)
      r1.extend(Shift1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r13 = _nt_sum
      if r13
        r0 = r13
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:shift][start_index] = r0

    r0
  end

  module Sum0
    def term
      elements[0]
    end

  end

  module Sum1
    def sum
      elements[1]
    end
  end

  def _nt_sum
    start_index = index
    if node_cache[:sum].has_key?(index)
      cached = node_cache[:sum][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    s2, i2 = [], index
    loop do
      i3, s3 = index, []
      r4 = _nt_term
      s3 << r4
      if r4
        r6 = _nt_gap
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r5
        if r5
          if has_terminal?('\G[+-]', true, index)
            r7 = true
            @index += 1
          else
            r7 = nil
          end
          s3 << r7
          if r7
            r9 = _nt_gap
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r8
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Sum0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        s2 << r3
      else
        break
      end
    end
    if s2.empty?
      @index = i2
      r2 = nil
    else
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
    end
    s1 << r2
    if r2
      r10 = _nt_sum
      s1 << r10
    end
    if s1.last
      r1 = instantiate_node(BinaryOpLTR,input, i1...index, s1)
      r1.extend(Sum1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r11 = _nt_term
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:sum][start_index] = r0

    r0
  end

  module Term0
    def power
      elements[0]
    end

  end

  module Term1
    def term
      elements[1]
    end
  end

  def _nt_term
    start_index = index
    if node_cache[:term].has_key?(index)
      cached = node_cache[:term][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    s2, i2 = [], index
    loop do
      i3, s3 = index, []
      r4 = _nt_power
      s3 << r4
      if r4
        r6 = _nt_gap
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r5
        if r5
          if has_terminal?('\G[*/%]', true, index)
            r7 = true
            @index += 1
          else
            r7 = nil
          end
          s3 << r7
          if r7
            r9 = _nt_gap
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r8
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Term0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        s2 << r3
      else
        break
      end
    end
    if s2.empty?
      @index = i2
      r2 = nil
    else
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
    end
    s1 << r2
    if r2
      r10 = _nt_term
      s1 << r10
    end
    if s1.last
      r1 = instantiate_node(BinaryOpLTR,input, i1...index, s1)
      r1.extend(Term1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r11 = _nt_power
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:term][start_index] = r0

    r0
  end

  module Power0
    def unary
      elements[0]
    end

    def power
      elements[4]
    end
  end

  def _nt_power
    start_index = index
    if node_cache[:power].has_key?(index)
      cached = node_cache[:power][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_unary
    s1 << r2
    if r2
      r4 = _nt_gap
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        if has_terminal?('**', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('**')
          r5 = nil
        end
        s1 << r5
        if r5
          r7 = _nt_gap
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_power
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(BinaryOpRTL,input, i1...index, s1)
      r1.extend(Power0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r9 = _nt_unary
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:power][start_index] = r0

    r0
  end

  module Unary0
    def unary
      elements[1]
    end

    def type
      elements[3]
    end
  end

  module Unary1
    def tree
      [UNARY_SYMS['*'], unary.tree, type.tree]
    end
  end

  module Unary2
    def op
      elements[0]
    end

    def unary
      elements[1]
    end
  end

  module Unary3
    def tree
      [UNARY_SYMS[op.text_value], unary.tree]
    end
  end

  module Unary4
    def type
      elements[2]
    end

    def unary
      elements[6]
    end
  end

  module Unary5
    def tree
      [:cast, unary.tree, type.tree]
    end
  end

  def _nt_unary
    start_index = index
    if node_cache[:unary].has_key?(index)
      cached = node_cache[:unary][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('*', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('*')
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_unary
      s1 << r3
      if r3
        if has_terminal?(':', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(':')
          r4 = nil
        end
        s1 << r4
        if r4
          r5 = _nt_type
          s1 << r5
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Unary0)
      r1.extend(Unary1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i6, s6 = index, []
      if has_terminal?('\G[-~@*!]', true, index)
        r7 = true
        @index += 1
      else
        r7 = nil
      end
      s6 << r7
      if r7
        r8 = _nt_unary
        s6 << r8
      end
      if s6.last
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        r6.extend(Unary2)
        r6.extend(Unary3)
      else
        @index = i6
        r6 = nil
      end
      if r6
        r0 = r6
      else
        i9, s9 = index, []
        if has_terminal?('(', false, index)
          r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r10 = nil
        end
        s9 << r10
        if r10
          r12 = _nt_gap
          if r12
            r11 = r12
          else
            r11 = instantiate_node(SyntaxNode,input, index...index)
          end
          s9 << r11
          if r11
            r13 = _nt_type
            s9 << r13
            if r13
              r15 = _nt_gap
              if r15
                r14 = r15
              else
                r14 = instantiate_node(SyntaxNode,input, index...index)
              end
              s9 << r14
              if r14
                if has_terminal?(')', false, index)
                  r16 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(')')
                  r16 = nil
                end
                s9 << r16
                if r16
                  r18 = _nt_gap
                  if r18
                    r17 = r18
                  else
                    r17 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s9 << r17
                  if r17
                    r19 = _nt_unary
                    s9 << r19
                  end
                end
              end
            end
          end
        end
        if s9.last
          r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
          r9.extend(Unary4)
          r9.extend(Unary5)
        else
          @index = i9
          r9 = nil
        end
        if r9
          r0 = r9
        else
          r20 = _nt_member
          if r20
            r0 = r20
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:unary][start_index] = r0

    r0
  end

  module Member0
    def primary
      elements[0]
    end

  end

  module Member1
    def identifier
      elements[1]
    end
  end

  def _nt_member
    start_index = index
    if node_cache[:member].has_key?(index)
      cached = node_cache[:member][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    s2, i2 = [], index
    loop do
      i3, s3 = index, []
      r4 = _nt_primary
      s3 << r4
      if r4
        r6 = _nt_gap
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r5
        if r5
          if has_terminal?('.', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('.')
            r7 = nil
          end
          s3 << r7
          if r7
            r9 = _nt_gap
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r8
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Member0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        s2 << r3
      else
        break
      end
    end
    if s2.empty?
      @index = i2
      r2 = nil
    else
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
    end
    s1 << r2
    if r2
      r10 = _nt_identifier
      s1 << r10
    end
    if s1.last
      r1 = instantiate_node(BinaryOpLTR,input, i1...index, s1)
      r1.extend(Member1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r11 = _nt_primary
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:member][start_index] = r0

    r0
  end

  module Primary0
    def expression
      elements[2]
    end

  end

  module Primary1
    def tree
      expression.tree
    end
  end

  def _nt_primary
    start_index = index
    if node_cache[:primary].has_key?(index)
      cached = node_cache[:primary][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('(', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r2 = nil
    end
    s1 << r2
    if r2
      r4 = _nt_gap
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_expression
        s1 << r5
        if r5
          r7 = _nt_gap
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            if has_terminal?(')', false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(')')
              r8 = nil
            end
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Primary0)
      r1.extend(Primary1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r9 = _nt_arg
      if r9
        r0 = r9
      else
        r10 = _nt_function_call
        if r10
          r0 = r10
        else
          r11 = _nt_integer
          if r11
            r0 = r11
          else
            r12 = _nt_boolean
            if r12
              r0 = r12
            else
              r13 = _nt_stringz
              if r13
                r0 = r13
              else
                r14 = _nt_identifier
                if r14
                  r0 = r14
                else
                  @index = i0
                  r0 = nil
                end
              end
            end
          end
        end
      end
    end

    node_cache[:primary][start_index] = r0

    r0
  end

  module Function0
    def identifier
      elements[0]
    end

  end

  module Function1
    def identifier
      elements[1]
    end
  end

  module Function2
    def tree
      elements[0].elements.map {|e| e.elements[0].text_value} << identifier.text_value
    end
  end

  def _nt_function
    start_index = index
    if node_cache[:function].has_key?(index)
      cached = node_cache[:function][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      i2, s2 = index, []
      r3 = _nt_identifier
      s2 << r3
      if r3
        r5 = _nt_gap
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s2 << r4
        if r4
          if has_terminal?('.', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('.')
            r6 = nil
          end
          s2 << r6
          if r6
            r8 = _nt_gap
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s2 << r7
          end
        end
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(Function0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      r9 = _nt_identifier
      s0 << r9
    end
    if s0.last
      r0 = instantiate_node(BinaryOpLTR,input, i0...index, s0)
      r0.extend(Function1)
      r0.extend(Function2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:function][start_index] = r0

    r0
  end

  module FunctionCall0
    def function
      elements[0]
    end

    def arguments
      elements[3]
    end

  end

  module FunctionCall1
    def tree
      [:call, function.tree, arguments.tree]
    end
  end

  def _nt_function_call
    start_index = index
    if node_cache[:function_call].has_key?(index)
      cached = node_cache[:function_call][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_function
    s0 << r1
    if r1
      if has_terminal?('(', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('(')
        r2 = nil
      end
      s0 << r2
      if r2
        r4 = _nt_gap
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
        if r3
          r5 = _nt_arguments
          s0 << r5
          if r5
            r7 = _nt_gap
            if r7
              r6 = r7
            else
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r6
            if r6
              if has_terminal?(')', false, index)
                r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(')')
                r8 = nil
              end
              s0 << r8
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FunctionCall0)
      r0.extend(FunctionCall1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:function_call][start_index] = r0

    r0
  end

  module Arguments0
    def expression
      elements[0]
    end

    def arguments
      elements[4]
    end
  end

  module Arguments1
    def tree
      [expression.tree].concat(arguments.tree)
    end
  end

  module Arguments2
    def tree
      [super]
    end
  end

  module Arguments3
    def tree
      []
    end
  end

  def _nt_arguments
    start_index = index
    if node_cache[:arguments].has_key?(index)
      cached = node_cache[:arguments][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_expression
    s1 << r2
    if r2
      r4 = _nt_gap
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        if has_terminal?(',', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r5 = nil
        end
        s1 << r5
        if r5
          r7 = _nt_gap
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_arguments
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Arguments0)
      r1.extend(Arguments1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r9 = _nt_expression
      r9.extend(Arguments2)
      if r9
        r0 = r9
      else
        i10 = index
        r11 = _nt_gap
        if r11
          r10 = r11
          r10.extend(Arguments3)
        else
          if has_terminal?('', false, index)
            r12 = instantiate_node(SyntaxNode,input, index...(index + 0))
            @index += 0
          else
            terminal_parse_failure('')
            r12 = nil
          end
          if r12
            r10 = r12
            r10.extend(Arguments3)
          else
            @index = i10
            r10 = nil
          end
        end
        if r10
          r0 = r10
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:arguments][start_index] = r0

    r0
  end

  module Boolean0
    def tree ; true ; end
  end

  module Boolean1
    def tree ; false ; end
  end

  def _nt_boolean
    start_index = index
    if node_cache[:boolean].has_key?(index)
      cached = node_cache[:boolean][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('true', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      r1.extend(Boolean0)
      @index += 4
    else
      terminal_parse_failure('true')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('false', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
        r2.extend(Boolean1)
        @index += 5
      else
        terminal_parse_failure('false')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:boolean][start_index] = r0

    r0
  end

  module Integer0
  end

  module Integer1
    def tree
      text_value.to_i(2)
    end
  end

  module Integer2
  end

  module Integer3
    def tree
      text_value.to_i(16)
    end
  end

  module Integer4
    def radix
      elements[0]
    end

    def num
      elements[2]
    end
  end

  module Integer5
    def tree
      num.text_value.to_i(radix.text_value.to_i)
    end
  end

  module Integer6
    def tree
      text_value.to_i
    end
  end

  def _nt_integer
    start_index = index
    if node_cache[:integer].has_key?(index)
      cached = node_cache[:integer][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('0b', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('0b')
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        if has_terminal?('\G[01]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Integer0)
      r1.extend(Integer1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i5, s5 = index, []
      if has_terminal?('0x', false, index)
        r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('0x')
        r6 = nil
      end
      s5 << r6
      if r6
        s7, i7 = [], index
        loop do
          if has_terminal?('\G[0-9a-fA-F]', true, index)
            r8 = true
            @index += 1
          else
            r8 = nil
          end
          if r8
            s7 << r8
          else
            break
          end
        end
        if s7.empty?
          @index = i7
          r7 = nil
        else
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        end
        s5 << r7
      end
      if s5.last
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        r5.extend(Integer2)
        r5.extend(Integer3)
      else
        @index = i5
        r5 = nil
      end
      if r5
        r0 = r5
      else
        i9, s9 = index, []
        s10, i10 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r11 = true
            @index += 1
          else
            r11 = nil
          end
          if r11
            s10 << r11
          else
            break
          end
        end
        if s10.empty?
          @index = i10
          r10 = nil
        else
          r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
        end
        s9 << r10
        if r10
          if has_terminal?('r', false, index)
            r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('r')
            r12 = nil
          end
          s9 << r12
          if r12
            s13, i13 = [], index
            loop do
              if has_terminal?('\G[0-9a-zA-Z]', true, index)
                r14 = true
                @index += 1
              else
                r14 = nil
              end
              if r14
                s13 << r14
              else
                break
              end
            end
            if s13.empty?
              @index = i13
              r13 = nil
            else
              r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
            end
            s9 << r13
          end
        end
        if s9.last
          r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
          r9.extend(Integer4)
          r9.extend(Integer5)
        else
          @index = i9
          r9 = nil
        end
        if r9
          r0 = r9
        else
          s15, i15 = [], index
          loop do
            if has_terminal?('\G[0-9]', true, index)
              r16 = true
              @index += 1
            else
              r16 = nil
            end
            if r16
              s15 << r16
            else
              break
            end
          end
          if s15.empty?
            @index = i15
            r15 = nil
          else
            r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
            r15.extend(Integer6)
          end
          if r15
            r0 = r15
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:integer][start_index] = r0

    r0
  end

  module Stringz0
  end

  module Stringz1
  end

  module Stringz2
    def tree
      str = text_value[1...-1].gsub(/\\./) do |match|
        char = match[-1..-1]
        if ["'", "\\"].include? char
          char
        elsif %w[n t r].include? char
          eval("\"\\#{char}\"")
        else
          raise "Invalid stringz escape character: #{match}"
        end
      end
      [:strz, str]
    end
  end

  def _nt_stringz
    start_index = index
    if node_cache[:stringz].has_key?(index)
      cached = node_cache[:stringz][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("'", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("'")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        if has_terminal?('\G[ -&(-\\[\\]-~]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        if r4
          r3 = r4
        else
          i5, s5 = index, []
          if has_terminal?("\\", false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("\\")
            r6 = nil
          end
          s5 << r6
          if r6
            if index < input_length
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("any character")
              r7 = nil
            end
            s5 << r7
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(Stringz0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?("'", false, index)
          r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("'")
          r8 = nil
        end
        s0 << r8
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Stringz1)
      r0.extend(Stringz2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:stringz][start_index] = r0

    r0
  end

  module Identifier0
  end

  module Identifier1
    def tree
      text_value
    end
  end

  def _nt_identifier
    start_index = index
    if node_cache[:identifier].has_key?(index)
      cached = node_cache[:identifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-zA-Z_]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-zA-Z_0-9]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Identifier0)
      r0.extend(Identifier1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:identifier][start_index] = r0

    r0
  end

  module IdentifierCap0
  end

  module IdentifierCap1
    def tree
      text_value
    end
  end

  def _nt_identifier_cap
    start_index = index
    if node_cache[:identifier_cap].has_key?(index)
      cached = node_cache[:identifier_cap][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[A-Z]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-zA-Z0-9]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(IdentifierCap0)
      r0.extend(IdentifierCap1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:identifier_cap][start_index] = r0

    r0
  end

  module Type0
    def identifier_cap
      elements[0]
    end

  end

  module Type1
    def identifier_cap
      elements[1]
    end
  end

  module Type2
    def tree
      [:class] + elements[0].elements.map {|e| e.elements[0].text_value} << identifier_cap.text_value
    end
  end

  module Type3
  end

  module Type4
    def ptrs
      elements[0]
    end

    def base
      elements[1]
    end
  end

  module Type5
    def tree
      if ptrs.nil? || ptrs.text_value.empty?
        base.text_value
      else
        typ = []
        ptrs.text_value.length.times { typ << 'pointer' }
        typ << base.text_value
      end
    end
  end

  def _nt_type
    start_index = index
    if node_cache[:type].has_key?(index)
      cached = node_cache[:type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    s2, i2 = [], index
    loop do
      i3, s3 = index, []
      r4 = _nt_identifier_cap
      s3 << r4
      if r4
        r6 = _nt_gap
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r5
        if r5
          if has_terminal?('.', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('.')
            r7 = nil
          end
          s3 << r7
          if r7
            r9 = _nt_gap
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r8
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Type0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        s2 << r3
      else
        break
      end
    end
    r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
    s1 << r2
    if r2
      r10 = _nt_identifier_cap
      s1 << r10
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Type1)
      r1.extend(Type2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i11, s11 = index, []
      s12, i12 = [], index
      loop do
        if has_terminal?('@', false, index)
          r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('@')
          r13 = nil
        end
        if r13
          s12 << r13
        else
          break
        end
      end
      r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
      s11 << r12
      if r12
        i14, s14 = index, []
        if has_terminal?('\G[a-zA-Z]', true, index)
          r15 = true
          @index += 1
        else
          r15 = nil
        end
        s14 << r15
        if r15
          s16, i16 = [], index
          loop do
            if has_terminal?('\G[a-zA-Z0-9]', true, index)
              r17 = true
              @index += 1
            else
              r17 = nil
            end
            if r17
              s16 << r17
            else
              break
            end
          end
          r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
          s14 << r16
        end
        if s14.last
          r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
          r14.extend(Type3)
        else
          @index = i14
          r14 = nil
        end
        s11 << r14
      end
      if s11.last
        r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
        r11.extend(Type4)
        r11.extend(Type5)
      else
        @index = i11
        r11 = nil
      end
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:type][start_index] = r0

    r0
  end

  module Arg0
    def integer
      elements[2]
    end

  end

  module Arg1
    def tree
      [:arg, integer.tree]
    end
  end

  def _nt_arg
    start_index = index
    if node_cache[:arg].has_key?(index)
      cached = node_cache[:arg][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('arg(', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('arg(')
      r1 = nil
    end
    s0 << r1
    if r1
      r3 = _nt_gap
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r4 = _nt_integer
        s0 << r4
        if r4
          r6 = _nt_gap
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
          if r5
            if has_terminal?(')', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(')')
              r7 = nil
            end
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Arg0)
      r0.extend(Arg1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:arg][start_index] = r0

    r0
  end

  module Break0
  end

  module Break1
    def tree
      [:break]
    end
  end

  def _nt_break
    start_index = index
    if node_cache[:break].has_key?(index)
      cached = node_cache[:break][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('break', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('break')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[a-zA-Z_0-9]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Break0)
      r0.extend(Break1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:break][start_index] = r0

    r0
  end

  module Return0
    def expression
      elements[2]
    end

  end

  module Return1
    def tree
      [:ret, expression.tree]
    end
  end

  def _nt_return
    start_index = index
    if node_cache[:return].has_key?(index)
      cached = node_cache[:return][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('return(', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('return(')
      r1 = nil
    end
    s0 << r1
    if r1
      r3 = _nt_gap
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r4 = _nt_expression
        s0 << r4
        if r4
          r6 = _nt_gap
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
          if r5
            if has_terminal?(')', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(')')
              r7 = nil
            end
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Return0)
      r0.extend(Return1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:return][start_index] = r0

    r0
  end

  def _nt_eoc
    start_index = index
    if node_cache[:eoc].has_key?(index)
      cached = node_cache[:eoc][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("\n", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("\n")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r2 = _nt_eof
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:eoc][start_index] = r0

    r0
  end

  module Comment0
  end

  module Comment1
  end

  def _nt_comment
    start_index = index
    if node_cache[:comment].has_key?(index)
      cached = node_cache[:comment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('#', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('#')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        r5 = _nt_eoc
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if index < input_length
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Comment0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Comment1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:comment][start_index] = r0

    r0
  end

  def _nt_eof
    start_index = index
    if node_cache[:eof].has_key?(index)
      cached = node_cache[:eof][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if index < input_length
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("any character")
      r1 = nil
    end
    if r1
      r0 = nil
    else
      @index = i0
      r0 = instantiate_node(SyntaxNode,input, index...index)
    end

    node_cache[:eof][start_index] = r0

    r0
  end

  def _nt_gap
    start_index = index
    if node_cache[:gap].has_key?(index)
      cached = node_cache[:gap][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[ \\t]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:gap][start_index] = r0

    r0
  end

  def _nt_ws
    start_index = index
    if node_cache[:ws].has_key?(index)
      cached = node_cache[:ws][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[ \\t\\n\\r]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:ws][start_index] = r0

    r0
  end

end

class CoalTreetopParser < Treetop::Runtime::CompiledParser
  include CoalTreetop
end



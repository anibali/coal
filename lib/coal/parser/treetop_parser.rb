# Autogenerated from a Treetop grammar. Edits may be lost.


module C
  include Treetop::Runtime

  def root
    @root ||= :c_file
  end

  module CFile0
    def translation_unit
      elements[0]
    end

  end

  module CFile1
  end

  module CFile2
    def tree
      elements[1].empty? ? [] : elements[1][0].tree
    end
  end

  def _nt_c_file
    start_index = index
    if node_cache[:c_file].has_key?(index)
      cached = node_cache[:c_file][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_ws
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      i4, s4 = index, []
      r5 = _nt_translation_unit
      s4 << r5
      if r5
        r7 = _nt_ws
        if r7
          r6 = r7
        else
          r6 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r6
      end
      if s4.last
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        r4.extend(CFile0)
      else
        @index = i4
        r4 = nil
      end
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CFile1)
      r0.extend(CFile2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_file][start_index] = r0

    r0
  end

  def _nt_ws
    start_index = index
    if node_cache[:ws].has_key?(index)
      cached = node_cache[:ws][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if has_terminal?('\G[\\s]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      if r2
        r1 = r2
      else
        r3 = _nt_multiline_comment
        if r3
          r1 = r3
        else
          r4 = _nt_single_line_comment
          if r4
            r1 = r4
          else
            @index = i1
            r1 = nil
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:ws][start_index] = r0

    r0
  end

  module SingleLineComment0
  end

  module SingleLineComment1
  end

  def _nt_single_line_comment
    start_index = index
    if node_cache[:single_line_comment].has_key?(index)
      cached = node_cache[:single_line_comment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('//', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('//')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        if has_terminal?("\n", false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\n")
          r5 = nil
        end
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if index < input_length
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(SingleLineComment0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SingleLineComment1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:single_line_comment][start_index] = r0

    r0
  end

  module MultilineComment0
  end

  module MultilineComment1
  end

  def _nt_multiline_comment
    start_index = index
    if node_cache[:multiline_comment].has_key?(index)
      cached = node_cache[:multiline_comment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('/*', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('/*')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        if has_terminal?('*/', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('*/')
          r5 = nil
        end
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if index < input_length
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(MultilineComment0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?('*/', false, index)
          r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('*/')
          r7 = nil
        end
        s0 << r7
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(MultilineComment1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:multiline_comment][start_index] = r0

    r0
  end

  module Identifier0
  end

  module Identifier1
    def tree
      Coal::Nodes::Identifier.new(text_value)
    end
  end

  def _nt_identifier
    start_index = index
    if node_cache[:identifier].has_key?(index)
      cached = node_cache[:identifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-zA-Z_]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[\\w]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Identifier0)
      r0.extend(Identifier1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:identifier][start_index] = r0

    r0
  end

  def _nt_constant
    start_index = index
    if node_cache[:constant].has_key?(index)
      cached = node_cache[:constant][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_floating_constant
    if r1
      r0 = r1
    else
      r2 = _nt_integer_constant
      if r2
        r0 = r2
      else
        r3 = _nt_enumeration_constant
        if r3
          r0 = r3
        else
          r4 = _nt_character_constant
          if r4
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:constant][start_index] = r0

    r0
  end

  module IntegerConstant0
    def decimal_constant
      elements[0]
    end

  end

  module IntegerConstant1
    def tree
      suffix = elements[1].empty? ? [] : elements[1].tree
      Coal::Nodes::IntegerConstant.new(decimal_constant.tree, 10, suffix)
    end
  end

  module IntegerConstant2
    def hexadecimal_constant
      elements[0]
    end

  end

  module IntegerConstant3
    def tree
      suffix = elements[1].empty? ? [] : elements[1].tree
      Coal::Nodes::IntegerConstant.new(hexadecimal_constant.tree, 16, suffix)
    end
  end

  module IntegerConstant4
    def octal_constant
      elements[0]
    end

  end

  module IntegerConstant5
    def tree
      suffix = elements[1].empty? ? [] : elements[1].tree
      Coal::Nodes::IntegerConstant.new(octal_constant.tree, 8, suffix)
    end
  end

  def _nt_integer_constant
    start_index = index
    if node_cache[:integer_constant].has_key?(index)
      cached = node_cache[:integer_constant][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_decimal_constant
    s1 << r2
    if r2
      r4 = _nt_integer_suffix
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(IntegerConstant0)
      r1.extend(IntegerConstant1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i5, s5 = index, []
      r6 = _nt_hexadecimal_constant
      s5 << r6
      if r6
        r8 = _nt_integer_suffix
        if r8
          r7 = r8
        else
          r7 = instantiate_node(SyntaxNode,input, index...index)
        end
        s5 << r7
      end
      if s5.last
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        r5.extend(IntegerConstant2)
        r5.extend(IntegerConstant3)
      else
        @index = i5
        r5 = nil
      end
      if r5
        r0 = r5
      else
        i9, s9 = index, []
        r10 = _nt_octal_constant
        s9 << r10
        if r10
          r12 = _nt_integer_suffix
          if r12
            r11 = r12
          else
            r11 = instantiate_node(SyntaxNode,input, index...index)
          end
          s9 << r11
        end
        if s9.last
          r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
          r9.extend(IntegerConstant4)
          r9.extend(IntegerConstant5)
        else
          @index = i9
          r9 = nil
        end
        if r9
          r0 = r9
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:integer_constant][start_index] = r0

    r0
  end

  module DecimalConstant0
  end

  module DecimalConstant1
    def tree
      text_value.to_i
    end
  end

  def _nt_decimal_constant
    start_index = index
    if node_cache[:decimal_constant].has_key?(index)
      cached = node_cache[:decimal_constant][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[1-9]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[\\d]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(DecimalConstant0)
      r0.extend(DecimalConstant1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:decimal_constant][start_index] = r0

    r0
  end

  module OctalConstant0
  end

  module OctalConstant1
    def tree
      text_value.to_i(8)
    end
  end

  def _nt_octal_constant
    start_index = index
    if node_cache[:octal_constant].has_key?(index)
      cached = node_cache[:octal_constant][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('0', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('0')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[0-7]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(OctalConstant0)
      r0.extend(OctalConstant1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:octal_constant][start_index] = r0

    r0
  end

  module HexadecimalConstant0
  end

  module HexadecimalConstant1
    def tree
      text_value.to_i(16)
    end
  end

  def _nt_hexadecimal_constant
    start_index = index
    if node_cache[:hexadecimal_constant].has_key?(index)
      cached = node_cache[:hexadecimal_constant][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('0', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('0')
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[xX]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          if has_terminal?('\G[\\da-fA-F]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        if s3.empty?
          @index = i3
          r3 = nil
        else
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(HexadecimalConstant0)
      r0.extend(HexadecimalConstant1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:hexadecimal_constant][start_index] = r0

    r0
  end

  module IntegerSuffix0
  end

  module IntegerSuffix1
  end

  module IntegerSuffix2
    def tree
      suffix = []
      str = text_value.downcase
      if str.include? 'll'
        suffix << 'll'
      elsif str.include? 'l'
        suffix << 'l'
      end
      if str.include? 'u'
        suffix << 'u'
      end
      suffix
    end
  end

  def _nt_integer_suffix
    start_index = index
    if node_cache[:integer_suffix].has_key?(index)
      cached = node_cache[:integer_suffix][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('\G[uU]', true, index)
      r2 = true
      @index += 1
    else
      r2 = nil
    end
    s1 << r2
    if r2
      if has_terminal?('\G[lL]', true, index)
        r4 = true
        @index += 1
      else
        r4 = nil
      end
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        if has_terminal?('\G[lL]', true, index)
          r6 = true
          @index += 1
        else
          r6 = nil
        end
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(IntegerSuffix0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
      r0.extend(IntegerSuffix2)
    else
      i7, s7 = index, []
      if has_terminal?('\G[lL]', true, index)
        r8 = true
        @index += 1
      else
        r8 = nil
      end
      s7 << r8
      if r8
        if has_terminal?('\G[lL]', true, index)
          r10 = true
          @index += 1
        else
          r10 = nil
        end
        if r10
          r9 = r10
        else
          r9 = instantiate_node(SyntaxNode,input, index...index)
        end
        s7 << r9
        if r9
          if has_terminal?('\G[uU]', true, index)
            r12 = true
            @index += 1
          else
            r12 = nil
          end
          if r12
            r11 = r12
          else
            r11 = instantiate_node(SyntaxNode,input, index...index)
          end
          s7 << r11
        end
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(IntegerSuffix1)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
        r0.extend(IntegerSuffix2)
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:integer_suffix][start_index] = r0

    r0
  end

  def _nt_floating_constant
    start_index = index
    if node_cache[:floating_constant].has_key?(index)
      cached = node_cache[:floating_constant][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_hexadecimal_floating_constant
    if r1
      r0 = r1
    else
      r2 = _nt_decimal_floating_constant
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:floating_constant][start_index] = r0

    r0
  end

  module DecimalFloatingConstant0
    def fractional_constant
      elements[0]
    end

  end

  module DecimalFloatingConstant1
    def exponent_part
      elements[1]
    end

  end

  module DecimalFloatingConstant2
    def tree
      suffix = elements[2].empty? ? [] : [elements[2].text_value]
      guts = suffix.empty? ? text_value : text_value.chop
      Coal::Nodes::FloatingConstant.new(guts.to_f, 10, suffix)
    end
  end

  def _nt_decimal_floating_constant
    start_index = index
    if node_cache[:decimal_floating_constant].has_key?(index)
      cached = node_cache[:decimal_floating_constant][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_fractional_constant
    s1 << r2
    if r2
      r4 = _nt_exponent_part
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        if has_terminal?('\G[fFlL]', true, index)
          r6 = true
          @index += 1
        else
          r6 = nil
        end
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(DecimalFloatingConstant0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
      r0.extend(DecimalFloatingConstant2)
    else
      i7, s7 = index, []
      s8, i8 = [], index
      loop do
        if has_terminal?('\G[\\d]', true, index)
          r9 = true
          @index += 1
        else
          r9 = nil
        end
        if r9
          s8 << r9
        else
          break
        end
      end
      if s8.empty?
        @index = i8
        r8 = nil
      else
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
      end
      s7 << r8
      if r8
        r10 = _nt_exponent_part
        s7 << r10
        if r10
          if has_terminal?('\G[fFlL]', true, index)
            r12 = true
            @index += 1
          else
            r12 = nil
          end
          if r12
            r11 = r12
          else
            r11 = instantiate_node(SyntaxNode,input, index...index)
          end
          s7 << r11
        end
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(DecimalFloatingConstant1)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
        r0.extend(DecimalFloatingConstant2)
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:decimal_floating_constant][start_index] = r0

    r0
  end

  module FractionalConstant0
  end

  module FractionalConstant1
  end

  def _nt_fractional_constant
    start_index = index
    if node_cache[:fractional_constant].has_key?(index)
      cached = node_cache[:fractional_constant][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    s2, i2 = [], index
    loop do
      if has_terminal?('\G[\\d]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        s2 << r3
      else
        break
      end
    end
    r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
    s1 << r2
    if r2
      if has_terminal?('.', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('.')
        r4 = nil
      end
      s1 << r4
      if r4
        s5, i5 = [], index
        loop do
          if has_terminal?('\G[\\d]', true, index)
            r6 = true
            @index += 1
          else
            r6 = nil
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        if s5.empty?
          @index = i5
          r5 = nil
        else
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        end
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(FractionalConstant0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      s8, i8 = [], index
      loop do
        if has_terminal?('\G[\\d]', true, index)
          r9 = true
          @index += 1
        else
          r9 = nil
        end
        if r9
          s8 << r9
        else
          break
        end
      end
      if s8.empty?
        @index = i8
        r8 = nil
      else
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
      end
      s7 << r8
      if r8
        if has_terminal?('.', false, index)
          r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('.')
          r10 = nil
        end
        s7 << r10
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(FractionalConstant1)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:fractional_constant][start_index] = r0

    r0
  end

  module ExponentPart0
  end

  def _nt_exponent_part
    start_index = index
    if node_cache[:exponent_part].has_key?(index)
      cached = node_cache[:exponent_part][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[eE]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[+-]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        s4, i4 = [], index
        loop do
          if has_terminal?('\G[\\d]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ExponentPart0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:exponent_part][start_index] = r0

    r0
  end

  module HexadecimalFloatingConstant0
    def binary_exponent_part
      elements[3]
    end

  end

  module HexadecimalFloatingConstant1
    def tree
      a, b = *elements[2].text_value.split('.')
      value = a.to_i(16)
      value += b.to_i(16).to_f / 16 ** b.size if b
      bin_exp = elements[3].text_value[1..-1].to_i
      value *= 2.0 ** bin_exp
      suffix = elements[2].empty? ? [] : [elements[2].text_value]
      Coal::Nodes::FloatingConstant.new(value, 16, suffix)
    end
  end

  def _nt_hexadecimal_floating_constant
    start_index = index
    if node_cache[:hexadecimal_floating_constant].has_key?(index)
      cached = node_cache[:hexadecimal_floating_constant][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('0', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('0')
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[xX]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
      if r2
        i3 = index
        r4 = _nt_hexadecimal_fractional_constant
        if r4
          r3 = r4
        else
          s5, i5 = [], index
          loop do
            if has_terminal?('\G[\\da-fA-F]', true, index)
              r6 = true
              @index += 1
            else
              r6 = nil
            end
            if r6
              s5 << r6
            else
              break
            end
          end
          if s5.empty?
            @index = i5
            r5 = nil
          else
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          end
          if r5
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        s0 << r3
        if r3
          r7 = _nt_binary_exponent_part
          s0 << r7
          if r7
            if has_terminal?('\G[fFlL]', true, index)
              r9 = true
              @index += 1
            else
              r9 = nil
            end
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r8
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(HexadecimalFloatingConstant0)
      r0.extend(HexadecimalFloatingConstant1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:hexadecimal_floating_constant][start_index] = r0

    r0
  end

  module HexadecimalFractionalConstant0
  end

  module HexadecimalFractionalConstant1
  end

  def _nt_hexadecimal_fractional_constant
    start_index = index
    if node_cache[:hexadecimal_fractional_constant].has_key?(index)
      cached = node_cache[:hexadecimal_fractional_constant][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    s2, i2 = [], index
    loop do
      if has_terminal?('\G[\\da-fA-F]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        s2 << r3
      else
        break
      end
    end
    r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
    s1 << r2
    if r2
      if has_terminal?('.', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('.')
        r4 = nil
      end
      s1 << r4
      if r4
        s5, i5 = [], index
        loop do
          if has_terminal?('\G[\\da-fA-F]', true, index)
            r6 = true
            @index += 1
          else
            r6 = nil
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        if s5.empty?
          @index = i5
          r5 = nil
        else
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        end
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(HexadecimalFractionalConstant0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      s8, i8 = [], index
      loop do
        if has_terminal?('\G[\\da-fA-F]', true, index)
          r9 = true
          @index += 1
        else
          r9 = nil
        end
        if r9
          s8 << r9
        else
          break
        end
      end
      if s8.empty?
        @index = i8
        r8 = nil
      else
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
      end
      s7 << r8
      if r8
        if has_terminal?('.', false, index)
          r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('.')
          r10 = nil
        end
        s7 << r10
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(HexadecimalFractionalConstant1)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:hexadecimal_fractional_constant][start_index] = r0

    r0
  end

  module BinaryExponentPart0
  end

  def _nt_binary_exponent_part
    start_index = index
    if node_cache[:binary_exponent_part].has_key?(index)
      cached = node_cache[:binary_exponent_part][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[pP]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[+-]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        s4, i4 = [], index
        loop do
          if has_terminal?('\G[\\d]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(BinaryExponentPart0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:binary_exponent_part][start_index] = r0

    r0
  end

  def _nt_enumeration_constant
    start_index = index
    if node_cache[:enumeration_constant].has_key?(index)
      cached = node_cache[:enumeration_constant][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_identifier

    node_cache[:enumeration_constant][start_index] = r0

    r0
  end

  module CharacterConstant0
  end

  module CharacterConstant1
    def tree
      value = nil
      wide = !elements[0].empty?
      guts = elements[2][0]
      if guts.respond_to? :tree
        value = guts.tree
      else
        value = guts.text_value[0]
      end
      Coal::Nodes::CharacterConstant.new(value, wide)
    end
  end

  def _nt_character_constant
    start_index = index
    if node_cache[:character_constant].has_key?(index)
      cached = node_cache[:character_constant][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('L', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('L')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if has_terminal?('\'', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('\'')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          i5 = index
          if has_terminal?('\G[^\'\\\\\\n]', true, index)
            r6 = true
            @index += 1
          else
            r6 = nil
          end
          if r6
            r5 = r6
          else
            r7 = _nt_escape_sequence
            if r7
              r5 = r7
            else
              @index = i5
              r5 = nil
            end
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
        if r4
          if has_terminal?('\'', false, index)
            r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('\'')
            r8 = nil
          end
          s0 << r8
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CharacterConstant0)
      r0.extend(CharacterConstant1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:character_constant][start_index] = r0

    r0
  end

  module EscapeSequence0
  end

  module EscapeSequence1
    def tree
      {
        '\''  => 39,
        '"'   => 34,
        '?'   => 63,
        '\\'  => 92,
        'a'   => 7,
        'b'   => 8,
        'f'   => 12,
        'n'   => 10,
        'r'   => 13,
        't'   => 9,
        'v'   => 11,
      }[elements[1].text_value]
    end
  end

  module EscapeSequence2
  end

  module EscapeSequence3
    def tree
      text_value[1..-1].to_i(16)
    end
  end

  module EscapeSequence4
  end

  module EscapeSequence5
    def tree
      text_value.to_i(8)
    end
  end

  def _nt_escape_sequence
    start_index = index
    if node_cache[:escape_sequence].has_key?(index)
      cached = node_cache[:escape_sequence][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('\\', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('\\')
      r2 = nil
    end
    s1 << r2
    if r2
      if has_terminal?('\G[\'"\\?\\\\abfnrtv]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(EscapeSequence0)
      r1.extend(EscapeSequence1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i4, s4 = index, []
      if has_terminal?('\\', false, index)
        r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('\\')
        r5 = nil
      end
      s4 << r5
      if r5
        if has_terminal?('\G[0-7]', true, index)
          r6 = true
          @index += 1
        else
          r6 = nil
        end
        s4 << r6
        if r6
          if has_terminal?('\G[0-7]', true, index)
            r8 = true
            @index += 1
          else
            r8 = nil
          end
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s4 << r7
          if r7
            if has_terminal?('\G[0-7]', true, index)
              r10 = true
              @index += 1
            else
              r10 = nil
            end
            if r10
              r9 = r10
            else
              r9 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r9
          end
        end
      end
      if s4.last
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        r4.extend(EscapeSequence2)
        r4.extend(EscapeSequence3)
      else
        @index = i4
        r4 = nil
      end
      if r4
        r0 = r4
      else
        i11, s11 = index, []
        if has_terminal?('\\x', false, index)
          r12 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('\\x')
          r12 = nil
        end
        s11 << r12
        if r12
          s13, i13 = [], index
          loop do
            if has_terminal?('\G[\\da-fA-F]', true, index)
              r14 = true
              @index += 1
            else
              r14 = nil
            end
            if r14
              s13 << r14
            else
              break
            end
          end
          if s13.empty?
            @index = i13
            r13 = nil
          else
            r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
          end
          s11 << r13
        end
        if s11.last
          r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
          r11.extend(EscapeSequence4)
          r11.extend(EscapeSequence5)
        else
          @index = i11
          r11 = nil
        end
        if r11
          r0 = r11
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:escape_sequence][start_index] = r0

    r0
  end

  module StringLiteral0
  end

  module StringLiteral1
    #'
         def tree
           value = nil
           wide = !elements[0].empty?
           guts = elements[2]
           if guts.empty?
             value = ""
           else
             arr = guts.map do |chr|
               if chr.respond_to? :tree
                 chr.tree
               else
                 chr.text_value[0]
               end
             end
             value = arr.pack('c*')
           end
           Coal::Nodes::StringLiteral.new(value, wide)
         end
  end

  def _nt_string_literal
    start_index = index
    if node_cache[:string_literal].has_key?(index)
      cached = node_cache[:string_literal][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('L', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('L')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if has_terminal?('"', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('"')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          i5 = index
          if has_terminal?('\G[^"\\\\\\n]', true, index)
            r6 = true
            @index += 1
          else
            r6 = nil
          end
          if r6
            r5 = r6
          else
            r7 = _nt_escape_sequence
            if r7
              r5 = r7
            else
              @index = i5
              r5 = nil
            end
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
        if r4
          if has_terminal?('"', false, index)
            r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('"')
            r8 = nil
          end
          s0 << r8
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StringLiteral0)
      r0.extend(StringLiteral1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:string_literal][start_index] = r0

    r0
  end

  module PrimaryExpression0
    def expression
      elements[2]
    end

  end

  module PrimaryExpression1
    def tree
      expression.tree
    end
  end

  def _nt_primary_expression
    start_index = index
    if node_cache[:primary_expression].has_key?(index)
      cached = node_cache[:primary_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_identifier
    if r1
      r0 = r1
    else
      r2 = _nt_constant
      if r2
        r0 = r2
      else
        r3 = _nt_string_literal
        if r3
          r0 = r3
        else
          i4, s4 = index, []
          if has_terminal?('(', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('(')
            r5 = nil
          end
          s4 << r5
          if r5
            r7 = _nt_ws
            if r7
              r6 = r7
            else
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r6
            if r6
              r8 = _nt_expression
              s4 << r8
              if r8
                r10 = _nt_ws
                if r10
                  r9 = r10
                else
                  r9 = instantiate_node(SyntaxNode,input, index...index)
                end
                s4 << r9
                if r9
                  if has_terminal?(')', false, index)
                    r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(')')
                    r11 = nil
                  end
                  s4 << r11
                end
              end
            end
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(PrimaryExpression0)
            r4.extend(PrimaryExpression1)
          else
            @index = i4
            r4 = nil
          end
          if r4
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:primary_expression][start_index] = r0

    r0
  end

  module PostfixExpressionStart0
  end

  module PostfixExpressionStart1
    def type_name
      elements[2]
    end

    def initializer_list
      elements[8]
    end

  end

  def _nt_postfix_expression_start
    start_index = index
    if node_cache[:postfix_expression_start].has_key?(index)
      cached = node_cache[:postfix_expression_start][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('(', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r2 = nil
    end
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_type_name
        s1 << r5
        if r5
          r7 = _nt_ws
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            if has_terminal?(')', false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(')')
              r8 = nil
            end
            s1 << r8
            if r8
              r10 = _nt_ws
              if r10
                r9 = r10
              else
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s1 << r9
              if r9
                if has_terminal?('{', false, index)
                  r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('{')
                  r11 = nil
                end
                s1 << r11
                if r11
                  r13 = _nt_ws
                  if r13
                    r12 = r13
                  else
                    r12 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s1 << r12
                  if r12
                    r14 = _nt_initializer_list
                    s1 << r14
                    if r14
                      r16 = _nt_ws
                      if r16
                        r15 = r16
                      else
                        r15 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s1 << r15
                      if r15
                        i18, s18 = index, []
                        if has_terminal?(',', false, index)
                          r19 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure(',')
                          r19 = nil
                        end
                        s18 << r19
                        if r19
                          r21 = _nt_ws
                          if r21
                            r20 = r21
                          else
                            r20 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s18 << r20
                        end
                        if s18.last
                          r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
                          r18.extend(PostfixExpressionStart0)
                        else
                          @index = i18
                          r18 = nil
                        end
                        if r18
                          r17 = r18
                        else
                          r17 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s1 << r17
                        if r17
                          if has_terminal?('}', false, index)
                            r22 = instantiate_node(SyntaxNode,input, index...(index + 1))
                            @index += 1
                          else
                            terminal_parse_failure('}')
                            r22 = nil
                          end
                          s1 << r22
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(PostfixExpressionStart1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r23 = _nt_primary_expression
      if r23
        r0 = r23
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:postfix_expression_start][start_index] = r0

    r0
  end

  module PostfixExpressionEnd0
    def argument_expression_list
      elements[0]
    end

  end

  module PostfixExpressionEnd1
  end

  module PostfixExpressionEnd2
    def tree(operand)
      args = elements[2].empty? ? [] : elements[2][0].tree
      Coal::Nodes::FunctionCall.new(operand, args)
    end
  end

  module PostfixExpressionEnd3
    def identifier
      elements[2]
    end
  end

  module PostfixExpressionEnd4
    def tree(operand)
      Coal::Nodes::StructMember.new(operand, identifier.tree, true)
    end
  end

  module PostfixExpressionEnd5
    def identifier
      elements[2]
    end
  end

  module PostfixExpressionEnd6
    def tree(operand)
      Coal::Nodes::StructMember.new(operand, identifier.tree, false)
    end
  end

  module PostfixExpressionEnd7
    def tree(operand)
      Coal::Nodes::PostfixIncrement.new(operand)
    end
  end

  module PostfixExpressionEnd8
    def tree(operand)
      Coal::Nodes::PostfixDecrement.new(operand)
    end
  end

  module PostfixExpressionEnd9
    def expression
      elements[2]
    end

  end

  module PostfixExpressionEnd10
    def tree(operand)
      Coal::Nodes::Subscript.new(operand, expression.tree)
    end
  end

  def _nt_postfix_expression_end
    start_index = index
    if node_cache[:postfix_expression_end].has_key?(index)
      cached = node_cache[:postfix_expression_end][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('(', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r2 = nil
    end
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        i6, s6 = index, []
        r7 = _nt_argument_expression_list
        s6 << r7
        if r7
          r9 = _nt_ws
          if r9
            r8 = r9
          else
            r8 = instantiate_node(SyntaxNode,input, index...index)
          end
          s6 << r8
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(PostfixExpressionEnd0)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r5
        if r5
          if has_terminal?(')', false, index)
            r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(')')
            r10 = nil
          end
          s1 << r10
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(PostfixExpressionEnd1)
      r1.extend(PostfixExpressionEnd2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i11, s11 = index, []
      if has_terminal?('.', false, index)
        r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('.')
        r12 = nil
      end
      s11 << r12
      if r12
        r14 = _nt_ws
        if r14
          r13 = r14
        else
          r13 = instantiate_node(SyntaxNode,input, index...index)
        end
        s11 << r13
        if r13
          r15 = _nt_identifier
          s11 << r15
        end
      end
      if s11.last
        r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
        r11.extend(PostfixExpressionEnd3)
        r11.extend(PostfixExpressionEnd4)
      else
        @index = i11
        r11 = nil
      end
      if r11
        r0 = r11
      else
        i16, s16 = index, []
        if has_terminal?('->', false, index)
          r17 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('->')
          r17 = nil
        end
        s16 << r17
        if r17
          r19 = _nt_ws
          if r19
            r18 = r19
          else
            r18 = instantiate_node(SyntaxNode,input, index...index)
          end
          s16 << r18
          if r18
            r20 = _nt_identifier
            s16 << r20
          end
        end
        if s16.last
          r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
          r16.extend(PostfixExpressionEnd5)
          r16.extend(PostfixExpressionEnd6)
        else
          @index = i16
          r16 = nil
        end
        if r16
          r0 = r16
        else
          if has_terminal?('++', false, index)
            r21 = instantiate_node(SyntaxNode,input, index...(index + 2))
            r21.extend(PostfixExpressionEnd7)
            @index += 2
          else
            terminal_parse_failure('++')
            r21 = nil
          end
          if r21
            r0 = r21
          else
            if has_terminal?('--', false, index)
              r22 = instantiate_node(SyntaxNode,input, index...(index + 2))
              r22.extend(PostfixExpressionEnd8)
              @index += 2
            else
              terminal_parse_failure('--')
              r22 = nil
            end
            if r22
              r0 = r22
            else
              i23, s23 = index, []
              if has_terminal?('[', false, index)
                r24 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('[')
                r24 = nil
              end
              s23 << r24
              if r24
                r26 = _nt_ws
                if r26
                  r25 = r26
                else
                  r25 = instantiate_node(SyntaxNode,input, index...index)
                end
                s23 << r25
                if r25
                  r27 = _nt_expression
                  s23 << r27
                  if r27
                    r29 = _nt_ws
                    if r29
                      r28 = r29
                    else
                      r28 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s23 << r28
                    if r28
                      if has_terminal?(']', false, index)
                        r30 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure(']')
                        r30 = nil
                      end
                      s23 << r30
                    end
                  end
                end
              end
              if s23.last
                r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
                r23.extend(PostfixExpressionEnd9)
                r23.extend(PostfixExpressionEnd10)
              else
                @index = i23
                r23 = nil
              end
              if r23
                r0 = r23
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end
    end

    node_cache[:postfix_expression_end][start_index] = r0

    r0
  end

  module PostfixExpression0
    def postfix_expression_end
      elements[1]
    end
  end

  module PostfixExpression1
    def postfix_expression_start
      elements[0]
    end

  end

  module PostfixExpression2
    def tree
      expr = postfix_expression_start.tree
      elements[1].each do |e|
        expr = e[1].tree(expr)
      end
      expr
    end
  end

  def _nt_postfix_expression
    start_index = index
    if node_cache[:postfix_expression].has_key?(index)
      cached = node_cache[:postfix_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_postfix_expression_start
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        r6 = _nt_ws
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          r7 = _nt_postfix_expression_end
          s4 << r7
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(PostfixExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(PostfixExpression1)
      r1.extend(PostfixExpression2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r8 = _nt_postfix_expression_start
      if r8
        r0 = r8
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:postfix_expression][start_index] = r0

    r0
  end

  module ArgumentExpressionList0
    def assignment_expression
      elements[3]
    end
  end

  module ArgumentExpressionList1
    def assignment_expression
      elements[0]
    end

  end

  module ArgumentExpressionList2
    def tree
      [assignment_expression.tree].concat(elements[1].map {|e| e[3].tree})
    end
  end

  def _nt_argument_expression_list
    start_index = index
    if node_cache[:argument_expression_list].has_key?(index)
      cached = node_cache[:argument_expression_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_assignment_expression
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r5 = _nt_ws
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if has_terminal?(',', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(',')
            r6 = nil
          end
          s3 << r6
          if r6
            r8 = _nt_ws
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r7
            if r7
              r9 = _nt_assignment_expression
              s3 << r9
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(ArgumentExpressionList0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ArgumentExpressionList1)
      r0.extend(ArgumentExpressionList2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:argument_expression_list][start_index] = r0

    r0
  end

  module UnaryExpression0
    def unary_expression
      elements[2]
    end
  end

  module UnaryExpression1
    def tree
      Coal::Nodes::PrefixIncrement.new(unary_expression.tree)
    end
  end

  module UnaryExpression2
    def unary_expression
      elements[2]
    end
  end

  module UnaryExpression3
    def tree
      Coal::Nodes::PrefixDecrement.new(unary_expression.tree)
    end
  end

  module UnaryExpression4
    def cast_expression
      elements[2]
    end
  end

  module UnaryExpression5
    def tree
      {
        '*' => Coal::Nodes::Dereference,
        '&' => Coal::Nodes::AddressOf,
        '+' => Coal::Nodes::Positive,
        '-' => Coal::Nodes::Negative,
        '~' => Coal::Nodes::BitwiseComplement,
        '!' => Coal::Nodes::LogicalNot,
      }[elements[0].text_value].new(cast_expression.tree)
    end
  end

  module UnaryExpression6
    def type_name
      elements[4]
    end

  end

  module UnaryExpression7
    def tree
      Coal::Nodes::SizeOf.new(type_name.tree, true)
    end
  end

  module UnaryExpression8
    def unary_expression
      elements[3]
    end
  end

  module UnaryExpression9
    def tree
      Coal::Nodes::SizeOf.new(unary_expression.tree, false)
    end
  end

  def _nt_unary_expression
    start_index = index
    if node_cache[:unary_expression].has_key?(index)
      cached = node_cache[:unary_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('++', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('++')
      r2 = nil
    end
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_unary_expression
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(UnaryExpression0)
      r1.extend(UnaryExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i6, s6 = index, []
      if has_terminal?('--', false, index)
        r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('--')
        r7 = nil
      end
      s6 << r7
      if r7
        r9 = _nt_ws
        if r9
          r8 = r9
        else
          r8 = instantiate_node(SyntaxNode,input, index...index)
        end
        s6 << r8
        if r8
          r10 = _nt_unary_expression
          s6 << r10
        end
      end
      if s6.last
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        r6.extend(UnaryExpression2)
        r6.extend(UnaryExpression3)
      else
        @index = i6
        r6 = nil
      end
      if r6
        r0 = r6
      else
        i11, s11 = index, []
        if has_terminal?('\G[\\*\\&\\+\\-\\~\\!]', true, index)
          r12 = true
          @index += 1
        else
          r12 = nil
        end
        s11 << r12
        if r12
          r14 = _nt_ws
          if r14
            r13 = r14
          else
            r13 = instantiate_node(SyntaxNode,input, index...index)
          end
          s11 << r13
          if r13
            r15 = _nt_cast_expression
            s11 << r15
          end
        end
        if s11.last
          r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
          r11.extend(UnaryExpression4)
          r11.extend(UnaryExpression5)
        else
          @index = i11
          r11 = nil
        end
        if r11
          r0 = r11
        else
          i16, s16 = index, []
          if has_terminal?('sizeof', false, index)
            r17 = instantiate_node(SyntaxNode,input, index...(index + 6))
            @index += 6
          else
            terminal_parse_failure('sizeof')
            r17 = nil
          end
          s16 << r17
          if r17
            r19 = _nt_ws
            if r19
              r18 = r19
            else
              r18 = instantiate_node(SyntaxNode,input, index...index)
            end
            s16 << r18
            if r18
              if has_terminal?('(', false, index)
                r20 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('(')
                r20 = nil
              end
              s16 << r20
              if r20
                r22 = _nt_ws
                if r22
                  r21 = r22
                else
                  r21 = instantiate_node(SyntaxNode,input, index...index)
                end
                s16 << r21
                if r21
                  r23 = _nt_type_name
                  s16 << r23
                  if r23
                    r25 = _nt_ws
                    if r25
                      r24 = r25
                    else
                      r24 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s16 << r24
                    if r24
                      if has_terminal?(')', false, index)
                        r26 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure(')')
                        r26 = nil
                      end
                      s16 << r26
                    end
                  end
                end
              end
            end
          end
          if s16.last
            r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
            r16.extend(UnaryExpression6)
            r16.extend(UnaryExpression7)
          else
            @index = i16
            r16 = nil
          end
          if r16
            r0 = r16
          else
            i27, s27 = index, []
            if has_terminal?('sizeof', false, index)
              r28 = instantiate_node(SyntaxNode,input, index...(index + 6))
              @index += 6
            else
              terminal_parse_failure('sizeof')
              r28 = nil
            end
            s27 << r28
            if r28
              i29 = index
              if has_terminal?('\G[\\w]', true, index)
                r30 = true
                @index += 1
              else
                r30 = nil
              end
              if r30
                r29 = nil
              else
                @index = i29
                r29 = instantiate_node(SyntaxNode,input, index...index)
              end
              s27 << r29
              if r29
                r32 = _nt_ws
                if r32
                  r31 = r32
                else
                  r31 = instantiate_node(SyntaxNode,input, index...index)
                end
                s27 << r31
                if r31
                  r33 = _nt_unary_expression
                  s27 << r33
                end
              end
            end
            if s27.last
              r27 = instantiate_node(SyntaxNode,input, i27...index, s27)
              r27.extend(UnaryExpression8)
              r27.extend(UnaryExpression9)
            else
              @index = i27
              r27 = nil
            end
            if r27
              r0 = r27
            else
              r34 = _nt_postfix_expression
              if r34
                r0 = r34
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end
    end

    node_cache[:unary_expression][start_index] = r0

    r0
  end

  module CastExpression0
    def type_name
      elements[2]
    end

    def cast_expression
      elements[6]
    end
  end

  module CastExpression1
    def tree
      Coal::Nodes::Cast.new(cast_expression.tree, type_name.tree)
    end
  end

  def _nt_cast_expression
    start_index = index
    if node_cache[:cast_expression].has_key?(index)
      cached = node_cache[:cast_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('(', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r2 = nil
    end
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_type_name
        s1 << r5
        if r5
          r7 = _nt_ws
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            if has_terminal?(')', false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(')')
              r8 = nil
            end
            s1 << r8
            if r8
              r10 = _nt_ws
              if r10
                r9 = r10
              else
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s1 << r9
              if r9
                r11 = _nt_cast_expression
                s1 << r11
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(CastExpression0)
      r1.extend(CastExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r12 = _nt_unary_expression
      if r12
        r0 = r12
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:cast_expression][start_index] = r0

    r0
  end

  module MultiplicativeExpression0
    def cast_expression
      elements[3]
    end
  end

  module MultiplicativeExpression1
    def cast_expression
      elements[0]
    end

  end

  module MultiplicativeExpression2
    def tree
      ltr_binomial_tree({
        '*' => Coal::Nodes::Multiply,
        '/' => Coal::Nodes::Divide,
        '%' => Coal::Nodes::Modulo,
      })
    end
  end

  def _nt_multiplicative_expression
    start_index = index
    if node_cache[:multiplicative_expression].has_key?(index)
      cached = node_cache[:multiplicative_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_cast_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        r6 = _nt_ws
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          if has_terminal?('\G[\\*/%]', true, index)
            r7 = true
            @index += 1
          else
            r7 = nil
          end
          s4 << r7
          if r7
            r9 = _nt_ws
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r8
            if r8
              r10 = _nt_cast_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(MultiplicativeExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(MultiplicativeExpression1)
      r1.extend(MultiplicativeExpression2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r11 = _nt_cast_expression
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:multiplicative_expression][start_index] = r0

    r0
  end

  module AdditiveExpression0
    def multiplicative_expression
      elements[3]
    end
  end

  module AdditiveExpression1
    def multiplicative_expression
      elements[0]
    end

  end

  module AdditiveExpression2
    def tree
      ltr_binomial_tree({
        '+' => Coal::Nodes::Add,
        '-' => Coal::Nodes::Subtract,
      })
    end
  end

  def _nt_additive_expression
    start_index = index
    if node_cache[:additive_expression].has_key?(index)
      cached = node_cache[:additive_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_multiplicative_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        r6 = _nt_ws
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          if has_terminal?('\G[\\+\\-]', true, index)
            r7 = true
            @index += 1
          else
            r7 = nil
          end
          s4 << r7
          if r7
            r9 = _nt_ws
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r8
            if r8
              r10 = _nt_multiplicative_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(AdditiveExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(AdditiveExpression1)
      r1.extend(AdditiveExpression2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r11 = _nt_multiplicative_expression
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:additive_expression][start_index] = r0

    r0
  end

  module ShiftExpression0
    def additive_expression
      elements[3]
    end
  end

  module ShiftExpression1
    def additive_expression
      elements[0]
    end

  end

  module ShiftExpression2
    def tree
      ltr_binomial_tree({
        '<<' => Coal::Nodes::LeftBitshift,
        '>>' => Coal::Nodes::RightBitshift,
      })
    end
  end

  def _nt_shift_expression
    start_index = index
    if node_cache[:shift_expression].has_key?(index)
      cached = node_cache[:shift_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_additive_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        r6 = _nt_ws
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          i7 = index
          if has_terminal?('<<', false, index)
            r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('<<')
            r8 = nil
          end
          if r8
            r7 = r8
          else
            if has_terminal?('>>', false, index)
              r9 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('>>')
              r9 = nil
            end
            if r9
              r7 = r9
            else
              @index = i7
              r7 = nil
            end
          end
          s4 << r7
          if r7
            r11 = _nt_ws
            if r11
              r10 = r11
            else
              r10 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r10
            if r10
              r12 = _nt_additive_expression
              s4 << r12
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(ShiftExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(ShiftExpression1)
      r1.extend(ShiftExpression2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r13 = _nt_additive_expression
      if r13
        r0 = r13
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:shift_expression][start_index] = r0

    r0
  end

  module RelationalExpression0
    def shift_expression
      elements[3]
    end
  end

  module RelationalExpression1
    def shift_expression
      elements[0]
    end

  end

  module RelationalExpression2
    def tree
      ltr_binomial_tree({
        '<=' => Coal::Nodes::LessOrEqual,
        '<'  => Coal::Nodes::Less,
        '>=' => Coal::Nodes::GreaterOrEqual,
        '>'  => Coal::Nodes::Greater,
      })
    end
  end

  def _nt_relational_expression
    start_index = index
    if node_cache[:relational_expression].has_key?(index)
      cached = node_cache[:relational_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_shift_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        r6 = _nt_ws
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          i7 = index
          if has_terminal?('<=', false, index)
            r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('<=')
            r8 = nil
          end
          if r8
            r7 = r8
          else
            if has_terminal?('<', false, index)
              r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('<')
              r9 = nil
            end
            if r9
              r7 = r9
            else
              if has_terminal?('>=', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure('>=')
                r10 = nil
              end
              if r10
                r7 = r10
              else
                if has_terminal?('>', false, index)
                  r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('>')
                  r11 = nil
                end
                if r11
                  r7 = r11
                else
                  @index = i7
                  r7 = nil
                end
              end
            end
          end
          s4 << r7
          if r7
            r13 = _nt_ws
            if r13
              r12 = r13
            else
              r12 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r12
            if r12
              r14 = _nt_shift_expression
              s4 << r14
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(RelationalExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(RelationalExpression1)
      r1.extend(RelationalExpression2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r15 = _nt_shift_expression
      if r15
        r0 = r15
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:relational_expression][start_index] = r0

    r0
  end

  module EqualityExpression0
    def relational_expression
      elements[3]
    end
  end

  module EqualityExpression1
    def relational_expression
      elements[0]
    end

  end

  module EqualityExpression2
    def tree
      ltr_binomial_tree({
        '==' => Coal::Nodes::Equal,
        '!=' => Coal::Nodes::NotEqual,
      })
    end
  end

  def _nt_equality_expression
    start_index = index
    if node_cache[:equality_expression].has_key?(index)
      cached = node_cache[:equality_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_relational_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        r6 = _nt_ws
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          i7 = index
          if has_terminal?('==', false, index)
            r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('==')
            r8 = nil
          end
          if r8
            r7 = r8
          else
            if has_terminal?('!=', false, index)
              r9 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('!=')
              r9 = nil
            end
            if r9
              r7 = r9
            else
              @index = i7
              r7 = nil
            end
          end
          s4 << r7
          if r7
            r11 = _nt_ws
            if r11
              r10 = r11
            else
              r10 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r10
            if r10
              r12 = _nt_relational_expression
              s4 << r12
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(EqualityExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(EqualityExpression1)
      r1.extend(EqualityExpression2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r13 = _nt_relational_expression
      if r13
        r0 = r13
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:equality_expression][start_index] = r0

    r0
  end

  module AndExpression0
    def equality_expression
      elements[3]
    end
  end

  module AndExpression1
    def equality_expression
      elements[0]
    end

  end

  module AndExpression2
    def tree
      ltr_binomial_tree '&' => Coal::Nodes::BitwiseAnd
    end
  end

  def _nt_and_expression
    start_index = index
    if node_cache[:and_expression].has_key?(index)
      cached = node_cache[:and_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_equality_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        r6 = _nt_ws
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          if has_terminal?('&', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('&')
            r7 = nil
          end
          s4 << r7
          if r7
            r9 = _nt_ws
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r8
            if r8
              r10 = _nt_equality_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(AndExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(AndExpression1)
      r1.extend(AndExpression2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r11 = _nt_equality_expression
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:and_expression][start_index] = r0

    r0
  end

  module ExclusiveOrExpression0
    def and_expression
      elements[3]
    end
  end

  module ExclusiveOrExpression1
    def and_expression
      elements[0]
    end

  end

  module ExclusiveOrExpression2
    def tree
      ltr_binomial_tree '^' => Coal::Nodes::BitwiseXor
    end
  end

  def _nt_exclusive_or_expression
    start_index = index
    if node_cache[:exclusive_or_expression].has_key?(index)
      cached = node_cache[:exclusive_or_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_and_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        r6 = _nt_ws
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          if has_terminal?('^', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('^')
            r7 = nil
          end
          s4 << r7
          if r7
            r9 = _nt_ws
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r8
            if r8
              r10 = _nt_and_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(ExclusiveOrExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(ExclusiveOrExpression1)
      r1.extend(ExclusiveOrExpression2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r11 = _nt_and_expression
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:exclusive_or_expression][start_index] = r0

    r0
  end

  module InclusiveOrExpression0
    def exclusive_or_expression
      elements[3]
    end
  end

  module InclusiveOrExpression1
    def exclusive_or_expression
      elements[0]
    end

  end

  module InclusiveOrExpression2
    def tree
      ltr_binomial_tree '|' => Coal::Nodes::BitwiseOr
    end
  end

  def _nt_inclusive_or_expression
    start_index = index
    if node_cache[:inclusive_or_expression].has_key?(index)
      cached = node_cache[:inclusive_or_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_exclusive_or_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        r6 = _nt_ws
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          if has_terminal?('|', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('|')
            r7 = nil
          end
          s4 << r7
          if r7
            r9 = _nt_ws
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r8
            if r8
              r10 = _nt_exclusive_or_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(InclusiveOrExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(InclusiveOrExpression1)
      r1.extend(InclusiveOrExpression2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r11 = _nt_exclusive_or_expression
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:inclusive_or_expression][start_index] = r0

    r0
  end

  module LogicalAndExpression0
    def inclusive_or_expression
      elements[3]
    end
  end

  module LogicalAndExpression1
    def inclusive_or_expression
      elements[0]
    end

  end

  module LogicalAndExpression2
    def tree
      ltr_binomial_tree '&&' => Coal::Nodes::LogicalAnd
    end
  end

  def _nt_logical_and_expression
    start_index = index
    if node_cache[:logical_and_expression].has_key?(index)
      cached = node_cache[:logical_and_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_inclusive_or_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        r6 = _nt_ws
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          if has_terminal?('&&', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('&&')
            r7 = nil
          end
          s4 << r7
          if r7
            r9 = _nt_ws
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r8
            if r8
              r10 = _nt_inclusive_or_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(LogicalAndExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(LogicalAndExpression1)
      r1.extend(LogicalAndExpression2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r11 = _nt_inclusive_or_expression
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:logical_and_expression][start_index] = r0

    r0
  end

  module LogicalOrExpression0
    def logical_and_expression
      elements[3]
    end
  end

  module LogicalOrExpression1
    def logical_and_expression
      elements[0]
    end

  end

  module LogicalOrExpression2
    def tree
      ltr_binomial_tree '||' => Coal::Nodes::LogicalOr
    end
  end

  def _nt_logical_or_expression
    start_index = index
    if node_cache[:logical_or_expression].has_key?(index)
      cached = node_cache[:logical_or_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_logical_and_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        r6 = _nt_ws
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          if has_terminal?('||', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('||')
            r7 = nil
          end
          s4 << r7
          if r7
            r9 = _nt_ws
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r8
            if r8
              r10 = _nt_logical_and_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(LogicalOrExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(LogicalOrExpression1)
      r1.extend(LogicalOrExpression2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r11 = _nt_logical_and_expression
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:logical_or_expression][start_index] = r0

    r0
  end

  module ConditionalExpression0
    def logical_or_expression
      elements[0]
    end

    def expression
      elements[4]
    end

    def conditional_expression
      elements[8]
    end
  end

  module ConditionalExpression1
    def tree
      e = elements
      Coal::Nodes::ConditionalExpression.new(e[0].tree, e[4].tree, e[8].tree)
    end
  end

  def _nt_conditional_expression
    start_index = index
    if node_cache[:conditional_expression].has_key?(index)
      cached = node_cache[:conditional_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_logical_or_expression
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        if has_terminal?('?', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('?')
          r5 = nil
        end
        s1 << r5
        if r5
          r7 = _nt_ws
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_expression
            s1 << r8
            if r8
              r10 = _nt_ws
              if r10
                r9 = r10
              else
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s1 << r9
              if r9
                if has_terminal?(':', false, index)
                  r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(':')
                  r11 = nil
                end
                s1 << r11
                if r11
                  r13 = _nt_ws
                  if r13
                    r12 = r13
                  else
                    r12 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s1 << r12
                  if r12
                    r14 = _nt_conditional_expression
                    s1 << r14
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(ConditionalExpression0)
      r1.extend(ConditionalExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r15 = _nt_logical_or_expression
      if r15
        r0 = r15
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:conditional_expression][start_index] = r0

    r0
  end

  module AssignmentExpression0
    def unary_expression
      elements[0]
    end

    def assignment_operator
      elements[2]
    end

    def assignment_expression
      elements[4]
    end
  end

  module AssignmentExpression1
    def tree
      op = assignment_operator.text_value.chop
      lvalue = unary_expression.tree
      rvalue = assignment_expression.tree
      rvalue = case op
        when '*':  Coal::Nodes::Multiply.new(lvalue, rvalue)
        when '/':  Coal::Nodes::Divide.new(lvalue, rvalue)
        when '%':  Coal::Nodes::Modulo.new(lvalue, rvalue)
        when '+':  Coal::Nodes::Add.new(lvalue, rvalue)
        when '-':  Coal::Nodes::Subtract.new(lvalue, rvalue)
        when '<<': Coal::Nodes::LeftBitshift.new(lvalue, rvalue)
        when '>>': Coal::Nodes::RightBitshift.new(lvalue, rvalue)
        when '&':  Coal::Nodes::BitwiseAnd.new(lvalue, rvalue)
        when '^':  Coal::Nodes::BitwiseXor.new(lvalue, rvalue)
        when '|':  Coal::Nodes::BitwiseOr.new(lvalue, rvalue)
        else rvalue
      end
      Coal::Nodes::Assign.new(lvalue, rvalue)
    end
  end

  def _nt_assignment_expression
    start_index = index
    if node_cache[:assignment_expression].has_key?(index)
      cached = node_cache[:assignment_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_unary_expression
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_assignment_operator
        s1 << r5
        if r5
          r7 = _nt_ws
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_assignment_expression
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(AssignmentExpression0)
      r1.extend(AssignmentExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r9 = _nt_conditional_expression
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:assignment_expression][start_index] = r0

    r0
  end

  def _nt_assignment_operator
    start_index = index
    if node_cache[:assignment_operator].has_key?(index)
      cached = node_cache[:assignment_operator][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('=', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('=')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('*=', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('*=')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?('/=', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('/=')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?('%=', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('%=')
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?('+=', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('+=')
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?('-=', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure('-=')
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?('<<=', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 3))
                  @index += 3
                else
                  terminal_parse_failure('<<=')
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  if has_terminal?('>>=', false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 3))
                    @index += 3
                  else
                    terminal_parse_failure('>>=')
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                  else
                    if has_terminal?('&=', false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 2))
                      @index += 2
                    else
                      terminal_parse_failure('&=')
                      r9 = nil
                    end
                    if r9
                      r0 = r9
                    else
                      if has_terminal?('^=', false, index)
                        r10 = instantiate_node(SyntaxNode,input, index...(index + 2))
                        @index += 2
                      else
                        terminal_parse_failure('^=')
                        r10 = nil
                      end
                      if r10
                        r0 = r10
                      else
                        if has_terminal?('|=', false, index)
                          r11 = instantiate_node(SyntaxNode,input, index...(index + 2))
                          @index += 2
                        else
                          terminal_parse_failure('|=')
                          r11 = nil
                        end
                        if r11
                          r0 = r11
                        else
                          @index = i0
                          r0 = nil
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:assignment_operator][start_index] = r0

    r0
  end

  module Expression0
    def assignment_expression
      elements[3]
    end
  end

  module Expression1
    def assignment_expression
      elements[0]
    end

  end

  module Expression2
    def tree
      [assignment_expression.tree].concat(elements[1].map {|e| e[3].tree})
    end
  end

  def _nt_expression
    start_index = index
    if node_cache[:expression].has_key?(index)
      cached = node_cache[:expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_assignment_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        r6 = _nt_ws
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          if has_terminal?(',', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(',')
            r7 = nil
          end
          s4 << r7
          if r7
            r9 = _nt_ws
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r8
            if r8
              r10 = _nt_assignment_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(Expression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Expression1)
      r1.extend(Expression2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r11 = _nt_assignment_expression
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:expression][start_index] = r0

    r0
  end

  def _nt_constant_expression
    start_index = index
    if node_cache[:constant_expression].has_key?(index)
      cached = node_cache[:constant_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_conditional_expression

    node_cache[:constant_expression][start_index] = r0

    r0
  end

  module DeclarationStart0
    def declaration_specifier
      elements[0]
    end

    def declaration_start
      elements[3]
    end
  end

  module DeclarationStart1
    def tree
      node = declaration_start.tree
      node.specifiers << declaration_specifier.tree
      node
    end
  end

  module DeclarationStart2
    def declaration_specifier
      elements[0]
    end

    def unambiguous_declaration_specifier
      elements[3]
    end
  end

  module DeclarationStart3
    def tree
      specifiers = [elements[0].tree, elements[3].tree]
      Coal::Nodes::Declaration.new(specifiers)
    end
  end

  module DeclarationStart4
    def declaration_specifier
      elements[0]
    end

    def init_declarator_list
      elements[3]
    end
  end

  module DeclarationStart5
    def tree
      specifiers = [declaration_specifier.tree]
      Coal::Nodes::Declaration.new(specifiers, init_declarator_list.tree)
    end
  end

  def _nt_declaration_start
    start_index = index
    if node_cache[:declaration_start].has_key?(index)
      cached = node_cache[:declaration_start][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_declaration_specifier
    s1 << r2
    if r2
      i3 = index
      if has_terminal?('\G[\\w]', true, index)
        r4 = true
        @index += 1
      else
        r4 = nil
      end
      if r4
        r3 = nil
      else
        @index = i3
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r6 = _nt_ws
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r5
        if r5
          r7 = _nt_declaration_start
          s1 << r7
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(DeclarationStart0)
      r1.extend(DeclarationStart1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i8, s8 = index, []
      r9 = _nt_declaration_specifier
      s8 << r9
      if r9
        i10 = index
        if has_terminal?('\G[\\w]', true, index)
          r11 = true
          @index += 1
        else
          r11 = nil
        end
        if r11
          r10 = nil
        else
          @index = i10
          r10 = instantiate_node(SyntaxNode,input, index...index)
        end
        s8 << r10
        if r10
          r13 = _nt_ws
          if r13
            r12 = r13
          else
            r12 = instantiate_node(SyntaxNode,input, index...index)
          end
          s8 << r12
          if r12
            r14 = _nt_unambiguous_declaration_specifier
            s8 << r14
          end
        end
      end
      if s8.last
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        r8.extend(DeclarationStart2)
        r8.extend(DeclarationStart3)
      else
        @index = i8
        r8 = nil
      end
      if r8
        r0 = r8
      else
        i15, s15 = index, []
        r16 = _nt_declaration_specifier
        s15 << r16
        if r16
          i17 = index
          if has_terminal?('\G[\\w]', true, index)
            r18 = true
            @index += 1
          else
            r18 = nil
          end
          if r18
            r17 = nil
          else
            @index = i17
            r17 = instantiate_node(SyntaxNode,input, index...index)
          end
          s15 << r17
          if r17
            r20 = _nt_ws
            if r20
              r19 = r20
            else
              r19 = instantiate_node(SyntaxNode,input, index...index)
            end
            s15 << r19
            if r19
              r21 = _nt_init_declarator_list
              s15 << r21
            end
          end
        end
        if s15.last
          r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
          r15.extend(DeclarationStart4)
          r15.extend(DeclarationStart5)
        else
          @index = i15
          r15 = nil
        end
        if r15
          r0 = r15
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:declaration_start][start_index] = r0

    r0
  end

  module Declaration0
    def declaration_start
      elements[0]
    end

  end

  module Declaration1
    def tree
      declaration_start.tree
    end
  end

  module Declaration2
    def declaration_specifier
      elements[0]
    end

  end

  module Declaration3
    def tree
      Coal::Nodes::Declaration.new([declaration_specifier.tree])
    end
  end

  def _nt_declaration
    start_index = index
    if node_cache[:declaration].has_key?(index)
      cached = node_cache[:declaration][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_declaration_start
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        if has_terminal?(';', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(';')
          r5 = nil
        end
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Declaration0)
      r1.extend(Declaration1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i6, s6 = index, []
      r7 = _nt_declaration_specifier
      s6 << r7
      if r7
        r9 = _nt_ws
        if r9
          r8 = r9
        else
          r8 = instantiate_node(SyntaxNode,input, index...index)
        end
        s6 << r8
        if r8
          if has_terminal?(';', false, index)
            r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(';')
            r10 = nil
          end
          s6 << r10
        end
      end
      if s6.last
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        r6.extend(Declaration2)
        r6.extend(Declaration3)
      else
        @index = i6
        r6 = nil
      end
      if r6
        r0 = r6
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:declaration][start_index] = r0

    r0
  end

  def _nt_unambiguous_declaration_specifier
    start_index = index
    if node_cache[:unambiguous_declaration_specifier].has_key?(index)
      cached = node_cache[:unambiguous_declaration_specifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_storage_class_specifier
    if r1
      r0 = r1
    else
      r2 = _nt_type_qualifier
      if r2
        r0 = r2
      else
        r3 = _nt_function_specifier
        if r3
          r0 = r3
        else
          r4 = _nt_unambiguous_type_specifier
          if r4
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:unambiguous_declaration_specifier][start_index] = r0

    r0
  end

  def _nt_declaration_specifier
    start_index = index
    if node_cache[:declaration_specifier].has_key?(index)
      cached = node_cache[:declaration_specifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_unambiguous_type_specifier
    if r1
      r0 = r1
    else
      r2 = _nt_typedef_name
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:declaration_specifier][start_index] = r0

    r0
  end

  module InitDeclaratorList0
    def init_declarator
      elements[3]
    end
  end

  module InitDeclaratorList1
    def init_declarator
      elements[0]
    end

  end

  module InitDeclaratorList2
    def tree
      [init_declarator.tree].concat(elements[1].map {|e| e[3].tree})
    end
  end

  def _nt_init_declarator_list
    start_index = index
    if node_cache[:init_declarator_list].has_key?(index)
      cached = node_cache[:init_declarator_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_init_declarator
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r5 = _nt_ws
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if has_terminal?(',', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(',')
            r6 = nil
          end
          s3 << r6
          if r6
            r8 = _nt_ws
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r7
            if r7
              r9 = _nt_init_declarator
              s3 << r9
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(InitDeclaratorList0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(InitDeclaratorList1)
      r0.extend(InitDeclaratorList2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:init_declarator_list][start_index] = r0

    r0
  end

  module InitDeclarator0
    def declarator
      elements[0]
    end

    def initializer
      elements[4]
    end
  end

  module InitDeclarator1
    def tree
      Coal::Nodes::InitDeclarator.new(declarator.tree, initializer.tree)
    end
  end

  def _nt_init_declarator
    start_index = index
    if node_cache[:init_declarator].has_key?(index)
      cached = node_cache[:init_declarator][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_declarator
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        if has_terminal?('=', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('=')
          r5 = nil
        end
        s1 << r5
        if r5
          r7 = _nt_ws
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_initializer
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(InitDeclarator0)
      r1.extend(InitDeclarator1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r9 = _nt_declarator
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:init_declarator][start_index] = r0

    r0
  end

  def _nt_storage_class_specifier
    start_index = index
    if node_cache[:storage_class_specifier].has_key?(index)
      cached = node_cache[:storage_class_specifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('typedef', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('typedef')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('extern', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure('extern')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?('static', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 6))
          @index += 6
        else
          terminal_parse_failure('static')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?('auto', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 4))
            @index += 4
          else
            terminal_parse_failure('auto')
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?('register', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 8))
              @index += 8
            else
              terminal_parse_failure('register')
              r5 = nil
            end
            if r5
              r0 = r5
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:storage_class_specifier][start_index] = r0

    r0
  end

  module UnambiguousTypeSpecifier0
    def tree
      text_value
    end
  end

  def _nt_unambiguous_type_specifier
    start_index = index
    if node_cache[:unambiguous_type_specifier].has_key?(index)
      cached = node_cache[:unambiguous_type_specifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1 = index
    if has_terminal?('void', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('void')
      r2 = nil
    end
    if r2
      r1 = r2
      r1.extend(UnambiguousTypeSpecifier0)
    else
      if has_terminal?('char', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('char')
        r3 = nil
      end
      if r3
        r1 = r3
        r1.extend(UnambiguousTypeSpecifier0)
      else
        if has_terminal?('short', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 5))
          @index += 5
        else
          terminal_parse_failure('short')
          r4 = nil
        end
        if r4
          r1 = r4
          r1.extend(UnambiguousTypeSpecifier0)
        else
          if has_terminal?('int', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 3))
            @index += 3
          else
            terminal_parse_failure('int')
            r5 = nil
          end
          if r5
            r1 = r5
            r1.extend(UnambiguousTypeSpecifier0)
          else
            if has_terminal?('long', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 4))
              @index += 4
            else
              terminal_parse_failure('long')
              r6 = nil
            end
            if r6
              r1 = r6
              r1.extend(UnambiguousTypeSpecifier0)
            else
              if has_terminal?('float', false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 5))
                @index += 5
              else
                terminal_parse_failure('float')
                r7 = nil
              end
              if r7
                r1 = r7
                r1.extend(UnambiguousTypeSpecifier0)
              else
                if has_terminal?('double', false, index)
                  r8 = instantiate_node(SyntaxNode,input, index...(index + 6))
                  @index += 6
                else
                  terminal_parse_failure('double')
                  r8 = nil
                end
                if r8
                  r1 = r8
                  r1.extend(UnambiguousTypeSpecifier0)
                else
                  if has_terminal?('signed', false, index)
                    r9 = instantiate_node(SyntaxNode,input, index...(index + 6))
                    @index += 6
                  else
                    terminal_parse_failure('signed')
                    r9 = nil
                  end
                  if r9
                    r1 = r9
                    r1.extend(UnambiguousTypeSpecifier0)
                  else
                    if has_terminal?('unsigned', false, index)
                      r10 = instantiate_node(SyntaxNode,input, index...(index + 8))
                      @index += 8
                    else
                      terminal_parse_failure('unsigned')
                      r10 = nil
                    end
                    if r10
                      r1 = r10
                      r1.extend(UnambiguousTypeSpecifier0)
                    else
                      if has_terminal?('_Bool', false, index)
                        r11 = instantiate_node(SyntaxNode,input, index...(index + 5))
                        @index += 5
                      else
                        terminal_parse_failure('_Bool')
                        r11 = nil
                      end
                      if r11
                        r1 = r11
                        r1.extend(UnambiguousTypeSpecifier0)
                      else
                        if has_terminal?('_Complex', false, index)
                          r12 = instantiate_node(SyntaxNode,input, index...(index + 8))
                          @index += 8
                        else
                          terminal_parse_failure('_Complex')
                          r12 = nil
                        end
                        if r12
                          r1 = r12
                          r1.extend(UnambiguousTypeSpecifier0)
                        else
                          @index = i1
                          r1 = nil
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if r1
      r0 = r1
    else
      r13 = _nt_struct_or_union_specifier
      if r13
        r0 = r13
      else
        r14 = _nt_enum_specifier
        if r14
          r0 = r14
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:unambiguous_type_specifier][start_index] = r0

    r0
  end

  def _nt_type_specifier
    start_index = index
    if node_cache[:type_specifier].has_key?(index)
      cached = node_cache[:type_specifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_unambiguous_type_specifier
    if r1
      r0 = r1
    else
      r2 = _nt_typedef_name
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:type_specifier][start_index] = r0

    r0
  end

  module StructOrUnionSpecifier0
    def ws
      elements[0]
    end

    def identifier
      elements[1]
    end
  end

  module StructOrUnionSpecifier1
    def struct_or_union
      elements[0]
    end

    def struct_declaration_list
      elements[5]
    end

  end

  module StructOrUnionSpecifier2
    def struct_or_union
      elements[0]
    end

    def ws
      elements[1]
    end

    def identifier
      elements[2]
    end
  end

  def _nt_struct_or_union_specifier
    start_index = index
    if node_cache[:struct_or_union_specifier].has_key?(index)
      cached = node_cache[:struct_or_union_specifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_struct_or_union
    s1 << r2
    if r2
      i4, s4 = index, []
      r5 = _nt_ws
      s4 << r5
      if r5
        r6 = _nt_identifier
        s4 << r6
      end
      if s4.last
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        r4.extend(StructOrUnionSpecifier0)
      else
        @index = i4
        r4 = nil
      end
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r8 = _nt_ws
        if r8
          r7 = r8
        else
          r7 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r7
        if r7
          if has_terminal?('{', false, index)
            r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('{')
            r9 = nil
          end
          s1 << r9
          if r9
            r11 = _nt_ws
            if r11
              r10 = r11
            else
              r10 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r10
            if r10
              r12 = _nt_struct_declaration_list
              s1 << r12
              if r12
                r14 = _nt_ws
                if r14
                  r13 = r14
                else
                  r13 = instantiate_node(SyntaxNode,input, index...index)
                end
                s1 << r13
                if r13
                  if has_terminal?('}', false, index)
                    r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('}')
                    r15 = nil
                  end
                  s1 << r15
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(StructOrUnionSpecifier1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i16, s16 = index, []
      r17 = _nt_struct_or_union
      s16 << r17
      if r17
        r18 = _nt_ws
        s16 << r18
        if r18
          r19 = _nt_identifier
          s16 << r19
        end
      end
      if s16.last
        r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
        r16.extend(StructOrUnionSpecifier2)
      else
        @index = i16
        r16 = nil
      end
      if r16
        r0 = r16
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:struct_or_union_specifier][start_index] = r0

    r0
  end

  def _nt_struct_or_union
    start_index = index
    if node_cache[:struct_or_union].has_key?(index)
      cached = node_cache[:struct_or_union][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('struct', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('struct')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('union', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure('union')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:struct_or_union][start_index] = r0

    r0
  end

  module StructDeclarationList0
    def ws
      elements[0]
    end

    def struct_declaration
      elements[1]
    end
  end

  module StructDeclarationList1
    def struct_declaration
      elements[0]
    end

  end

  def _nt_struct_declaration_list
    start_index = index
    if node_cache[:struct_declaration_list].has_key?(index)
      cached = node_cache[:struct_declaration_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_struct_declaration
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r4 = _nt_ws
        s3 << r4
        if r4
          r5 = _nt_struct_declaration
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(StructDeclarationList0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StructDeclarationList1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:struct_declaration_list][start_index] = r0

    r0
  end

  module StructDeclaration0
    def specifier_qualifier_list
      elements[0]
    end

    def ws
      elements[1]
    end

    def struct_declarator_list
      elements[2]
    end

  end

  def _nt_struct_declaration
    start_index = index
    if node_cache[:struct_declaration].has_key?(index)
      cached = node_cache[:struct_declaration][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_specifier_qualifier_list
    s0 << r1
    if r1
      r2 = _nt_ws
      s0 << r2
      if r2
        r3 = _nt_struct_declarator_list
        s0 << r3
        if r3
          r5 = _nt_ws
          if r5
            r4 = r5
          else
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r4
          if r4
            if has_terminal?(';', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(';')
              r6 = nil
            end
            s0 << r6
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StructDeclaration0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:struct_declaration][start_index] = r0

    r0
  end

  module SpecifierQualifierList0
    def ws
      elements[0]
    end

    def specifier_qualifier_list
      elements[1]
    end
  end

  module SpecifierQualifierList1
    def type_specifier
      elements[0]
    end

  end

  module SpecifierQualifierList2
    def ws
      elements[0]
    end

    def specifier_qualifier_list
      elements[1]
    end
  end

  module SpecifierQualifierList3
    def type_qualifier
      elements[0]
    end

  end

  def _nt_specifier_qualifier_list
    start_index = index
    if node_cache[:specifier_qualifier_list].has_key?(index)
      cached = node_cache[:specifier_qualifier_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_type_specifier
    s1 << r2
    if r2
      i4, s4 = index, []
      r5 = _nt_ws
      s4 << r5
      if r5
        r6 = _nt_specifier_qualifier_list
        s4 << r6
      end
      if s4.last
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        r4.extend(SpecifierQualifierList0)
      else
        @index = i4
        r4 = nil
      end
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(SpecifierQualifierList1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      r8 = _nt_type_qualifier
      s7 << r8
      if r8
        i10, s10 = index, []
        r11 = _nt_ws
        s10 << r11
        if r11
          r12 = _nt_specifier_qualifier_list
          s10 << r12
        end
        if s10.last
          r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
          r10.extend(SpecifierQualifierList2)
        else
          @index = i10
          r10 = nil
        end
        if r10
          r9 = r10
        else
          r9 = instantiate_node(SyntaxNode,input, index...index)
        end
        s7 << r9
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(SpecifierQualifierList3)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:specifier_qualifier_list][start_index] = r0

    r0
  end

  module StructDeclaratorList0
    def struct_declarator
      elements[3]
    end
  end

  module StructDeclaratorList1
    def struct_declarator
      elements[0]
    end

  end

  def _nt_struct_declarator_list
    start_index = index
    if node_cache[:struct_declarator_list].has_key?(index)
      cached = node_cache[:struct_declarator_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_struct_declarator
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r5 = _nt_ws
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if has_terminal?(',', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(',')
            r6 = nil
          end
          s3 << r6
          if r6
            r8 = _nt_ws
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r7
            if r7
              r9 = _nt_struct_declarator
              s3 << r9
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(StructDeclaratorList0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StructDeclaratorList1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:struct_declarator_list][start_index] = r0

    r0
  end

  module StructDeclarator0
    def declarator
      elements[0]
    end

  end

  module StructDeclarator1
    def constant_expression
      elements[3]
    end
  end

  def _nt_struct_declarator
    start_index = index
    if node_cache[:struct_declarator].has_key?(index)
      cached = node_cache[:struct_declarator][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    i3, s3 = index, []
    r4 = _nt_declarator
    s3 << r4
    if r4
      r6 = _nt_ws
      if r6
        r5 = r6
      else
        r5 = instantiate_node(SyntaxNode,input, index...index)
      end
      s3 << r5
    end
    if s3.last
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      r3.extend(StructDeclarator0)
    else
      @index = i3
      r3 = nil
    end
    if r3
      r2 = r3
    else
      r2 = instantiate_node(SyntaxNode,input, index...index)
    end
    s1 << r2
    if r2
      if has_terminal?(':', false, index)
        r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(':')
        r7 = nil
      end
      s1 << r7
      if r7
        r9 = _nt_ws
        if r9
          r8 = r9
        else
          r8 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r8
        if r8
          r10 = _nt_constant_expression
          s1 << r10
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(StructDeclarator1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r11 = _nt_declarator
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:struct_declarator][start_index] = r0

    r0
  end

  module EnumSpecifier0
    def ws
      elements[0]
    end

    def identifier
      elements[1]
    end
  end

  module EnumSpecifier1
  end

  module EnumSpecifier2
    def enumerator_list
      elements[5]
    end

  end

  module EnumSpecifier3
    def ws
      elements[1]
    end

    def identifier
      elements[2]
    end
  end

  def _nt_enum_specifier
    start_index = index
    if node_cache[:enum_specifier].has_key?(index)
      cached = node_cache[:enum_specifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('enum', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('enum')
      r2 = nil
    end
    s1 << r2
    if r2
      i4, s4 = index, []
      r5 = _nt_ws
      s4 << r5
      if r5
        r6 = _nt_identifier
        s4 << r6
      end
      if s4.last
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        r4.extend(EnumSpecifier0)
      else
        @index = i4
        r4 = nil
      end
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r8 = _nt_ws
        if r8
          r7 = r8
        else
          r7 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r7
        if r7
          if has_terminal?('{', false, index)
            r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('{')
            r9 = nil
          end
          s1 << r9
          if r9
            r11 = _nt_ws
            if r11
              r10 = r11
            else
              r10 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r10
            if r10
              r12 = _nt_enumerator_list
              s1 << r12
              if r12
                r14 = _nt_ws
                if r14
                  r13 = r14
                else
                  r13 = instantiate_node(SyntaxNode,input, index...index)
                end
                s1 << r13
                if r13
                  i16, s16 = index, []
                  if has_terminal?(',', false, index)
                    r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(',')
                    r17 = nil
                  end
                  s16 << r17
                  if r17
                    r19 = _nt_ws
                    if r19
                      r18 = r19
                    else
                      r18 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s16 << r18
                  end
                  if s16.last
                    r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                    r16.extend(EnumSpecifier1)
                  else
                    @index = i16
                    r16 = nil
                  end
                  if r16
                    r15 = r16
                  else
                    r15 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s1 << r15
                  if r15
                    if has_terminal?('}', false, index)
                      r20 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure('}')
                      r20 = nil
                    end
                    s1 << r20
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(EnumSpecifier2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i21, s21 = index, []
      if has_terminal?('enum', false, index)
        r22 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('enum')
        r22 = nil
      end
      s21 << r22
      if r22
        r23 = _nt_ws
        s21 << r23
        if r23
          r24 = _nt_identifier
          s21 << r24
        end
      end
      if s21.last
        r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
        r21.extend(EnumSpecifier3)
      else
        @index = i21
        r21 = nil
      end
      if r21
        r0 = r21
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:enum_specifier][start_index] = r0

    r0
  end

  module EnumeratorList0
    def enumerator
      elements[3]
    end
  end

  module EnumeratorList1
    def enumerator
      elements[0]
    end

  end

  def _nt_enumerator_list
    start_index = index
    if node_cache[:enumerator_list].has_key?(index)
      cached = node_cache[:enumerator_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_enumerator
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r5 = _nt_ws
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if has_terminal?(',', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(',')
            r6 = nil
          end
          s3 << r6
          if r6
            r8 = _nt_ws
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r7
            if r7
              r9 = _nt_enumerator
              s3 << r9
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(EnumeratorList0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(EnumeratorList1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:enumerator_list][start_index] = r0

    r0
  end

  module Enumerator0
    def enumeration_constant
      elements[0]
    end

    def constant_expression
      elements[4]
    end
  end

  def _nt_enumerator
    start_index = index
    if node_cache[:enumerator].has_key?(index)
      cached = node_cache[:enumerator][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_enumeration_constant
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        if has_terminal?('=', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('=')
          r5 = nil
        end
        s1 << r5
        if r5
          r7 = _nt_ws
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_constant_expression
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Enumerator0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r9 = _nt_enumeration_constant
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:enumerator][start_index] = r0

    r0
  end

  def _nt_type_qualifier
    start_index = index
    if node_cache[:type_qualifier].has_key?(index)
      cached = node_cache[:type_qualifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('const', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('const')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('restrict', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 8))
        @index += 8
      else
        terminal_parse_failure('restrict')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?('volatile', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 8))
          @index += 8
        else
          terminal_parse_failure('volatile')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:type_qualifier][start_index] = r0

    r0
  end

  def _nt_function_specifier
    start_index = index
    if node_cache[:function_specifier].has_key?(index)
      cached = node_cache[:function_specifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('inline', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('inline')
      r0 = nil
    end

    node_cache[:function_specifier][start_index] = r0

    r0
  end

  module Declarator0
    def pointer
      elements[0]
    end

    def direct_declarator
      elements[2]
    end
  end

  def _nt_declarator
    start_index = index
    if node_cache[:declarator].has_key?(index)
      cached = node_cache[:declarator][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_pointer
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_direct_declarator
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Declarator0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r6 = _nt_direct_declarator
      if r6
        r0 = r6
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:declarator][start_index] = r0

    r0
  end

  module DirectDeclaratorStart0
    def declarator
      elements[2]
    end

  end

  module DirectDeclaratorStart1
    def tree
      declarator.tree
    end
  end

  def _nt_direct_declarator_start
    start_index = index
    if node_cache[:direct_declarator_start].has_key?(index)
      cached = node_cache[:direct_declarator_start][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_identifier
    if r1
      r0 = r1
    else
      i2, s2 = index, []
      if has_terminal?('(', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('(')
        r3 = nil
      end
      s2 << r3
      if r3
        r5 = _nt_ws
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s2 << r4
        if r4
          r6 = _nt_declarator
          s2 << r6
          if r6
            r8 = _nt_ws
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s2 << r7
            if r7
              if has_terminal?(')', false, index)
                r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(')')
                r9 = nil
              end
              s2 << r9
            end
          end
        end
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(DirectDeclaratorStart0)
        r2.extend(DirectDeclaratorStart1)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:direct_declarator_start][start_index] = r0

    r0
  end

  module DirectDeclaratorEnd0
    def type_qualifier_list
      elements[0]
    end

  end

  module DirectDeclaratorEnd1
    def assignment_expression
      elements[0]
    end

  end

  module DirectDeclaratorEnd2
  end

  module DirectDeclaratorEnd3
    def tree(declarator)
      tql = elements[2].empty? ? [] : elements[2][0].tree
      ae = elements[3].empty? ? nil : elements[3][0].tree
      Coal::Nodes::ArrayDeclarator.new(declarator, tql, ae, false)
    end
  end

  module DirectDeclaratorEnd4
    def type_qualifier_list
      elements[0]
    end

  end

  module DirectDeclaratorEnd5
    def assignment_expression
      elements[6]
    end

  end

  module DirectDeclaratorEnd6
    def tree(declarator)
      tql = elements[5].empty? ? [] : elements[5][0].tree
      ae = assignment_expression.tree
      Coal::Nodes::ArrayDeclarator.new(declarator, tql, ae, true)
    end
  end

  module DirectDeclaratorEnd7
    def type_qualifier_list
      elements[2]
    end

    def ws
      elements[3]
    end

    def assignment_expression
      elements[7]
    end

  end

  module DirectDeclaratorEnd8
    def tree(declarator)
      tql = type_qualifier_list.tree
      ae = assignment_expression.tree
      Coal::Nodes::ArrayDeclarator.new(declarator, tql, ae, true)
    end
  end

  module DirectDeclaratorEnd9
    def type_qualifier_list
      elements[0]
    end

  end

  module DirectDeclaratorEnd10
  end

  module DirectDeclaratorEnd11
    def parameter_type_list
      elements[2]
    end

  end

  module DirectDeclaratorEnd12
    def tree(declarator)
      Coal::Nodes::FunctionDeclarator.new(declarator, parameter_type_list.tree, nil)
    end
  end

  module DirectDeclaratorEnd13
    def identifier_list
      elements[0]
    end

  end

  module DirectDeclaratorEnd14
  end

  module DirectDeclaratorEnd15
    def tree(declarator)
      ids = elements[2].empty? ? [] : elements[2][0].tree
      Coal::Nodes::FunctionDeclarator.new(declarator, nil, ids)
    end
  end

  def _nt_direct_declarator_end
    start_index = index
    if node_cache[:direct_declarator_end].has_key?(index)
      cached = node_cache[:direct_declarator_end][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('[', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r2 = nil
    end
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        i6, s6 = index, []
        r7 = _nt_type_qualifier_list
        s6 << r7
        if r7
          i8 = index
          if has_terminal?('\G[\\w]', true, index)
            r9 = true
            @index += 1
          else
            r9 = nil
          end
          if r9
            r8 = nil
          else
            @index = i8
            r8 = instantiate_node(SyntaxNode,input, index...index)
          end
          s6 << r8
          if r8
            r11 = _nt_ws
            if r11
              r10 = r11
            else
              r10 = instantiate_node(SyntaxNode,input, index...index)
            end
            s6 << r10
          end
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(DirectDeclaratorEnd0)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r5
        if r5
          i13, s13 = index, []
          r14 = _nt_assignment_expression
          s13 << r14
          if r14
            r16 = _nt_ws
            if r16
              r15 = r16
            else
              r15 = instantiate_node(SyntaxNode,input, index...index)
            end
            s13 << r15
          end
          if s13.last
            r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
            r13.extend(DirectDeclaratorEnd1)
          else
            @index = i13
            r13 = nil
          end
          if r13
            r12 = r13
          else
            r12 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r12
          if r12
            if has_terminal?(']', false, index)
              r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(']')
              r17 = nil
            end
            s1 << r17
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(DirectDeclaratorEnd2)
      r1.extend(DirectDeclaratorEnd3)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i18, s18 = index, []
      if has_terminal?('[', false, index)
        r19 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('[')
        r19 = nil
      end
      s18 << r19
      if r19
        r21 = _nt_ws
        if r21
          r20 = r21
        else
          r20 = instantiate_node(SyntaxNode,input, index...index)
        end
        s18 << r20
        if r20
          if has_terminal?('static', false, index)
            r22 = instantiate_node(SyntaxNode,input, index...(index + 6))
            @index += 6
          else
            terminal_parse_failure('static')
            r22 = nil
          end
          s18 << r22
          if r22
            i23 = index
            if has_terminal?('\G[\\w]', true, index)
              r24 = true
              @index += 1
            else
              r24 = nil
            end
            if r24
              r23 = nil
            else
              @index = i23
              r23 = instantiate_node(SyntaxNode,input, index...index)
            end
            s18 << r23
            if r23
              r26 = _nt_ws
              if r26
                r25 = r26
              else
                r25 = instantiate_node(SyntaxNode,input, index...index)
              end
              s18 << r25
              if r25
                i28, s28 = index, []
                r29 = _nt_type_qualifier_list
                s28 << r29
                if r29
                  i30 = index
                  if has_terminal?('\G[\\w]', true, index)
                    r31 = true
                    @index += 1
                  else
                    r31 = nil
                  end
                  if r31
                    r30 = nil
                  else
                    @index = i30
                    r30 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s28 << r30
                  if r30
                    r33 = _nt_ws
                    if r33
                      r32 = r33
                    else
                      r32 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s28 << r32
                  end
                end
                if s28.last
                  r28 = instantiate_node(SyntaxNode,input, i28...index, s28)
                  r28.extend(DirectDeclaratorEnd4)
                else
                  @index = i28
                  r28 = nil
                end
                if r28
                  r27 = r28
                else
                  r27 = instantiate_node(SyntaxNode,input, index...index)
                end
                s18 << r27
                if r27
                  r34 = _nt_assignment_expression
                  s18 << r34
                  if r34
                    r36 = _nt_ws
                    if r36
                      r35 = r36
                    else
                      r35 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s18 << r35
                    if r35
                      if has_terminal?(']', false, index)
                        r37 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure(']')
                        r37 = nil
                      end
                      s18 << r37
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s18.last
        r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
        r18.extend(DirectDeclaratorEnd5)
        r18.extend(DirectDeclaratorEnd6)
      else
        @index = i18
        r18 = nil
      end
      if r18
        r0 = r18
      else
        i38, s38 = index, []
        if has_terminal?('[', false, index)
          r39 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('[')
          r39 = nil
        end
        s38 << r39
        if r39
          r41 = _nt_ws
          if r41
            r40 = r41
          else
            r40 = instantiate_node(SyntaxNode,input, index...index)
          end
          s38 << r40
          if r40
            r42 = _nt_type_qualifier_list
            s38 << r42
            if r42
              r43 = _nt_ws
              s38 << r43
              if r43
                if has_terminal?('static', false, index)
                  r44 = instantiate_node(SyntaxNode,input, index...(index + 6))
                  @index += 6
                else
                  terminal_parse_failure('static')
                  r44 = nil
                end
                s38 << r44
                if r44
                  i45 = index
                  if has_terminal?('\G[\\w]', true, index)
                    r46 = true
                    @index += 1
                  else
                    r46 = nil
                  end
                  if r46
                    r45 = nil
                  else
                    @index = i45
                    r45 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s38 << r45
                  if r45
                    r48 = _nt_ws
                    if r48
                      r47 = r48
                    else
                      r47 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s38 << r47
                    if r47
                      r49 = _nt_assignment_expression
                      s38 << r49
                      if r49
                        r51 = _nt_ws
                        if r51
                          r50 = r51
                        else
                          r50 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s38 << r50
                        if r50
                          if has_terminal?(']', false, index)
                            r52 = instantiate_node(SyntaxNode,input, index...(index + 1))
                            @index += 1
                          else
                            terminal_parse_failure(']')
                            r52 = nil
                          end
                          s38 << r52
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s38.last
          r38 = instantiate_node(SyntaxNode,input, i38...index, s38)
          r38.extend(DirectDeclaratorEnd7)
          r38.extend(DirectDeclaratorEnd8)
        else
          @index = i38
          r38 = nil
        end
        if r38
          r0 = r38
        else
          i53, s53 = index, []
          if has_terminal?('[', false, index)
            r54 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('[')
            r54 = nil
          end
          s53 << r54
          if r54
            r56 = _nt_ws
            if r56
              r55 = r56
            else
              r55 = instantiate_node(SyntaxNode,input, index...index)
            end
            s53 << r55
            if r55
              i58, s58 = index, []
              r59 = _nt_type_qualifier_list
              s58 << r59
              if r59
                r61 = _nt_ws
                if r61
                  r60 = r61
                else
                  r60 = instantiate_node(SyntaxNode,input, index...index)
                end
                s58 << r60
              end
              if s58.last
                r58 = instantiate_node(SyntaxNode,input, i58...index, s58)
                r58.extend(DirectDeclaratorEnd9)
              else
                @index = i58
                r58 = nil
              end
              if r58
                r57 = r58
              else
                r57 = instantiate_node(SyntaxNode,input, index...index)
              end
              s53 << r57
              if r57
                if has_terminal?('*', false, index)
                  r62 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('*')
                  r62 = nil
                end
                s53 << r62
                if r62
                  r64 = _nt_ws
                  if r64
                    r63 = r64
                  else
                    r63 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s53 << r63
                  if r63
                    if has_terminal?(']', false, index)
                      r65 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(']')
                      r65 = nil
                    end
                    s53 << r65
                  end
                end
              end
            end
          end
          if s53.last
            r53 = instantiate_node(SyntaxNode,input, i53...index, s53)
            r53.extend(DirectDeclaratorEnd10)
          else
            @index = i53
            r53 = nil
          end
          if r53
            r0 = r53
          else
            i66, s66 = index, []
            if has_terminal?('(', false, index)
              r67 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('(')
              r67 = nil
            end
            s66 << r67
            if r67
              r69 = _nt_ws
              if r69
                r68 = r69
              else
                r68 = instantiate_node(SyntaxNode,input, index...index)
              end
              s66 << r68
              if r68
                r70 = _nt_parameter_type_list
                s66 << r70
                if r70
                  r72 = _nt_ws
                  if r72
                    r71 = r72
                  else
                    r71 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s66 << r71
                  if r71
                    if has_terminal?(')', false, index)
                      r73 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(')')
                      r73 = nil
                    end
                    s66 << r73
                  end
                end
              end
            end
            if s66.last
              r66 = instantiate_node(SyntaxNode,input, i66...index, s66)
              r66.extend(DirectDeclaratorEnd11)
              r66.extend(DirectDeclaratorEnd12)
            else
              @index = i66
              r66 = nil
            end
            if r66
              r0 = r66
            else
              i74, s74 = index, []
              if has_terminal?('(', false, index)
                r75 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('(')
                r75 = nil
              end
              s74 << r75
              if r75
                r77 = _nt_ws
                if r77
                  r76 = r77
                else
                  r76 = instantiate_node(SyntaxNode,input, index...index)
                end
                s74 << r76
                if r76
                  i79, s79 = index, []
                  r80 = _nt_identifier_list
                  s79 << r80
                  if r80
                    r82 = _nt_ws
                    if r82
                      r81 = r82
                    else
                      r81 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s79 << r81
                  end
                  if s79.last
                    r79 = instantiate_node(SyntaxNode,input, i79...index, s79)
                    r79.extend(DirectDeclaratorEnd13)
                  else
                    @index = i79
                    r79 = nil
                  end
                  if r79
                    r78 = r79
                  else
                    r78 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s74 << r78
                  if r78
                    if has_terminal?(')', false, index)
                      r83 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(')')
                      r83 = nil
                    end
                    s74 << r83
                  end
                end
              end
              if s74.last
                r74 = instantiate_node(SyntaxNode,input, i74...index, s74)
                r74.extend(DirectDeclaratorEnd14)
                r74.extend(DirectDeclaratorEnd15)
              else
                @index = i74
                r74 = nil
              end
              if r74
                r0 = r74
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end
    end

    node_cache[:direct_declarator_end][start_index] = r0

    r0
  end

  module DirectDeclarator0
    def direct_declarator_end
      elements[1]
    end
  end

  module DirectDeclarator1
    def direct_declarator_start
      elements[0]
    end

  end

  module DirectDeclarator2
    def tree
      decl = direct_declarator_start.tree
      elements[1].each do |e|
        decl = e[1].tree decl
      end
      decl
    end
  end

  def _nt_direct_declarator
    start_index = index
    if node_cache[:direct_declarator].has_key?(index)
      cached = node_cache[:direct_declarator][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_direct_declarator_start
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r5 = _nt_ws
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          r6 = _nt_direct_declarator_end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(DirectDeclarator0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(DirectDeclarator1)
      r0.extend(DirectDeclarator2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:direct_declarator][start_index] = r0

    r0
  end

  module Pointer0
    def pointer
      elements[4]
    end
  end

  module Pointer1
  end

  def _nt_pointer
    start_index = index
    if node_cache[:pointer].has_key?(index)
      cached = node_cache[:pointer][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('*', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('*')
      r2 = nil
    end
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r6 = _nt_type_qualifier_list
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r5
        if r5
          r8 = _nt_ws
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r7
          if r7
            r9 = _nt_pointer
            s1 << r9
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Pointer0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i10, s10 = index, []
      if has_terminal?('*', false, index)
        r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('*')
        r11 = nil
      end
      s10 << r11
      if r11
        r13 = _nt_ws
        if r13
          r12 = r13
        else
          r12 = instantiate_node(SyntaxNode,input, index...index)
        end
        s10 << r12
        if r12
          r15 = _nt_type_qualifier_list
          if r15
            r14 = r15
          else
            r14 = instantiate_node(SyntaxNode,input, index...index)
          end
          s10 << r14
        end
      end
      if s10.last
        r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
        r10.extend(Pointer1)
      else
        @index = i10
        r10 = nil
      end
      if r10
        r0 = r10
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:pointer][start_index] = r0

    r0
  end

  module TypeQualifierList0
    def ws
      elements[0]
    end

    def type_qualifier
      elements[1]
    end
  end

  module TypeQualifierList1
    def type_qualifier
      elements[0]
    end

  end

  module TypeQualifierList2
    def tree
      [type_qualifier.tree].concat(elements[1].map {|e| e[1].tree})
    end
  end

  def _nt_type_qualifier_list
    start_index = index
    if node_cache[:type_qualifier_list].has_key?(index)
      cached = node_cache[:type_qualifier_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_type_qualifier
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r4 = _nt_ws
        s3 << r4
        if r4
          r5 = _nt_type_qualifier
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(TypeQualifierList0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TypeQualifierList1)
      r0.extend(TypeQualifierList2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:type_qualifier_list][start_index] = r0

    r0
  end

  module ParameterTypeList0
    def parameter_list
      elements[0]
    end

  end

  module ParameterTypeList1
    def tree
      parameter_list.tree << '...'
    end
  end

  def _nt_parameter_type_list
    start_index = index
    if node_cache[:parameter_type_list].has_key?(index)
      cached = node_cache[:parameter_type_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_parameter_list
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        if has_terminal?(',', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r5 = nil
        end
        s1 << r5
        if r5
          r7 = _nt_ws
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            if has_terminal?('...', false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 3))
              @index += 3
            else
              terminal_parse_failure('...')
              r8 = nil
            end
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(ParameterTypeList0)
      r1.extend(ParameterTypeList1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r9 = _nt_parameter_list
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:parameter_type_list][start_index] = r0

    r0
  end

  module ParameterList0
    def parameter_declaration
      elements[3]
    end
  end

  module ParameterList1
    def parameter_declaration
      elements[0]
    end

  end

  module ParameterList2
    def tree
      [parameter_declaration.tree].concat(elements[1].map {|e| e[3].tree})
    end
  end

  def _nt_parameter_list
    start_index = index
    if node_cache[:parameter_list].has_key?(index)
      cached = node_cache[:parameter_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_parameter_declaration
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r5 = _nt_ws
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if has_terminal?(',', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(',')
            r6 = nil
          end
          s3 << r6
          if r6
            r8 = _nt_ws
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r7
            if r7
              r9 = _nt_parameter_declaration
              s3 << r9
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(ParameterList0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ParameterList1)
      r0.extend(ParameterList2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:parameter_list][start_index] = r0

    r0
  end

  module ParameterDeclaration0
    def declaration_specifier
      elements[0]
    end

    def parameter_declaration
      elements[3]
    end
  end

  module ParameterDeclaration1
    def tree
      pd = parameter_declaration.tree
      pd.specifiers << declaration_specifier.tree
      pd
    end
  end

  module ParameterDeclaration2
    def declaration_specifier
      elements[0]
    end

  end

  module ParameterDeclaration3
    def tree
      specifiers = [declaration_specifier.tree]
      Coal::Nodes::ParameterDeclaration.new(specifiers, elements[3].tree)
    end
  end

  def _nt_parameter_declaration
    start_index = index
    if node_cache[:parameter_declaration].has_key?(index)
      cached = node_cache[:parameter_declaration][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_declaration_specifier
    s1 << r2
    if r2
      i3 = index
      if has_terminal?('\G[\\w]', true, index)
        r4 = true
        @index += 1
      else
        r4 = nil
      end
      if r4
        r3 = nil
      else
        @index = i3
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r6 = _nt_ws
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r5
        if r5
          r7 = _nt_parameter_declaration
          s1 << r7
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(ParameterDeclaration0)
      r1.extend(ParameterDeclaration1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i8, s8 = index, []
      r9 = _nt_declaration_specifier
      s8 << r9
      if r9
        i10 = index
        if has_terminal?('\G[\\w]', true, index)
          r11 = true
          @index += 1
        else
          r11 = nil
        end
        if r11
          r10 = nil
        else
          @index = i10
          r10 = instantiate_node(SyntaxNode,input, index...index)
        end
        s8 << r10
        if r10
          r13 = _nt_ws
          if r13
            r12 = r13
          else
            r12 = instantiate_node(SyntaxNode,input, index...index)
          end
          s8 << r12
          if r12
            i14 = index
            r15 = _nt_declarator
            if r15
              r14 = r15
            else
              r16 = _nt_abstract_declarator
              if r16
                r14 = r16
              else
                @index = i14
                r14 = nil
              end
            end
            s8 << r14
          end
        end
      end
      if s8.last
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        r8.extend(ParameterDeclaration2)
        r8.extend(ParameterDeclaration3)
      else
        @index = i8
        r8 = nil
      end
      if r8
        r0 = r8
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:parameter_declaration][start_index] = r0

    r0
  end

  module IdentifierList0
    def identifier
      elements[3]
    end
  end

  module IdentifierList1
    def identifier
      elements[0]
    end

  end

  module IdentifierList2
    def tree
      [identifier.tree].concat(elements[1].map {|e| e[3].tree})
    end
  end

  def _nt_identifier_list
    start_index = index
    if node_cache[:identifier_list].has_key?(index)
      cached = node_cache[:identifier_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_identifier
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r5 = _nt_ws
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if has_terminal?(',', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(',')
            r6 = nil
          end
          s3 << r6
          if r6
            r8 = _nt_ws
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r7
            if r7
              r9 = _nt_identifier
              s3 << r9
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(IdentifierList0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(IdentifierList1)
      r0.extend(IdentifierList2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:identifier_list][start_index] = r0

    r0
  end

  module TypeName0
    def specifier_qualifier_list
      elements[0]
    end

  end

  def _nt_type_name
    start_index = index
    if node_cache[:type_name].has_key?(index)
      cached = node_cache[:type_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_specifier_qualifier_list
    s0 << r1
    if r1
      r3 = _nt_ws
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r5 = _nt_abstract_declarator
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TypeName0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:type_name][start_index] = r0

    r0
  end

  module AbstractDeclarator0
    def pointer
      elements[0]
    end

    def direct_abstract_declarator
      elements[2]
    end
  end

  def _nt_abstract_declarator
    start_index = index
    if node_cache[:abstract_declarator].has_key?(index)
      cached = node_cache[:abstract_declarator][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_pointer
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_direct_abstract_declarator
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(AbstractDeclarator0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r6 = _nt_pointer
      if r6
        r0 = r6
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:abstract_declarator][start_index] = r0

    r0
  end

  module DirectAbstractDeclaratorStart0
    def abstract_declarator
      elements[2]
    end

  end

  def _nt_direct_abstract_declarator_start
    start_index = index
    if node_cache[:direct_abstract_declarator_start].has_key?(index)
      cached = node_cache[:direct_abstract_declarator_start][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('(', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r1 = nil
    end
    s0 << r1
    if r1
      r3 = _nt_ws
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r4 = _nt_abstract_declarator
        s0 << r4
        if r4
          r6 = _nt_ws
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
          if r5
            if has_terminal?(')', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(')')
              r7 = nil
            end
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(DirectAbstractDeclaratorStart0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:direct_abstract_declarator_start][start_index] = r0

    r0
  end

  module DirectAbstractDeclaratorEnd0
    def assignment_expression
      elements[2]
    end

  end

  module DirectAbstractDeclaratorEnd1
  end

  module DirectAbstractDeclaratorEnd2
    def parameter_type_list
      elements[0]
    end

  end

  module DirectAbstractDeclaratorEnd3
  end

  def _nt_direct_abstract_declarator_end
    start_index = index
    if node_cache[:direct_abstract_declarator_end].has_key?(index)
      cached = node_cache[:direct_abstract_declarator_end][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('[', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r2 = nil
    end
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_assignment_expression
        s1 << r5
        if r5
          r7 = _nt_ws
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            if has_terminal?(']', false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(']')
              r8 = nil
            end
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(DirectAbstractDeclaratorEnd0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i9, s9 = index, []
      if has_terminal?('[', false, index)
        r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('[')
        r10 = nil
      end
      s9 << r10
      if r10
        r12 = _nt_ws
        if r12
          r11 = r12
        else
          r11 = instantiate_node(SyntaxNode,input, index...index)
        end
        s9 << r11
        if r11
          if has_terminal?('*', false, index)
            r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('*')
            r13 = nil
          end
          s9 << r13
          if r13
            r15 = _nt_ws
            if r15
              r14 = r15
            else
              r14 = instantiate_node(SyntaxNode,input, index...index)
            end
            s9 << r14
            if r14
              if has_terminal?(']', false, index)
                r16 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(']')
                r16 = nil
              end
              s9 << r16
            end
          end
        end
      end
      if s9.last
        r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
        r9.extend(DirectAbstractDeclaratorEnd1)
      else
        @index = i9
        r9 = nil
      end
      if r9
        r0 = r9
      else
        i17, s17 = index, []
        if has_terminal?('(', false, index)
          r18 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r18 = nil
        end
        s17 << r18
        if r18
          r20 = _nt_ws
          if r20
            r19 = r20
          else
            r19 = instantiate_node(SyntaxNode,input, index...index)
          end
          s17 << r19
          if r19
            i22, s22 = index, []
            r23 = _nt_parameter_type_list
            s22 << r23
            if r23
              r25 = _nt_ws
              if r25
                r24 = r25
              else
                r24 = instantiate_node(SyntaxNode,input, index...index)
              end
              s22 << r24
            end
            if s22.last
              r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
              r22.extend(DirectAbstractDeclaratorEnd2)
            else
              @index = i22
              r22 = nil
            end
            if r22
              r21 = r22
            else
              r21 = instantiate_node(SyntaxNode,input, index...index)
            end
            s17 << r21
            if r21
              if has_terminal?(')', false, index)
                r26 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(')')
                r26 = nil
              end
              s17 << r26
            end
          end
        end
        if s17.last
          r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
          r17.extend(DirectAbstractDeclaratorEnd3)
        else
          @index = i17
          r17 = nil
        end
        if r17
          r0 = r17
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:direct_abstract_declarator_end][start_index] = r0

    r0
  end

  module DirectAbstractDeclarator0
    def direct_abstract_declarator_start
      elements[0]
    end

    def direct_abstract_declarator_end
      elements[2]
    end
  end

  def _nt_direct_abstract_declarator
    start_index = index
    if node_cache[:direct_abstract_declarator].has_key?(index)
      cached = node_cache[:direct_abstract_declarator][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_direct_abstract_declarator_start
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_direct_abstract_declarator_end
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(DirectAbstractDeclarator0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r6 = _nt_direct_abstract_declarator_start
      if r6
        r0 = r6
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:direct_abstract_declarator][start_index] = r0

    r0
  end

  def _nt_typedef_name
    start_index = index
    if node_cache[:typedef_name].has_key?(index)
      cached = node_cache[:typedef_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_identifier

    node_cache[:typedef_name][start_index] = r0

    r0
  end

  module Initializer0
  end

  module Initializer1
    def initializer_list
      elements[2]
    end

  end

  def _nt_initializer
    start_index = index
    if node_cache[:initializer].has_key?(index)
      cached = node_cache[:initializer][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('{', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('{')
      r2 = nil
    end
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_initializer_list
        s1 << r5
        if r5
          r7 = _nt_ws
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            i9, s9 = index, []
            if has_terminal?(',', false, index)
              r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(',')
              r10 = nil
            end
            s9 << r10
            if r10
              r12 = _nt_ws
              if r12
                r11 = r12
              else
                r11 = instantiate_node(SyntaxNode,input, index...index)
              end
              s9 << r11
            end
            if s9.last
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              r9.extend(Initializer0)
            else
              @index = i9
              r9 = nil
            end
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r8
            if r8
              if has_terminal?('}', false, index)
                r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('}')
                r13 = nil
              end
              s1 << r13
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Initializer1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r14 = _nt_assignment_expression
      if r14
        r0 = r14
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:initializer][start_index] = r0

    r0
  end

  module InitializerListItem0
    def designation
      elements[0]
    end

  end

  module InitializerListItem1
    def initializer
      elements[1]
    end
  end

  def _nt_initializer_list_item
    start_index = index
    if node_cache[:initializer_list_item].has_key?(index)
      cached = node_cache[:initializer_list_item][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2, s2 = index, []
    r3 = _nt_designation
    s2 << r3
    if r3
      r5 = _nt_ws
      if r5
        r4 = r5
      else
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s2 << r4
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(InitializerListItem0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r6 = _nt_initializer
      s0 << r6
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(InitializerListItem1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:initializer_list_item][start_index] = r0

    r0
  end

  module InitializerList0
    def initializer_list_item
      elements[3]
    end
  end

  module InitializerList1
    def initializer_list_item
      elements[0]
    end

  end

  def _nt_initializer_list
    start_index = index
    if node_cache[:initializer_list].has_key?(index)
      cached = node_cache[:initializer_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_initializer_list_item
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r5 = _nt_ws
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if has_terminal?(',', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(',')
            r6 = nil
          end
          s3 << r6
          if r6
            r8 = _nt_ws
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r7
            if r7
              r9 = _nt_initializer_list_item
              s3 << r9
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(InitializerList0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(InitializerList1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:initializer_list][start_index] = r0

    r0
  end

  module Designation0
    def designator_list
      elements[0]
    end

  end

  def _nt_designation
    start_index = index
    if node_cache[:designation].has_key?(index)
      cached = node_cache[:designation][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_designator_list
    s0 << r1
    if r1
      r3 = _nt_ws
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        if has_terminal?('=', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('=')
          r4 = nil
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Designation0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:designation][start_index] = r0

    r0
  end

  module DesignatorList0
    def designator
      elements[1]
    end
  end

  module DesignatorList1
    def designator
      elements[0]
    end

  end

  def _nt_designator_list
    start_index = index
    if node_cache[:designator_list].has_key?(index)
      cached = node_cache[:designator_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_designator
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r5 = _nt_ws
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          r6 = _nt_designator
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(DesignatorList0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(DesignatorList1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:designator_list][start_index] = r0

    r0
  end

  module Designator0
    def constant_expression
      elements[2]
    end

  end

  module Designator1
    def identifier
      elements[2]
    end
  end

  def _nt_designator
    start_index = index
    if node_cache[:designator].has_key?(index)
      cached = node_cache[:designator][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('[', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r2 = nil
    end
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_constant_expression
        s1 << r5
        if r5
          r7 = _nt_ws
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            if has_terminal?(']', false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(']')
              r8 = nil
            end
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Designator0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i9, s9 = index, []
      if has_terminal?('.', false, index)
        r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('.')
        r10 = nil
      end
      s9 << r10
      if r10
        r12 = _nt_ws
        if r12
          r11 = r12
        else
          r11 = instantiate_node(SyntaxNode,input, index...index)
        end
        s9 << r11
        if r11
          r13 = _nt_identifier
          s9 << r13
        end
      end
      if s9.last
        r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
        r9.extend(Designator1)
      else
        @index = i9
        r9 = nil
      end
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:designator][start_index] = r0

    r0
  end

  def _nt_statement
    start_index = index
    if node_cache[:statement].has_key?(index)
      cached = node_cache[:statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_labeled_statement
    if r1
      r0 = r1
    else
      r2 = _nt_compound_statement
      if r2
        r0 = r2
      else
        r3 = _nt_selection_statement
        if r3
          r0 = r3
        else
          r4 = _nt_iteration_statement
          if r4
            r0 = r4
          else
            r5 = _nt_jump_statement
            if r5
              r0 = r5
            else
              r6 = _nt_expression_statement
              if r6
                r0 = r6
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end
    end

    node_cache[:statement][start_index] = r0

    r0
  end

  module LabeledStatement0
    def constant_expression
      elements[3]
    end

    def statement
      elements[7]
    end
  end

  module LabeledStatement1
    def tree
      Coal::Nodes::CaseStatement.new(constant_expression.tree, statement.tree)
    end
  end

  module LabeledStatement2
    def statement
      elements[4]
    end
  end

  module LabeledStatement3
    def identifier
      elements[0]
    end

    def statement
      elements[4]
    end
  end

  def _nt_labeled_statement
    start_index = index
    if node_cache[:labeled_statement].has_key?(index)
      cached = node_cache[:labeled_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('case', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('case')
      r2 = nil
    end
    s1 << r2
    if r2
      i3 = index
      if has_terminal?('\G[\\w]', true, index)
        r4 = true
        @index += 1
      else
        r4 = nil
      end
      if r4
        r3 = nil
      else
        @index = i3
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r6 = _nt_ws
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r5
        if r5
          r7 = _nt_constant_expression
          s1 << r7
          if r7
            r9 = _nt_ws
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r8
            if r8
              if has_terminal?(':', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(':')
                r10 = nil
              end
              s1 << r10
              if r10
                r12 = _nt_ws
                if r12
                  r11 = r12
                else
                  r11 = instantiate_node(SyntaxNode,input, index...index)
                end
                s1 << r11
                if r11
                  r13 = _nt_statement
                  s1 << r13
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(LabeledStatement0)
      r1.extend(LabeledStatement1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i14, s14 = index, []
      if has_terminal?('default', false, index)
        r15 = instantiate_node(SyntaxNode,input, index...(index + 7))
        @index += 7
      else
        terminal_parse_failure('default')
        r15 = nil
      end
      s14 << r15
      if r15
        r17 = _nt_ws
        if r17
          r16 = r17
        else
          r16 = instantiate_node(SyntaxNode,input, index...index)
        end
        s14 << r16
        if r16
          if has_terminal?(':', false, index)
            r18 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(':')
            r18 = nil
          end
          s14 << r18
          if r18
            r20 = _nt_ws
            if r20
              r19 = r20
            else
              r19 = instantiate_node(SyntaxNode,input, index...index)
            end
            s14 << r19
            if r19
              r21 = _nt_statement
              s14 << r21
            end
          end
        end
      end
      if s14.last
        r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
        r14.extend(LabeledStatement2)
      else
        @index = i14
        r14 = nil
      end
      if r14
        r0 = r14
      else
        i22, s22 = index, []
        r23 = _nt_identifier
        s22 << r23
        if r23
          r25 = _nt_ws
          if r25
            r24 = r25
          else
            r24 = instantiate_node(SyntaxNode,input, index...index)
          end
          s22 << r24
          if r24
            if has_terminal?(':', false, index)
              r26 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(':')
              r26 = nil
            end
            s22 << r26
            if r26
              r28 = _nt_ws
              if r28
                r27 = r28
              else
                r27 = instantiate_node(SyntaxNode,input, index...index)
              end
              s22 << r27
              if r27
                r29 = _nt_statement
                s22 << r29
              end
            end
          end
        end
        if s22.last
          r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
          r22.extend(LabeledStatement3)
        else
          @index = i22
          r22 = nil
        end
        if r22
          r0 = r22
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:labeled_statement][start_index] = r0

    r0
  end

  module CompoundStatement0
    def block_item_list
      elements[0]
    end

  end

  module CompoundStatement1
  end

  module CompoundStatement2
    def tree
      elements[2].empty? ? [] : elements[2][0].tree
    end
  end

  def _nt_compound_statement
    start_index = index
    if node_cache[:compound_statement].has_key?(index)
      cached = node_cache[:compound_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('{', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('{')
      r1 = nil
    end
    s0 << r1
    if r1
      r3 = _nt_ws
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        i5, s5 = index, []
        r6 = _nt_block_item_list
        s5 << r6
        if r6
          r8 = _nt_ws
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s5 << r7
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(CompoundStatement0)
        else
          @index = i5
          r5 = nil
        end
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          if has_terminal?('}', false, index)
            r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('}')
            r9 = nil
          end
          s0 << r9
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CompoundStatement1)
      r0.extend(CompoundStatement2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:compound_statement][start_index] = r0

    r0
  end

  module BlockItemList0
    def block_item
      elements[1]
    end
  end

  module BlockItemList1
    def block_item
      elements[0]
    end

  end

  module BlockItemList2
    def tree
      arr = [block_item.tree]
      arr.concat(elements[1].map {|e| e[1].tree}) unless elements[1].empty?
      arr
    end
  end

  def _nt_block_item_list
    start_index = index
    if node_cache[:block_item_list].has_key?(index)
      cached = node_cache[:block_item_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_block_item
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r5 = _nt_ws
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          r6 = _nt_block_item
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(BlockItemList0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(BlockItemList1)
      r0.extend(BlockItemList2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:block_item_list][start_index] = r0

    r0
  end

  def _nt_block_item
    start_index = index
    if node_cache[:block_item].has_key?(index)
      cached = node_cache[:block_item][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_statement
    if r1
      r0 = r1
    else
      r2 = _nt_declaration
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:block_item][start_index] = r0

    r0
  end

  module ExpressionStatement0
    def expression
      elements[0]
    end

  end

  module ExpressionStatement1
  end

  module ExpressionStatement2
    def tree
      expr = elements[0].empty? ? nil : elements[0][0].tree
      Coal::Nodes::ExpressionStatement.new(expr)
    end
  end

  def _nt_expression_statement
    start_index = index
    if node_cache[:expression_statement].has_key?(index)
      cached = node_cache[:expression_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2, s2 = index, []
    r3 = _nt_expression
    s2 << r3
    if r3
      r5 = _nt_ws
      if r5
        r4 = r5
      else
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s2 << r4
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(ExpressionStatement0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if has_terminal?(';', false, index)
        r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(';')
        r6 = nil
      end
      s0 << r6
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ExpressionStatement1)
      r0.extend(ExpressionStatement2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:expression_statement][start_index] = r0

    r0
  end

  module SelectionStatement0
    def expression
      elements[4]
    end

    def statement1
      elements[8]
    end

    def statement2
      elements[12]
    end
  end

  module SelectionStatement1
    def tree
      cond = expression.tree
      Coal::Nodes::IfStatement.new(cond, elements[8].tree, elements[12].tree)
    end
  end

  module SelectionStatement2
    def expression
      elements[4]
    end

    def statement
      elements[8]
    end
  end

  module SelectionStatement3
    def tree
      cond = expression.tree
      Coal::Nodes::IfStatement.new(cond, statement.tree)
    end
  end

  module SelectionStatement4
    def expression
      elements[4]
    end

    def statement
      elements[8]
    end
  end

  def _nt_selection_statement
    start_index = index
    if node_cache[:selection_statement].has_key?(index)
      cached = node_cache[:selection_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('if', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('if')
      r2 = nil
    end
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        if has_terminal?('(', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r5 = nil
        end
        s1 << r5
        if r5
          r7 = _nt_ws
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_expression
            s1 << r8
            if r8
              r10 = _nt_ws
              if r10
                r9 = r10
              else
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s1 << r9
              if r9
                if has_terminal?(')', false, index)
                  r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(')')
                  r11 = nil
                end
                s1 << r11
                if r11
                  r13 = _nt_ws
                  if r13
                    r12 = r13
                  else
                    r12 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s1 << r12
                  if r12
                    r14 = _nt_statement
                    s1 << r14
                    if r14
                      r16 = _nt_ws
                      if r16
                        r15 = r16
                      else
                        r15 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s1 << r15
                      if r15
                        if has_terminal?('else', false, index)
                          r17 = instantiate_node(SyntaxNode,input, index...(index + 4))
                          @index += 4
                        else
                          terminal_parse_failure('else')
                          r17 = nil
                        end
                        s1 << r17
                        if r17
                          r19 = _nt_ws
                          if r19
                            r18 = r19
                          else
                            r18 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s1 << r18
                          if r18
                            r20 = _nt_statement
                            s1 << r20
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(SelectionStatement0)
      r1.extend(SelectionStatement1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i21, s21 = index, []
      if has_terminal?('if', false, index)
        r22 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('if')
        r22 = nil
      end
      s21 << r22
      if r22
        r24 = _nt_ws
        if r24
          r23 = r24
        else
          r23 = instantiate_node(SyntaxNode,input, index...index)
        end
        s21 << r23
        if r23
          if has_terminal?('(', false, index)
            r25 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('(')
            r25 = nil
          end
          s21 << r25
          if r25
            r27 = _nt_ws
            if r27
              r26 = r27
            else
              r26 = instantiate_node(SyntaxNode,input, index...index)
            end
            s21 << r26
            if r26
              r28 = _nt_expression
              s21 << r28
              if r28
                r30 = _nt_ws
                if r30
                  r29 = r30
                else
                  r29 = instantiate_node(SyntaxNode,input, index...index)
                end
                s21 << r29
                if r29
                  if has_terminal?(')', false, index)
                    r31 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(')')
                    r31 = nil
                  end
                  s21 << r31
                  if r31
                    r33 = _nt_ws
                    if r33
                      r32 = r33
                    else
                      r32 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s21 << r32
                    if r32
                      r34 = _nt_statement
                      s21 << r34
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s21.last
        r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
        r21.extend(SelectionStatement2)
        r21.extend(SelectionStatement3)
      else
        @index = i21
        r21 = nil
      end
      if r21
        r0 = r21
      else
        i35, s35 = index, []
        if has_terminal?('switch', false, index)
          r36 = instantiate_node(SyntaxNode,input, index...(index + 6))
          @index += 6
        else
          terminal_parse_failure('switch')
          r36 = nil
        end
        s35 << r36
        if r36
          r38 = _nt_ws
          if r38
            r37 = r38
          else
            r37 = instantiate_node(SyntaxNode,input, index...index)
          end
          s35 << r37
          if r37
            if has_terminal?('(', false, index)
              r39 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('(')
              r39 = nil
            end
            s35 << r39
            if r39
              r41 = _nt_ws
              if r41
                r40 = r41
              else
                r40 = instantiate_node(SyntaxNode,input, index...index)
              end
              s35 << r40
              if r40
                r42 = _nt_expression
                s35 << r42
                if r42
                  r44 = _nt_ws
                  if r44
                    r43 = r44
                  else
                    r43 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s35 << r43
                  if r43
                    if has_terminal?(')', false, index)
                      r45 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(')')
                      r45 = nil
                    end
                    s35 << r45
                    if r45
                      r47 = _nt_ws
                      if r47
                        r46 = r47
                      else
                        r46 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s35 << r46
                      if r46
                        r48 = _nt_statement
                        s35 << r48
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s35.last
          r35 = instantiate_node(SyntaxNode,input, i35...index, s35)
          r35.extend(SelectionStatement4)
        else
          @index = i35
          r35 = nil
        end
        if r35
          r0 = r35
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:selection_statement][start_index] = r0

    r0
  end

  module IterationStatement0
    def expression
      elements[4]
    end

    def statement
      elements[8]
    end
  end

  module IterationStatement1
    def tree
      Coal::Nodes::WhileLoop.new(expression.tree, statement.tree)
    end
  end

  module IterationStatement2
    def statement
      elements[3]
    end

    def expression
      elements[9]
    end

  end

  module IterationStatement3
    def tree
     Coal::Nodes::DoWhileLoop.new(expression.tree, statement.tree)
    end
  end

  module IterationStatement4
    def expression
      elements[0]
    end

  end

  module IterationStatement5
    def expression
      elements[0]
    end

  end

  module IterationStatement6
    def expression
      elements[0]
    end

  end

  module IterationStatement7
    def statement
      elements[13]
    end
  end

  module IterationStatement8
    def tree
      e = elements
      initializer = e[4].empty? ? nil : e[4][0].tree 
      condition = e[7].empty? ? nil : e[7][0].tree
      incrementer = e[10].empty? ? nil : e[10][0].tree
      Coal::Nodes::ForLoop.new(initializer, condition, incrementer, statement.tree)
    end
  end

  module IterationStatement9
    def expression
      elements[0]
    end

  end

  module IterationStatement10
    def expression
      elements[0]
    end

  end

  module IterationStatement11
    def declaration
      elements[4]
    end

    def statement
      elements[12]
    end
  end

  module IterationStatement12
    def tree
      e = elements
      initializer = declaration.tree 
      condition = e[6].empty? ? nil : e[6][0].tree
      incrementer = e[9].empty? ? nil : e[9][0].tree
      Coal::Nodes::ForLoop.new(initializer, condition, incrementer, statement.tree)
    end
  end

  def _nt_iteration_statement
    start_index = index
    if node_cache[:iteration_statement].has_key?(index)
      cached = node_cache[:iteration_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('while', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('while')
      r2 = nil
    end
    s1 << r2
    if r2
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        if has_terminal?('(', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r5 = nil
        end
        s1 << r5
        if r5
          r7 = _nt_ws
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_expression
            s1 << r8
            if r8
              r10 = _nt_ws
              if r10
                r9 = r10
              else
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s1 << r9
              if r9
                if has_terminal?(')', false, index)
                  r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(')')
                  r11 = nil
                end
                s1 << r11
                if r11
                  r13 = _nt_ws
                  if r13
                    r12 = r13
                  else
                    r12 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s1 << r12
                  if r12
                    r14 = _nt_statement
                    s1 << r14
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(IterationStatement0)
      r1.extend(IterationStatement1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i15, s15 = index, []
      if has_terminal?('do', false, index)
        r16 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('do')
        r16 = nil
      end
      s15 << r16
      if r16
        i17 = index
        if has_terminal?('\G[\\w]', true, index)
          r18 = true
          @index += 1
        else
          r18 = nil
        end
        if r18
          r17 = nil
        else
          @index = i17
          r17 = instantiate_node(SyntaxNode,input, index...index)
        end
        s15 << r17
        if r17
          r20 = _nt_ws
          if r20
            r19 = r20
          else
            r19 = instantiate_node(SyntaxNode,input, index...index)
          end
          s15 << r19
          if r19
            r21 = _nt_statement
            s15 << r21
            if r21
              r23 = _nt_ws
              if r23
                r22 = r23
              else
                r22 = instantiate_node(SyntaxNode,input, index...index)
              end
              s15 << r22
              if r22
                if has_terminal?('while', false, index)
                  r24 = instantiate_node(SyntaxNode,input, index...(index + 5))
                  @index += 5
                else
                  terminal_parse_failure('while')
                  r24 = nil
                end
                s15 << r24
                if r24
                  r26 = _nt_ws
                  if r26
                    r25 = r26
                  else
                    r25 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s15 << r25
                  if r25
                    if has_terminal?('(', false, index)
                      r27 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure('(')
                      r27 = nil
                    end
                    s15 << r27
                    if r27
                      r29 = _nt_ws
                      if r29
                        r28 = r29
                      else
                        r28 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s15 << r28
                      if r28
                        r30 = _nt_expression
                        s15 << r30
                        if r30
                          r32 = _nt_ws
                          if r32
                            r31 = r32
                          else
                            r31 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s15 << r31
                          if r31
                            if has_terminal?(')', false, index)
                              r33 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure(')')
                              r33 = nil
                            end
                            s15 << r33
                            if r33
                              r35 = _nt_ws
                              if r35
                                r34 = r35
                              else
                                r34 = instantiate_node(SyntaxNode,input, index...index)
                              end
                              s15 << r34
                              if r34
                                if has_terminal?(';', false, index)
                                  r36 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                  @index += 1
                                else
                                  terminal_parse_failure(';')
                                  r36 = nil
                                end
                                s15 << r36
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s15.last
        r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
        r15.extend(IterationStatement2)
        r15.extend(IterationStatement3)
      else
        @index = i15
        r15 = nil
      end
      if r15
        r0 = r15
      else
        i37, s37 = index, []
        if has_terminal?('for', false, index)
          r38 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure('for')
          r38 = nil
        end
        s37 << r38
        if r38
          r40 = _nt_ws
          if r40
            r39 = r40
          else
            r39 = instantiate_node(SyntaxNode,input, index...index)
          end
          s37 << r39
          if r39
            if has_terminal?('(', false, index)
              r41 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('(')
              r41 = nil
            end
            s37 << r41
            if r41
              r43 = _nt_ws
              if r43
                r42 = r43
              else
                r42 = instantiate_node(SyntaxNode,input, index...index)
              end
              s37 << r42
              if r42
                i45, s45 = index, []
                r46 = _nt_expression
                s45 << r46
                if r46
                  r48 = _nt_ws
                  if r48
                    r47 = r48
                  else
                    r47 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s45 << r47
                end
                if s45.last
                  r45 = instantiate_node(SyntaxNode,input, i45...index, s45)
                  r45.extend(IterationStatement4)
                else
                  @index = i45
                  r45 = nil
                end
                if r45
                  r44 = r45
                else
                  r44 = instantiate_node(SyntaxNode,input, index...index)
                end
                s37 << r44
                if r44
                  if has_terminal?(';', false, index)
                    r49 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(';')
                    r49 = nil
                  end
                  s37 << r49
                  if r49
                    r51 = _nt_ws
                    if r51
                      r50 = r51
                    else
                      r50 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s37 << r50
                    if r50
                      i53, s53 = index, []
                      r54 = _nt_expression
                      s53 << r54
                      if r54
                        r56 = _nt_ws
                        if r56
                          r55 = r56
                        else
                          r55 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s53 << r55
                      end
                      if s53.last
                        r53 = instantiate_node(SyntaxNode,input, i53...index, s53)
                        r53.extend(IterationStatement5)
                      else
                        @index = i53
                        r53 = nil
                      end
                      if r53
                        r52 = r53
                      else
                        r52 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s37 << r52
                      if r52
                        if has_terminal?(';', false, index)
                          r57 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure(';')
                          r57 = nil
                        end
                        s37 << r57
                        if r57
                          r59 = _nt_ws
                          if r59
                            r58 = r59
                          else
                            r58 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s37 << r58
                          if r58
                            i61, s61 = index, []
                            r62 = _nt_expression
                            s61 << r62
                            if r62
                              r64 = _nt_ws
                              if r64
                                r63 = r64
                              else
                                r63 = instantiate_node(SyntaxNode,input, index...index)
                              end
                              s61 << r63
                            end
                            if s61.last
                              r61 = instantiate_node(SyntaxNode,input, i61...index, s61)
                              r61.extend(IterationStatement6)
                            else
                              @index = i61
                              r61 = nil
                            end
                            if r61
                              r60 = r61
                            else
                              r60 = instantiate_node(SyntaxNode,input, index...index)
                            end
                            s37 << r60
                            if r60
                              if has_terminal?(')', false, index)
                                r65 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                @index += 1
                              else
                                terminal_parse_failure(')')
                                r65 = nil
                              end
                              s37 << r65
                              if r65
                                r67 = _nt_ws
                                if r67
                                  r66 = r67
                                else
                                  r66 = instantiate_node(SyntaxNode,input, index...index)
                                end
                                s37 << r66
                                if r66
                                  r68 = _nt_statement
                                  s37 << r68
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s37.last
          r37 = instantiate_node(SyntaxNode,input, i37...index, s37)
          r37.extend(IterationStatement7)
          r37.extend(IterationStatement8)
        else
          @index = i37
          r37 = nil
        end
        if r37
          r0 = r37
        else
          i69, s69 = index, []
          if has_terminal?('for', false, index)
            r70 = instantiate_node(SyntaxNode,input, index...(index + 3))
            @index += 3
          else
            terminal_parse_failure('for')
            r70 = nil
          end
          s69 << r70
          if r70
            r72 = _nt_ws
            if r72
              r71 = r72
            else
              r71 = instantiate_node(SyntaxNode,input, index...index)
            end
            s69 << r71
            if r71
              if has_terminal?('(', false, index)
                r73 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('(')
                r73 = nil
              end
              s69 << r73
              if r73
                r75 = _nt_ws
                if r75
                  r74 = r75
                else
                  r74 = instantiate_node(SyntaxNode,input, index...index)
                end
                s69 << r74
                if r74
                  r76 = _nt_declaration
                  s69 << r76
                  if r76
                    r78 = _nt_ws
                    if r78
                      r77 = r78
                    else
                      r77 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s69 << r77
                    if r77
                      i80, s80 = index, []
                      r81 = _nt_expression
                      s80 << r81
                      if r81
                        r83 = _nt_ws
                        if r83
                          r82 = r83
                        else
                          r82 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s80 << r82
                      end
                      if s80.last
                        r80 = instantiate_node(SyntaxNode,input, i80...index, s80)
                        r80.extend(IterationStatement9)
                      else
                        @index = i80
                        r80 = nil
                      end
                      if r80
                        r79 = r80
                      else
                        r79 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s69 << r79
                      if r79
                        if has_terminal?(';', false, index)
                          r84 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure(';')
                          r84 = nil
                        end
                        s69 << r84
                        if r84
                          r86 = _nt_ws
                          if r86
                            r85 = r86
                          else
                            r85 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s69 << r85
                          if r85
                            i88, s88 = index, []
                            r89 = _nt_expression
                            s88 << r89
                            if r89
                              r91 = _nt_ws
                              if r91
                                r90 = r91
                              else
                                r90 = instantiate_node(SyntaxNode,input, index...index)
                              end
                              s88 << r90
                            end
                            if s88.last
                              r88 = instantiate_node(SyntaxNode,input, i88...index, s88)
                              r88.extend(IterationStatement10)
                            else
                              @index = i88
                              r88 = nil
                            end
                            if r88
                              r87 = r88
                            else
                              r87 = instantiate_node(SyntaxNode,input, index...index)
                            end
                            s69 << r87
                            if r87
                              if has_terminal?(')', false, index)
                                r92 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                @index += 1
                              else
                                terminal_parse_failure(')')
                                r92 = nil
                              end
                              s69 << r92
                              if r92
                                r94 = _nt_ws
                                if r94
                                  r93 = r94
                                else
                                  r93 = instantiate_node(SyntaxNode,input, index...index)
                                end
                                s69 << r93
                                if r93
                                  r95 = _nt_statement
                                  s69 << r95
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
          if s69.last
            r69 = instantiate_node(SyntaxNode,input, i69...index, s69)
            r69.extend(IterationStatement11)
            r69.extend(IterationStatement12)
          else
            @index = i69
            r69 = nil
          end
          if r69
            r0 = r69
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:iteration_statement][start_index] = r0

    r0
  end

  module JumpStatement0
    def ws
      elements[1]
    end

    def identifier
      elements[2]
    end

  end

  module JumpStatement1
    def tree
      Coal::Nodes::GoToStatement.new(identifier.tree)
    end
  end

  module JumpStatement2
  end

  module JumpStatement3
    def tree
      Coal::Nodes::ContinueStatement.new(identifier.tree)
    end
  end

  module JumpStatement4
  end

  module JumpStatement5
    def tree
      Coal::Nodes::BreakStatement.new(identifier.tree)
    end
  end

  module JumpStatement6
    def expression
      elements[0]
    end

  end

  module JumpStatement7
  end

  module JumpStatement8
    def tree
      if elements[2].empty?
        Coal::Nodes::ReturnStatement.new
      else
        Coal::Nodes::ReturnStatement.new(elements[3][0].tree)
      end
    end
  end

  def _nt_jump_statement
    start_index = index
    if node_cache[:jump_statement].has_key?(index)
      cached = node_cache[:jump_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('goto', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('goto')
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_ws
      s1 << r3
      if r3
        r4 = _nt_identifier
        s1 << r4
        if r4
          r6 = _nt_ws
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r5
          if r5
            if has_terminal?(';', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(';')
              r7 = nil
            end
            s1 << r7
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(JumpStatement0)
      r1.extend(JumpStatement1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i8, s8 = index, []
      if has_terminal?('continue', false, index)
        r9 = instantiate_node(SyntaxNode,input, index...(index + 8))
        @index += 8
      else
        terminal_parse_failure('continue')
        r9 = nil
      end
      s8 << r9
      if r9
        r11 = _nt_ws
        if r11
          r10 = r11
        else
          r10 = instantiate_node(SyntaxNode,input, index...index)
        end
        s8 << r10
        if r10
          if has_terminal?(';', false, index)
            r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(';')
            r12 = nil
          end
          s8 << r12
        end
      end
      if s8.last
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        r8.extend(JumpStatement2)
        r8.extend(JumpStatement3)
      else
        @index = i8
        r8 = nil
      end
      if r8
        r0 = r8
      else
        i13, s13 = index, []
        if has_terminal?('break', false, index)
          r14 = instantiate_node(SyntaxNode,input, index...(index + 5))
          @index += 5
        else
          terminal_parse_failure('break')
          r14 = nil
        end
        s13 << r14
        if r14
          r16 = _nt_ws
          if r16
            r15 = r16
          else
            r15 = instantiate_node(SyntaxNode,input, index...index)
          end
          s13 << r15
          if r15
            if has_terminal?(';', false, index)
              r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(';')
              r17 = nil
            end
            s13 << r17
          end
        end
        if s13.last
          r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
          r13.extend(JumpStatement4)
          r13.extend(JumpStatement5)
        else
          @index = i13
          r13 = nil
        end
        if r13
          r0 = r13
        else
          i18, s18 = index, []
          if has_terminal?('return', false, index)
            r19 = instantiate_node(SyntaxNode,input, index...(index + 6))
            @index += 6
          else
            terminal_parse_failure('return')
            r19 = nil
          end
          s18 << r19
          if r19
            i20 = index
            if has_terminal?('\G[\\w]', true, index)
              r21 = true
              @index += 1
            else
              r21 = nil
            end
            if r21
              r20 = nil
            else
              @index = i20
              r20 = instantiate_node(SyntaxNode,input, index...index)
            end
            s18 << r20
            if r20
              r23 = _nt_ws
              if r23
                r22 = r23
              else
                r22 = instantiate_node(SyntaxNode,input, index...index)
              end
              s18 << r22
              if r22
                i25, s25 = index, []
                r26 = _nt_expression
                s25 << r26
                if r26
                  r28 = _nt_ws
                  if r28
                    r27 = r28
                  else
                    r27 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s25 << r27
                end
                if s25.last
                  r25 = instantiate_node(SyntaxNode,input, i25...index, s25)
                  r25.extend(JumpStatement6)
                else
                  @index = i25
                  r25 = nil
                end
                if r25
                  r24 = r25
                else
                  r24 = instantiate_node(SyntaxNode,input, index...index)
                end
                s18 << r24
                if r24
                  if has_terminal?(';', false, index)
                    r29 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(';')
                    r29 = nil
                  end
                  s18 << r29
                end
              end
            end
          end
          if s18.last
            r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
            r18.extend(JumpStatement7)
            r18.extend(JumpStatement8)
          else
            @index = i18
            r18 = nil
          end
          if r18
            r0 = r18
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:jump_statement][start_index] = r0

    r0
  end

  module TranslationUnit0
    def external_declaration
      elements[1]
    end
  end

  module TranslationUnit1
    def external_declaration
      elements[0]
    end

  end

  module TranslationUnit2
    def tree
      [external_declaration.tree].concat(elements[1].map {|e| e[1].tree})
    end
  end

  def _nt_translation_unit
    start_index = index
    if node_cache[:translation_unit].has_key?(index)
      cached = node_cache[:translation_unit][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_external_declaration
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r5 = _nt_ws
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          r6 = _nt_external_declaration
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(TranslationUnit0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TranslationUnit1)
      r0.extend(TranslationUnit2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:translation_unit][start_index] = r0

    r0
  end

  def _nt_external_declaration
    start_index = index
    if node_cache[:external_declaration].has_key?(index)
      cached = node_cache[:external_declaration][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_function_definition
    if r1
      r0 = r1
    else
      r2 = _nt_declaration
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:external_declaration][start_index] = r0

    r0
  end

  module FunctionDefinitionStart0
    def declaration_specifier
      elements[0]
    end

    def function_definition_start
      elements[3]
    end
  end

  module FunctionDefinitionStart1
    def tree
      arr = function_definition_start.tree
      arr[0] << declaration_specifier.tree
      arr
    end
  end

  module FunctionDefinitionStart2
    def declaration_specifier
      elements[0]
    end

    def declarator
      elements[3]
    end
  end

  module FunctionDefinitionStart3
    def tree
      [[declaration_specifier.tree], declarator.tree]
    end
  end

  def _nt_function_definition_start
    start_index = index
    if node_cache[:function_definition_start].has_key?(index)
      cached = node_cache[:function_definition_start][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_declaration_specifier
    s1 << r2
    if r2
      i3 = index
      if has_terminal?('\G[\\w]', true, index)
        r4 = true
        @index += 1
      else
        r4 = nil
      end
      if r4
        r3 = nil
      else
        @index = i3
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r6 = _nt_ws
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r5
        if r5
          r7 = _nt_function_definition_start
          s1 << r7
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(FunctionDefinitionStart0)
      r1.extend(FunctionDefinitionStart1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i8, s8 = index, []
      r9 = _nt_declaration_specifier
      s8 << r9
      if r9
        i10 = index
        if has_terminal?('\G[\\w]', true, index)
          r11 = true
          @index += 1
        else
          r11 = nil
        end
        if r11
          r10 = nil
        else
          @index = i10
          r10 = instantiate_node(SyntaxNode,input, index...index)
        end
        s8 << r10
        if r10
          r13 = _nt_ws
          if r13
            r12 = r13
          else
            r12 = instantiate_node(SyntaxNode,input, index...index)
          end
          s8 << r12
          if r12
            r14 = _nt_declarator
            s8 << r14
          end
        end
      end
      if s8.last
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        r8.extend(FunctionDefinitionStart2)
        r8.extend(FunctionDefinitionStart3)
      else
        @index = i8
        r8 = nil
      end
      if r8
        r0 = r8
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:function_definition_start][start_index] = r0

    r0
  end

  module FunctionDefinition0
    def declaration_list
      elements[0]
    end

  end

  module FunctionDefinition1
    def function_definition_start
      elements[0]
    end

    def compound_statement
      elements[4]
    end
  end

  module FunctionDefinition2
    def tree
      specs, declarator = *function_definition_start.tree
      decls = elements[3].empty? ? [] : elements[3][0].tree
      statement = compound_statement.tree
      Coal::Nodes::FunctionDefinition.new(specs, declarator, decls, statement)
    end
  end

  def _nt_function_definition
    start_index = index
    if node_cache[:function_definition].has_key?(index)
      cached = node_cache[:function_definition][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_function_definition_start
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('\G[\\w]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r5 = _nt_ws
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          i7, s7 = index, []
          r8 = _nt_declaration_list
          s7 << r8
          if r8
            r10 = _nt_ws
            if r10
              r9 = r10
            else
              r9 = instantiate_node(SyntaxNode,input, index...index)
            end
            s7 << r9
          end
          if s7.last
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            r7.extend(FunctionDefinition0)
          else
            @index = i7
            r7 = nil
          end
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r6
          if r6
            r11 = _nt_compound_statement
            s0 << r11
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FunctionDefinition1)
      r0.extend(FunctionDefinition2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:function_definition][start_index] = r0

    r0
  end

  module DeclarationList0
    def declaration
      elements[1]
    end
  end

  module DeclarationList1
    def declaration
      elements[0]
    end

  end

  module DeclarationList2
    def tree
      [declaration.tree].concat(elements[1].map {|e| e[1].tree})
    end
  end

  def _nt_declaration_list
    start_index = index
    if node_cache[:declaration_list].has_key?(index)
      cached = node_cache[:declaration_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_declaration
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r5 = _nt_ws
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          r6 = _nt_declaration
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(DeclarationList0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(DeclarationList1)
      r0.extend(DeclarationList2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:declaration_list][start_index] = r0

    r0
  end

  def _nt_gap
    start_index = index
    if node_cache[:gap].has_key?(index)
      cached = node_cache[:gap][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[\\t ]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:gap][start_index] = r0

    r0
  end

  def _nt_preprocessing_token
    start_index = index
    if node_cache[:preprocessing_token].has_key?(index)
      cached = node_cache[:preprocessing_token][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_header_name
    if r1
      r0 = r1
    else
      r2 = _nt_identifier
      if r2
        r0 = r2
      else
        r3 = _nt_character_constant
        if r3
          r0 = r3
        else
          r4 = _nt_string_literal
          if r4
            r0 = r4
          else
            if has_terminal?('\G[^\\s]', true, index)
              r5 = true
              @index += 1
            else
              r5 = nil
            end
            if r5
              r0 = r5
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:preprocessing_token][start_index] = r0

    r0
  end

  module HeaderName0
  end

  module HeaderName1
    def tree
      Coal::Nodes::AngledHeaderName.new(elements[2].text_value)
    end
  end

  module HeaderName2
  end

  module HeaderName3
    #'
         def tree
           Coal::Nodes::QuotedHeaderName.new(elements[2].text_value)
         end
  end

  def _nt_header_name
    start_index = index
    if node_cache[:header_name].has_key?(index)
      cached = node_cache[:header_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('<', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('<')
      r2 = nil
    end
    s1 << r2
    if r2
      r4 = _nt_gap
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        s5, i5 = [], index
        loop do
          if has_terminal?('\G[^>]', true, index)
            r6 = true
            @index += 1
          else
            r6 = nil
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        if s5.empty?
          @index = i5
          r5 = nil
        else
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        end
        s1 << r5
        if r5
          r8 = _nt_gap
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r7
          if r7
            if has_terminal?('>', false, index)
              r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('>')
              r9 = nil
            end
            s1 << r9
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(HeaderName0)
      r1.extend(HeaderName1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i10, s10 = index, []
      if has_terminal?('"', false, index)
        r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('"')
        r11 = nil
      end
      s10 << r11
      if r11
        r13 = _nt_gap
        if r13
          r12 = r13
        else
          r12 = instantiate_node(SyntaxNode,input, index...index)
        end
        s10 << r12
        if r12
          s14, i14 = [], index
          loop do
            if has_terminal?('\G[^"]', true, index)
              r15 = true
              @index += 1
            else
              r15 = nil
            end
            if r15
              s14 << r15
            else
              break
            end
          end
          if s14.empty?
            @index = i14
            r14 = nil
          else
            r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
          end
          s10 << r14
          if r14
            r17 = _nt_gap
            if r17
              r16 = r17
            else
              r16 = instantiate_node(SyntaxNode,input, index...index)
            end
            s10 << r16
            if r16
              if has_terminal?('"', false, index)
                r18 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('"')
                r18 = nil
              end
              s10 << r18
            end
          end
        end
      end
      if s10.last
        r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
        r10.extend(HeaderName2)
        r10.extend(HeaderName3)
      else
        @index = i10
        r10 = nil
      end
      if r10
        r0 = r10
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:header_name][start_index] = r0

    r0
  end

  module PreprocessingFile0
    def group
      elements[0]
    end

  end

  module PreprocessingFile1
  end

  module PreprocessingFile2
    def tree
      elements[1].empty? ? [] : elements[1][0].tree
    end
  end

  def _nt_preprocessing_file
    start_index = index
    if node_cache[:preprocessing_file].has_key?(index)
      cached = node_cache[:preprocessing_file][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_ws
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      i4, s4 = index, []
      r5 = _nt_group
      s4 << r5
      if r5
        r7 = _nt_ws
        if r7
          r6 = r7
        else
          r6 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r6
      end
      if s4.last
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        r4.extend(PreprocessingFile0)
      else
        @index = i4
        r4 = nil
      end
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(PreprocessingFile1)
      r0.extend(PreprocessingFile2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:preprocessing_file][start_index] = r0

    r0
  end

  module Group0
    def group_part
      elements[1]
    end
  end

  module Group1
    def group_part
      elements[0]
    end

  end

  module Group2
    def tree
      [group_part.tree].concat(elements[1].map {|e| e[1].tree})
    end
  end

  def _nt_group
    start_index = index
    if node_cache[:group].has_key?(index)
      cached = node_cache[:group][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_group_part
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r5 = _nt_ws
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          r6 = _nt_group_part
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Group0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Group1)
      r0.extend(Group2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:group][start_index] = r0

    r0
  end

  def _nt_group_part
    start_index = index
    if node_cache[:group_part].has_key?(index)
      cached = node_cache[:group_part][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_control_line
    if r1
      r0 = r1
    else
      r2 = _nt_text_line
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:group_part][start_index] = r0

    r0
  end

  module ControlLine0
    def pp_tokens
      elements[4]
    end

  end

  module ControlLine1
    def tree
      Coal::Nodes::IncludeDirective.new(pp_tokens.tree)
    end
  end

  def _nt_control_line
    start_index = index
    if node_cache[:control_line].has_key?(index)
      cached = node_cache[:control_line][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('#', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('#')
      r1 = nil
    end
    s0 << r1
    if r1
      r3 = _nt_gap
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        if has_terminal?('include', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 7))
          @index += 7
        else
          terminal_parse_failure('include')
          r4 = nil
        end
        s0 << r4
        if r4
          r6 = _nt_gap
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
          if r5
            r7 = _nt_pp_tokens
            s0 << r7
            if r7
              r9 = _nt_gap
              if r9
                r8 = r9
              else
                r8 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r8
              if r8
                if has_terminal?("\n", false, index)
                  r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("\n")
                  r10 = nil
                end
                s0 << r10
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ControlLine0)
      r0.extend(ControlLine1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:control_line][start_index] = r0

    r0
  end

  module TextLine0
    def pp_tokens
      elements[0]
    end

  end

  module TextLine1
    def tree
      text_value
    end
  end

  def _nt_text_line
    start_index = index
    if node_cache[:text_line].has_key?(index)
      cached = node_cache[:text_line][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_pp_tokens
    s0 << r1
    if r1
      r3 = _nt_gap
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        if has_terminal?("\n", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\n")
          r4 = nil
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TextLine0)
      r0.extend(TextLine1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:text_line][start_index] = r0

    r0
  end

  module PpTokens0
    def preprocessing_token
      elements[1]
    end
  end

  module PpTokens1
    def preprocessing_token
      elements[0]
    end

  end

  module PpTokens2
    def tree
      [preprocessing_token.tree].concat(elements[1].map {|e| e[1].tree})
    end
  end

  def _nt_pp_tokens
    start_index = index
    if node_cache[:pp_tokens].has_key?(index)
      cached = node_cache[:pp_tokens][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_preprocessing_token
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r5 = _nt_gap
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          r6 = _nt_preprocessing_token
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(PpTokens0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(PpTokens1)
      r0.extend(PpTokens2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:pp_tokens][start_index] = r0

    r0
  end

end

class CParser < Treetop::Runtime::CompiledParser
  include C
end



grammar C
  # Rule for parsing a C file *after* preprocessing
  rule c_file
    ws? (translation_unit ws?)? {
      def tree
        elements[1].empty? ? [] : elements[1][0].tree
      end
    }
  end
  
  rule ws
    ([\s] / multiline_comment / single_line_comment)+
  end
  
  rule single_line_comment
    '//' (!"\n" .)+
  end

  rule multiline_comment
    '/*' (!'*/' .)* '*/'
  end
  
  ## Identifiers
  
  rule identifier
    [a-zA-Z_] [\w]* {
      def tree
        Coal::Nodes::Identifier.new(text_value)
      end
    }
  end
  
  ## Constants
  
  rule constant
    floating_constant
    / integer_constant
    / enumeration_constant
    / character_constant
  end
  
  rule integer_constant
    decimal_constant integer_suffix? {
      def tree
        suffix = elements[1].empty? ? [] : elements[1].tree
        Coal::Nodes::IntegerConstant.new(decimal_constant.tree, 10, suffix)
      end
    }
    /
    hexadecimal_constant integer_suffix? {
      def tree
        suffix = elements[1].empty? ? [] : elements[1].tree
        Coal::Nodes::IntegerConstant.new(hexadecimal_constant.tree, 16, suffix)
      end
    }
    /
    octal_constant integer_suffix? {
      def tree
        suffix = elements[1].empty? ? [] : elements[1].tree
        Coal::Nodes::IntegerConstant.new(octal_constant.tree, 8, suffix)
      end
    }
  end
  
  rule decimal_constant
    [1-9] [\d]* {
      def tree
        text_value.to_i
      end
    }
  end
  
  rule octal_constant
    '0' [0-7]* {
      def tree
        text_value.to_i(8)
      end
    }
  end
  
  rule hexadecimal_constant
    '0' [xX] [\da-fA-F]+ {
      def tree
        text_value.to_i(16)
      end
    }
  end
  
  rule integer_suffix
    ( [uU] [lL]? [lL]? / [lL] [lL]? [uU]? ) {
      def tree
        suffix = []
        str = text_value.downcase
        if str.include? 'll'
          suffix << 'll'
        elsif str.include? 'l'
          suffix << 'l'
        end
        if str.include? 'u'
          suffix << 'u'
        end
        suffix
      end
    }
  end
  
  rule floating_constant
    hexadecimal_floating_constant
    /
    decimal_floating_constant
  end
  
  rule decimal_floating_constant
    (
      fractional_constant exponent_part? [fFlL]?
      /
      [\d]+ exponent_part [fFlL]?
    ) {
      def tree
        suffix = elements[2].empty? ? [] : [elements[2].text_value]
        guts = suffix.empty? ? text_value : text_value.chop
        Coal::Nodes::FloatingConstant.new(guts.to_f, 10, suffix)
      end
    }
  end
  
  rule fractional_constant
    [\d]* '.' [\d]+
    /
    [\d]+ '.'
  end
  
  rule exponent_part
    [eE] [+-]? [\d]+
  end
  
  rule hexadecimal_floating_constant
    '0' [xX] (hexadecimal_fractional_constant / [\da-fA-F]+) binary_exponent_part [fFlL]? {
      def tree
        a, b = *elements[2].text_value.split('.')
        value = a.to_i(16)
        value += b.to_i(16).to_f / 16 ** b.size if b
        bin_exp = elements[3].text_value[1..-1].to_i
        value *= 2.0 ** bin_exp
        suffix = elements[2].empty? ? [] : [elements[2].text_value]
        Coal::Nodes::FloatingConstant.new(value, 16, suffix)
      end
    }
  end
  
  rule hexadecimal_fractional_constant
    [\da-fA-F]* '.' [\da-fA-F]+
    / [\da-fA-F]+ '.'
  end
  
  rule binary_exponent_part
    [pP] [+-]? [\d]+
  end
  
  rule enumeration_constant
    identifier
  end
  
  rule character_constant
    'L'? '\'' ([^'\\\n] / escape_sequence)+ '\'' {
      def tree
        value = nil
        wide = !elements[0].empty?
        guts = elements[2][0]
        if guts.respond_to? :tree
          value = guts.tree
        else
          value = guts.text_value[0]
        end
        Coal::Nodes::CharacterConstant.new(value, wide)
      end
    }
  end
  
  rule escape_sequence
    '\\' ['"\?\\abfnrtv] {
      def tree
        {
          '\''  => 39,
          '"'   => 34,
          '?'   => 63,
          '\\'  => 92,
          'a'   => 7,
          'b'   => 8,
          'f'   => 12,
          'n'   => 10,
          'r'   => 13,
          't'   => 9,
          'v'   => 11,
        }[elements[1].text_value]
      end
    }
    /
    '\\' [0-7] [0-7]? [0-7]? {
      def tree
        text_value[1..-1].to_i(16)
      end
    }
    /
    '\\x' [\da-fA-F]+ {
      def tree
        text_value.to_i(8)
      end
    }
  end
  
  ## String literals
  
  rule string_literal
    'L'? '"' ([^"\\\n] / escape_sequence)* '"' { #'
      def tree
        value = nil
        wide = !elements[0].empty?
        guts = elements[2]
        if guts.empty?
          value = ""
        else
          arr = guts.map do |chr|
            if chr.respond_to? :tree
              chr.tree
            else
              chr.text_value[0]
            end
          end
          value = arr.pack('c*')
        end
        Coal::Nodes::StringLiteral.new(value, wide)
      end
    }
  end
  
  ## Expressions
  
  rule primary_expression
    identifier
    /
    constant
    /
    string_literal
    /
    '(' ws? expression ws? ')' {
      def tree
        expression.tree
      end
    }
  end
  
  rule postfix_expression_start
    '(' ws? type_name ws? ')' ws? '{' ws? initializer_list ws? (',' ws?)? '}'
    /
    primary_expression
  end
  
  rule postfix_expression_end
    '(' ws? (argument_expression_list ws?)? ')' {
      def tree(operand)
        args = elements[2].empty? ? [] : elements[2][0].tree
        Coal::Nodes::FunctionCall.new(operand, args)
      end
    }
    /
    '.' ws? identifier {
      def tree(operand)
        Coal::Nodes::StructMember.new(operand, identifier.tree, true)
      end
    }
    /
    '->' ws? identifier {
      def tree(operand)
        Coal::Nodes::StructMember.new(operand, identifier.tree, false)
      end
    }
    /
    '++' {
      def tree(operand)
        Coal::Nodes::PostfixIncrement.new(operand)
      end
    }
    /
    '--' {
      def tree(operand)
        Coal::Nodes::PostfixDecrement.new(operand)
      end
    }
    /
    '[' ws? expression ws? ']' {
      def tree(operand)
        Coal::Nodes::Subscript.new(operand, expression.tree)
      end
    }
  end
  
  rule postfix_expression
    postfix_expression_start (ws? postfix_expression_end)+ {
      def tree
        expr = postfix_expression_start.tree
        elements[1].each do |e|
          expr = e[1].tree(expr)
        end
        expr
      end
    }
    /
    postfix_expression_start
  end
  
  rule argument_expression_list
    assignment_expression (ws? ',' ws? assignment_expression)* {
      def tree
        [assignment_expression.tree].concat(elements[1].map {|e| e[3].tree})
      end
    }
  end
  
  rule unary_expression
    '++' ws? unary_expression {
      def tree
        Coal::Nodes::PrefixIncrement.new(unary_expression.tree)
      end
    }
    /
    '--' ws? unary_expression {
      def tree
        Coal::Nodes::PrefixDecrement.new(unary_expression.tree)
      end
    }
    /
    [\*\&\+\-\~\!] ws? cast_expression {
      def tree
        {
          '*' => Coal::Nodes::Dereference,
          '&' => Coal::Nodes::AddressOf,
          '+' => Coal::Nodes::Positive,
          '-' => Coal::Nodes::Negative,
          '~' => Coal::Nodes::BitwiseComplement,
          '!' => Coal::Nodes::LogicalNot,
        }[elements[0].text_value].new(cast_expression.tree)
      end
    }
    /
    'sizeof' ws? '(' ws? type_name ws? ')' {
      def tree
        Coal::Nodes::SizeOf.new(type_name.tree, true)
      end
    }
    /
    'sizeof' ![\w] ws? unary_expression {
      def tree
        Coal::Nodes::SizeOf.new(unary_expression.tree, false)
      end
    }
    /
    postfix_expression
  end
  
  rule cast_expression
    '(' ws? type_name ws? ')' ws? cast_expression {
      def tree
        Coal::Nodes::Cast.new(cast_expression.tree, type_name.tree)
      end
    }
    /
    unary_expression
  end
  
  rule multiplicative_expression
    cast_expression (ws? [\*/%] ws? cast_expression)+ {
      def tree
        ltr_binomial_tree({
          '*' => Coal::Nodes::Multiply,
          '/' => Coal::Nodes::Divide,
          '%' => Coal::Nodes::Modulo,
        })
      end
    }
    / 
    cast_expression
  end
  
  rule additive_expression
    multiplicative_expression (ws? [\+\-] ws? multiplicative_expression)+ {
      def tree
        ltr_binomial_tree({
          '+' => Coal::Nodes::Add,
          '-' => Coal::Nodes::Subtract,
        })
      end
    }
    /
    multiplicative_expression
  end
  
  rule shift_expression
    additive_expression (ws? ('<<'/'>>') ws? additive_expression)+ {
      def tree
        ltr_binomial_tree({
          '<<' => Coal::Nodes::LeftBitshift,
          '>>' => Coal::Nodes::RightBitshift,
        })
      end
    }
    /
    additive_expression
  end
  
  rule relational_expression
    shift_expression (ws? ('<='/'<'/'>='/'>') ws? shift_expression)+ {
      def tree
        ltr_binomial_tree({
          '<=' => Coal::Nodes::LessOrEqual,
          '<'  => Coal::Nodes::Less,
          '>=' => Coal::Nodes::GreaterOrEqual,
          '>'  => Coal::Nodes::Greater,
        })
      end
    }
    /
    shift_expression
  end
  
  rule equality_expression
    relational_expression (ws? ('=='/'!=') ws? relational_expression)+ {
      def tree
        ltr_binomial_tree({
          '==' => Coal::Nodes::Equal,
          '!=' => Coal::Nodes::NotEqual,
        })
      end
    }
    /
    relational_expression
  end
  
  rule and_expression
    equality_expression (ws? '&' ws? equality_expression)+ {
      def tree
        ltr_binomial_tree '&' => Coal::Nodes::BitwiseAnd
      end
    }
    /
    equality_expression
  end
  
  rule exclusive_or_expression
    and_expression (ws? '^' ws? and_expression)+ {
      def tree
        ltr_binomial_tree '^' => Coal::Nodes::BitwiseXor
      end
    }
    /
    and_expression
  end
  
  rule inclusive_or_expression
    exclusive_or_expression (ws? '|' ws? exclusive_or_expression)+ {
      def tree
        ltr_binomial_tree '|' => Coal::Nodes::BitwiseOr
      end
    }
    /
    exclusive_or_expression
  end
  
  rule logical_and_expression
    inclusive_or_expression (ws? '&&' ws? inclusive_or_expression)+ {
      def tree
        ltr_binomial_tree '&&' => Coal::Nodes::LogicalAnd
      end
    }
    /
    inclusive_or_expression
  end
  
  rule logical_or_expression
    logical_and_expression (ws? '||' ws? logical_and_expression)+ {
      def tree
        ltr_binomial_tree '||' => Coal::Nodes::LogicalOr
      end
    }
    /
    logical_and_expression
  end
  
  rule conditional_expression
    logical_or_expression ws? '?' ws? expression ws? ':' ws? conditional_expression {
      def tree
        e = elements
        Coal::Nodes::ConditionalExpression.new(e[0].tree, e[4].tree, e[8].tree)
      end
    }
    / 
    logical_or_expression
  end
  
  rule assignment_expression
    unary_expression ws? assignment_operator ws? assignment_expression {
      def tree
        op = assignment_operator.text_value.chop
        lvalue = unary_expression.tree
        rvalue = assignment_expression.tree
        rvalue = case op
          when '*':  Coal::Nodes::Multiply.new(lvalue, rvalue)
          when '/':  Coal::Nodes::Divide.new(lvalue, rvalue)
          when '%':  Coal::Nodes::Modulo.new(lvalue, rvalue)
          when '+':  Coal::Nodes::Add.new(lvalue, rvalue)
          when '-':  Coal::Nodes::Subtract.new(lvalue, rvalue)
          when '<<': Coal::Nodes::LeftBitshift.new(lvalue, rvalue)
          when '>>': Coal::Nodes::RightBitshift.new(lvalue, rvalue)
          when '&':  Coal::Nodes::BitwiseAnd.new(lvalue, rvalue)
          when '^':  Coal::Nodes::BitwiseXor.new(lvalue, rvalue)
          when '|':  Coal::Nodes::BitwiseOr.new(lvalue, rvalue)
          else rvalue
        end
        Coal::Nodes::Assign.new(lvalue, rvalue)
      end
    }
    /
    conditional_expression
  end
  
  rule assignment_operator
    '='/'*='/'/='/'%='/'+='/'-='/'<<='/'>>='/'&='/'^='/'|='
  end
  
  rule expression
    assignment_expression (ws? ',' ws? assignment_expression)+ {
      def tree
        [assignment_expression.tree].concat(elements[1].map {|e| e[3].tree})
      end
    }
    / assignment_expression
  end
  
  rule constant_expression
    conditional_expression
  end
  
  ## Declarations
  
  rule declaration_start
    declaration_specifier ![\w] ws? declaration_start {
      def tree
        node = declaration_start.tree
        node.specifiers << declaration_specifier.tree
        node
      end
    }
    /
    declaration_specifier ![\w] ws? unambiguous_declaration_specifier {
      def tree
        specifiers = [elements[0].tree, elements[3].tree]
        Coal::Nodes::Declaration.new(specifiers)
      end
    }
    /
    declaration_specifier ![\w] ws? init_declarator_list {
      def tree
        specifiers = [declaration_specifier.tree]
        Coal::Nodes::Declaration.new(specifiers, init_declarator_list.tree)
      end
    }
  end
  
  rule declaration
    declaration_start ws? ';' {
      def tree
        declaration_start.tree
      end
    }
    /
    declaration_specifier ws? ';' {
      def tree
        Coal::Nodes::Declaration.new([declaration_specifier.tree])
      end
    }
  end
  
  rule unambiguous_declaration_specifier
    storage_class_specifier
    /
    type_qualifier
    /
    function_specifier
    /
    unambiguous_type_specifier
  end
  
  rule declaration_specifier
    unambiguous_type_specifier
    /
    typedef_name
  end
  
  rule init_declarator_list
    init_declarator (ws? ',' ws? init_declarator)* {
      def tree
        [init_declarator.tree].concat(elements[1].map {|e| e[3].tree})
      end
    }
  end
  
  rule init_declarator
    declarator ws? '=' ws? initializer {
      def tree
        Coal::Nodes::InitDeclarator.new(declarator.tree, initializer.tree)
      end
    }
    /
    declarator
  end
  
  rule storage_class_specifier
    'typedef'
    / 'extern'
    / 'static'
    / 'auto'
    / 'register'
  end
  
  rule unambiguous_type_specifier
    (
      'void'
      / 'char'
      / 'short'
      / 'int'
      / 'long'
      / 'float'
      / 'double'
      / 'signed'
      / 'unsigned'
      / '_Bool'
      / '_Complex'
    ) {
      def tree
        text_value
      end
    }
    /
    struct_or_union_specifier
    /
    enum_specifier
  end
  
  rule type_specifier
    unambiguous_type_specifier
    /
    typedef_name
  end
  
  rule struct_or_union_specifier
    struct_or_union (ws identifier)? ws? '{' ws? struct_declaration_list ws? '}'
    / struct_or_union ws identifier
  end
  
  rule struct_or_union
    'struct' / 'union'
  end
  
  rule struct_declaration_list
    struct_declaration (ws struct_declaration)*
  end
  
  rule struct_declaration
    specifier_qualifier_list ws struct_declarator_list ws? ';'
  end
  
  rule specifier_qualifier_list
    type_specifier (ws specifier_qualifier_list)?
    / type_qualifier (ws specifier_qualifier_list)?
  end
  
  rule struct_declarator_list
    struct_declarator (ws? ',' ws? struct_declarator)*
  end
  
  rule struct_declarator
    (declarator ws?)? ':' ws? constant_expression
    / declarator
  end
  
  rule enum_specifier
    'enum' (ws identifier)? ws? '{' ws? enumerator_list ws? (',' ws?)? '}'
    / 'enum' ws identifier
  end
  
  rule enumerator_list
    enumerator (ws? ',' ws? enumerator)*
  end
  
  rule enumerator
    enumeration_constant ws? '=' ws? constant_expression
    / enumeration_constant
  end
  
  rule type_qualifier
    'const'
    / 'restrict'
    / 'volatile'
  end
  
  rule function_specifier
    'inline'
  end
  
  rule declarator
    pointer ws? direct_declarator
    /
    direct_declarator
  end
  
  rule direct_declarator_start
    identifier
    /
    '(' ws? declarator ws? ')' {
      def tree
        declarator.tree
      end
    }
  end
  
  rule direct_declarator_end
    '[' ws? (type_qualifier_list ![\w] ws?)? (assignment_expression ws?)? ']' {
      def tree(declarator)
        tql = elements[2].empty? ? [] : elements[2][0].tree
        ae = elements[3].empty? ? nil : elements[3][0].tree
        Coal::Nodes::ArrayDeclarator.new(declarator, tql, ae, false)
      end
    }
    /
    '[' ws? 'static' ![\w] ws? (type_qualifier_list ![\w] ws?)?
        assignment_expression ws? ']' {
      def tree(declarator)
        tql = elements[5].empty? ? [] : elements[5][0].tree
        ae = assignment_expression.tree
        Coal::Nodes::ArrayDeclarator.new(declarator, tql, ae, true)
      end
    }
    /
    '[' ws? type_qualifier_list ws 'static' ![\w] ws?
        assignment_expression ws? ']' {
      def tree(declarator)
        tql = type_qualifier_list.tree
        ae = assignment_expression.tree
        Coal::Nodes::ArrayDeclarator.new(declarator, tql, ae, true)
      end
    }
    /
    #TODO: investigate splat
    '[' ws? (type_qualifier_list ws?)? '*' ws? ']'
    /
    '(' ws? parameter_type_list ws? ')' {
      def tree(declarator)
        Coal::Nodes::FunctionDeclarator.new(declarator, parameter_type_list.tree, nil)
      end
    }
    /
    '(' ws? (identifier_list ws?)? ')' {
      def tree(declarator)
        ids = elements[2].empty? ? [] : elements[2][0].tree
        Coal::Nodes::FunctionDeclarator.new(declarator, nil, ids)
      end
    }
  end
  
  rule direct_declarator
    direct_declarator_start (ws? direct_declarator_end)* {
      def tree
        decl = direct_declarator_start.tree
        elements[1].each do |e|
          decl = e[1].tree decl
        end
        decl
      end
    }
  end
  
  rule pointer
    '*' ws? type_qualifier_list? ws? pointer
    /
    '*' ws? type_qualifier_list?
  end
  
  rule type_qualifier_list
    type_qualifier (ws type_qualifier)* {
      def tree
        [type_qualifier.tree].concat(elements[1].map {|e| e[1].tree})
      end
    }
  end
  
  rule parameter_type_list
    parameter_list ws? ',' ws? '...' {
      def tree
        parameter_list.tree << '...'
      end
    }
    /
    parameter_list
  end
  
  rule parameter_list
    parameter_declaration (ws? ',' ws? parameter_declaration)* {
      def tree
        [parameter_declaration.tree].concat(elements[1].map {|e| e[3].tree})
      end
    }
  end
  
  rule parameter_declaration
    declaration_specifier ![\w] ws? parameter_declaration {
      def tree
        pd = parameter_declaration.tree
        pd.specifiers << declaration_specifier.tree
        pd
      end
    }
    /
    declaration_specifier ![\w] ws? (declarator / abstract_declarator) {
      def tree
        specifiers = [declaration_specifier.tree]
        Coal::Nodes::ParameterDeclaration.new(specifiers, elements[3].tree)
      end
    }
  end
  
  rule identifier_list
    identifier (ws? ',' ws? identifier)* {
      def tree
        [identifier.tree].concat(elements[1].map {|e| e[3].tree})
      end
    }
  end
  
  rule type_name
    specifier_qualifier_list ws? abstract_declarator?
  end
  
  rule abstract_declarator
    pointer ws? direct_abstract_declarator
    / pointer
  end
  
  rule direct_abstract_declarator_start
    '(' ws? abstract_declarator ws? ')'
  end
  
  rule direct_abstract_declarator_end
    '[' ws? assignment_expression ws? ']'
    /
    '[' ws? '*' ws? ']'
    /
    '(' ws? (parameter_type_list ws?)? ')'
  end
  
  rule direct_abstract_declarator
    direct_abstract_declarator_start ws? direct_abstract_declarator_end
    /
    direct_abstract_declarator_start
  end
  
  rule typedef_name
    identifier
  end
  
  rule initializer
    '{' ws? initializer_list ws? (',' ws?)? '}'
    /
    assignment_expression
  end
  
  rule initializer_list_item
    (designation ws?)? initializer
  end
  
  rule initializer_list
    initializer_list_item (ws? ',' ws? initializer_list_item)*
  end
  
  rule designation
    designator_list ws? '='
  end
  
  rule designator_list
    designator (ws? designator)*
  end
  
  rule designator
    '[' ws? constant_expression ws? ']'
    / '.' ws? identifier
  end
  
  ## Statements
  
  rule statement
    labeled_statement
    / compound_statement
    / selection_statement
    / iteration_statement
    / jump_statement
    / expression_statement
  end
  
  rule labeled_statement
    'case' ![\w] ws? constant_expression ws? ':' ws? statement {
      def tree
        Coal::Nodes::CaseStatement.new(constant_expression.tree, statement.tree)
      end
    }
    / 'default' ws? ':' ws? statement
    / identifier ws? ':' ws? statement
  end
  
  rule compound_statement
    '{' ws? (block_item_list ws?)? '}' {
      def tree
        elements[2].empty? ? [] : elements[2][0].tree
      end
    }
  end
  
  rule block_item_list
    block_item (ws? block_item)* {
      def tree
        arr = [block_item.tree]
        arr.concat(elements[1].map {|e| e[1].tree}) unless elements[1].empty?
        arr
      end
    }
  end
  
  rule block_item
    statement
    /
    declaration
  end
  
  rule expression_statement
    (expression ws?)? ';' {
      def tree
        expr = elements[0].empty? ? nil : elements[0][0].tree
        Coal::Nodes::ExpressionStatement.new(expr)
      end
    }
  end
  
  rule selection_statement
    'if' ws? '(' ws? expression ws? ')' ws? statement ws? 'else' ws? statement {
      def tree
        cond = expression.tree
        Coal::Nodes::IfStatement.new(cond, elements[8].tree, elements[12].tree)
      end
    }
    /
    'if' ws? '(' ws? expression ws? ')' ws? statement {
      def tree
        cond = expression.tree
        Coal::Nodes::IfStatement.new(cond, statement.tree)
      end
    }
    /
    'switch' ws? '(' ws? expression ws? ')' ws? statement
  end
  
  rule iteration_statement
    'while' ws? '(' ws? expression ws? ')' ws? statement {
      def tree
        Coal::Nodes::WhileLoop.new(expression.tree, statement.tree)
      end
    }
    /
    'do' ![\w] ws? statement ws? 'while' ws? '(' ws? expression ws? ')' ws? ';' {
       def tree
        Coal::Nodes::DoWhileLoop.new(expression.tree, statement.tree)
       end
    }
    /
    'for' ws? '(' ws? (expression ws?)? ';' ws? (expression ws?)? ';' ws?
        (expression ws?)? ')' ws? statement {
      def tree
        e = elements
        initializer = e[4].empty? ? nil : e[4][0].tree 
        condition = e[7].empty? ? nil : e[7][0].tree
        incrementer = e[10].empty? ? nil : e[10][0].tree
        Coal::Nodes::ForLoop.new(initializer, condition, incrementer, statement.tree)
      end
    }
    /
    'for' ws? '(' ws? declaration ws? (expression ws?)? ';' ws?
        (expression ws?)? ')' ws? statement {
      def tree
        e = elements
        initializer = declaration.tree 
        condition = e[6].empty? ? nil : e[6][0].tree
        incrementer = e[9].empty? ? nil : e[9][0].tree
        Coal::Nodes::ForLoop.new(initializer, condition, incrementer, statement.tree)
      end
    }
  end
  
  rule jump_statement
    'goto' ws identifier ws? ';' {
      def tree
        Coal::Nodes::GoToStatement.new(identifier.tree)
      end
    }
    /
    'continue' ws? ';' {
      def tree
        Coal::Nodes::ContinueStatement.new(identifier.tree)
      end
    }
    /
    'break' ws? ';' {
      def tree
        Coal::Nodes::BreakStatement.new(identifier.tree)
      end
    }
    /
    'return' ![\w] ws? (expression ws?)? ';' {
      def tree
        if elements[2].empty?
          Coal::Nodes::ReturnStatement.new
        else
          Coal::Nodes::ReturnStatement.new(elements[3][0].tree)
        end
      end
    }
  end
  
  ## External definitions
  
  rule translation_unit
    external_declaration (ws? external_declaration)* {
      def tree
        [external_declaration.tree].concat(elements[1].map {|e| e[1].tree})
      end
    }
  end
  
  rule external_declaration
    function_definition
    /
    declaration
  end
  
  rule function_definition_start
    declaration_specifier ![\w] ws? function_definition_start {
      def tree
        arr = function_definition_start.tree
        arr[0] << declaration_specifier.tree
        arr
      end
    }
    /
    declaration_specifier ![\w] ws? declarator {
      def tree
        [[declaration_specifier.tree], declarator.tree]
      end
    }
  end
  
  rule function_definition
    function_definition_start ![\w] ws?
        (declaration_list ws?)? compound_statement {
      def tree
        specs, declarator = *function_definition_start.tree
        decls = elements[3].empty? ? [] : elements[3][0].tree
        statement = compound_statement.tree
        Coal::Nodes::FunctionDefinition.new(specs, declarator, decls, statement)
      end
    }
  end
  
  rule declaration_list
    declaration (ws? declaration)* {
      def tree
        [declaration.tree].concat(elements[1].map {|e| e[1].tree})
      end
    }
  end
  
  ################
  # Preprocessor #
  ################
  
  rule gap
    [\t ]+
  end
  
  rule preprocessing_token
    header_name
    /
    identifier
    #/
    #pp_number
    /
    character_constant
    /
    string_literal
    #/
    #punctuator
    /
    [^\s]
  end
  
  # Skipped A.1.7
  
  rule header_name
    '<' gap? [^>]+ gap? '>' {
      def tree
        Coal::Nodes::AngledHeaderName.new(elements[2].text_value)
      end
    }
    /
    '"' gap? [^"]+ gap? '"' { #'
      def tree
        Coal::Nodes::QuotedHeaderName.new(elements[2].text_value)
      end
    }
  end
  
  # Skipped A.1.9
  
  rule preprocessing_file
    ws? (group ws?)? {
      def tree
        elements[1].empty? ? [] : elements[1][0].tree
      end
    }
  end
  
  rule group
    group_part (ws? group_part)* {
      def tree
        [group_part.tree].concat(elements[1].map {|e| e[1].tree})
      end
    }
  end
  
  rule group_part
    #if_section
    #/
    control_line
    #/
    #'#' gap? non_directive
    /
    text_line
  end
  
  # ...
  
  rule control_line
    '#' gap? 'include' gap? pp_tokens gap? "\n" {
      def tree
        Coal::Nodes::IncludeDirective.new(pp_tokens.tree)
      end
    }
    # ...
  end
  
  rule text_line
    pp_tokens gap? "\n" {
      def tree
        text_value
      end
    }
  end
  
  # ...
  
  rule pp_tokens
    preprocessing_token (gap? preprocessing_token)* {
      def tree
        [preprocessing_token.tree].concat(elements[1].map {|e| e[1].tree})
      end
    }
  end
end

